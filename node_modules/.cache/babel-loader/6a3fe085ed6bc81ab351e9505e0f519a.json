{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\task\\taskAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\task\\taskAdd.vue","mtime":1624071363330},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _task = require(\"@/api/cggl/task\");\n\nvar _person = require(\"@/api/rsgl/person\");\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'TaskAdd',\n  components: {\n    UpFile: _UpFile.default\n  },\n  props: {\n    obj: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        number: '',\n        planId: null,\n        planNumber: '',\n        orgId: null,\n        orgStr: '',\n        planTypeName: '',\n        materialTypeName: '',\n        buyerId: null,\n        fileList: [],\n        remark: ''\n      },\n      loading: false,\n      showbuttons: false,\n      loadFlow: false,\n      dialogTableVisible: false,\n      dialogTitle: '保存',\n      dialogWidth: '70%',\n      currentRow: null,\n      listIndex: 0,\n      list: [],\n      attitudePara: null,\n      fileList: [],\n      columnShow: {\n        unit2: true,\n        brand: true,\n        model: true,\n        spec: true,\n        thickness: true,\n        texture: true,\n        surfaceTreatment: true,\n        designNumber: true\n      },\n      personList: [],\n      rules: {\n        // number: [{ required: true, message: '请输入', trigger: 'blur' }],\n        buyerId: [{\n          required: true,\n          message: '请输入',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: {\n    getOrgList: function getOrgList() {\n      return this.$store.state.user.info.orgList;\n    }\n  },\n  watch: {// 'ruleForm.orgId': {\n    //   handler: function(value, oldvalue) {\n    //     if (!oldvalue) {\n    //       this.$refs['ruleForm'].validateField('orgId', (valid) => {})\n    //     }\n    //   }, deep: true\n    // }\n  },\n  activated: function activated() {},\n  mounted: function mounted() {\n    this.initData();\n  },\n  methods: {\n    initData: function () {\n      var _initData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.obj) {\n                  this.ruleForm = {\n                    id: 0,\n                    number: '',\n                    planId: this.obj.planId,\n                    orgId: this.obj.orgId,\n                    buyerId: null,\n                    fileList: [],\n                    state: 0,\n                    remark: ''\n                  };\n                  (0, _task.getCGTaskNumber)({\n                    planNumber: this.obj.planNumber\n                  }).then(function (response) {\n                    response.data = response.data + 1;\n                    _this.ruleForm.number = _this.obj.planNumber + '-' + response.data;\n                  });\n                  this.loading = true;\n                  this.list = this.obj.data;\n                  this.loading = false;\n                  this.setColumnShow();\n                }\n\n                (0, _person.getPersonList)().then(function (response) {\n                  _this.personList = response.data;\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }(),\n    // closeThePage() {\n    //   this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\n    // },\n    setColumnShow: function setColumnShow() {\n      // 设置列的显示。列中，都没有值，就隐藏\n      var modelunit2 = false;\n      var modelbrand = false;\n      var modelmodel = false;\n      var modelspec = false;\n      var modelthickness = false;\n      var modeltexture = false;\n      var modelsurfaceTreatment = false;\n      var modeldesignNumber = false;\n\n      var _iterator = (0, _createForOfIteratorHelper2.default)(this.list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n\n          if (row.unit2) {\n            modelunit2 = true;\n          }\n\n          if (row.brand) {\n            modelbrand = true;\n          }\n\n          if (row.model) {\n            modelmodel = true;\n          }\n\n          if (row.spec) {\n            modelspec = true;\n          }\n\n          if (row.thickness) {\n            modelthickness = true;\n          }\n\n          if (row.texture) {\n            modeltexture = true;\n          }\n\n          if (row.surfaceTreatment) {\n            modelsurfaceTreatment = true;\n          }\n\n          if (row.designNumber) {\n            modeldesignNumber = true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.columnShow['unit2'] = modelunit2;\n      this.columnShow['brand'] = modelbrand;\n      this.columnShow['model'] = modelmodel;\n      this.columnShow['spec'] = modelspec;\n      this.columnShow['thickness'] = modelthickness;\n      this.columnShow['texture'] = modeltexture;\n      this.columnShow['surfaceTreatment'] = modelsurfaceTreatment;\n      this.columnShow['designNumber'] = modeldesignNumber;\n    },\n    showFileList: function showFileList(fileList) {\n      this.dialogTitle = '附件列表';\n      this.comName = 'UpFile';\n      this.dialogWidth = '50%';\n      this.fileList = fileList;\n      this.dialogTableVisible = true;\n    },\n    getRemotePerson: function getRemotePerson(query) {\n      var _this2 = this;\n\n      query = query.trim();\n\n      if (query !== '') {\n        this.loading = true;\n        setTimeout(function () {\n          (0, _person.getPersonList)().then(function (response) {\n            _this2.personList = response.data;\n            _this2.loading = false;\n          });\n        }, 200);\n      } else {\n        this.personList = [];\n      }\n    },\n    addTask: function addTask() {\n      var _this3 = this;\n\n      this.$refs['ruleForm'].validate(function (valid) {\n        if (valid) {\n          var newObj = JSON.parse(JSON.stringify(_this3.ruleForm));\n          newObj.state = 0; // 拼接材料明细参数\n\n          var arr1 = [];\n\n          _this3.list.forEach(function (e) {\n            var m = {};\n            m.categoryId = e.categoryId;\n            m.categoryName = e.category.name; // m.unit = e.category.unit\n\n            m.unit2 = e.unit2;\n            m.brand = e.brand;\n            m.model = e.model;\n            m.spec = e.spec;\n            m.thickness = e.thickness;\n            m.texture = e.texture;\n            m.surfaceTreatment = e.surfaceTreatment;\n            m.designNumber = e.designNumber;\n            var item = {};\n            item.material = m; // item.fileList = []\n            // if (e.fileList.length) {\n            //   item.fileList = e.fileList.map(m => { return { id: m.id, addFlag: m.addFlag } })\n            // }\n\n            item.id = e.id;\n            item.applicationQuantity = e.applicationQuantity;\n            item.applicationQuantity2 = e.applicationQuantity2 || 0;\n            item.quantity = e.quantity;\n            item.quantity2 = e.quantity2;\n            item.entryDate = e.entryDate;\n            item.remark = e.remark;\n            item.targetCostMaterialId = e.targetCostMaterialId;\n            item.state = 0;\n            arr1.push(item);\n          });\n\n          newObj.planDetails = arr1;\n          console.log('分配的数据：', newObj);\n          _this3.loading = true;\n          (0, _task.addCGTask)(newObj).then(function (response) {\n            _this3.$message(response.message);\n\n            _this3.loading = false; // this.closeThePage()\n\n            _this3.$emit('dialogClose');\n          }).catch(function () {\n            _this3.loading = false;\n          }); // this.loading = false\n          // this.$emit('dialogClose')\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\gckgl\\output\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\gckgl\\output\\index.vue","mtime":1635749455698},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _projectOutput = require(\"@/api/xmgl/projectOutput\");\n\nvar _SearchBar = _interopRequireDefault(require(\"@/components/SearchBar\"));\n\nvar _searchData = _interopRequireDefault(require(\"./searchData\"));\n\nvar _pikazExcelJs = require(\"pikaz-excel-js\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ProjectOutput',\n  components: {\n    SearchBar: _SearchBar.default,\n    ExcelExport: _pikazExcelJs.ExcelExport\n  },\n  data: function data() {\n    return {\n      tabPosition: 0,\n      size: 'mini',\n      // 整体大小 medium / small / mini\n      searchData: _searchData.default,\n      // 渲染搜索栏数据\n      internalOutput: 0,\n      // 统计对内产值\n      externalOutput: 0,\n      // 统计对外产值\n      receivable: 0,\n      // 统计应收款\n      stateList: [],\n      // 单据状态\n      filename: '工程产值应收款列表',\n      exLoading: false,\n      sheet: [],\n\n      /* 列表数据相关 */\n      table: {\n        list: [],\n        loading: false,\n        total: 0,\n        currentPage: 1,\n        pageSize: this.utils.getPersonalSettings().pageSize\n      }\n    };\n  },\n  activated: function activated() {\n    console.info('actived');\n    this.fetchData();\n  },\n  created: function created() {\n    console.info('created');\n    this.fetchData();\n  },\n  methods: {\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var postData, response, data, count, projectStateList, internalOutput, externalOutput, receivable;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.table.loading = true;\n                _context.prev = 1;\n                // 获取请求参数\n                postData = this.getSearchData();\n                postData.currentPage = this.table.currentPage;\n                postData.pageSize = this.table.pageSize;\n                postData.type = this.tabPosition;\n                console.log('fetchData:请求数据', postData); // 请求开始\n\n                _context.next = 9;\n                return (0, _projectOutput.getProjectOutputPaging)(postData);\n\n              case 9:\n                response = _context.sent;\n                data = response.data, count = response.count, projectStateList = response.projectStateList, internalOutput = response.internalOutput, externalOutput = response.externalOutput, receivable = response.receivable;\n                this.internalOutput = internalOutput;\n                this.externalOutput = externalOutput;\n                this.receivable = receivable; // 搜索栏数据初始化\n\n                projectStateList.forEach(function (ele) {\n                  // 项目状态选项数据转换\n                  ele.label = ele.name;\n                });\n\n                if (count > 0) {\n                  data.forEach(function (ele) {\n                    if (ele.billFlow != null) {\n                      _this.stateList = ele.billFlow.form.formState;\n                    }\n                  });\n                  this.stateList.forEach(function (ele) {\n                    ele.label = ele.name;\n                  }); // 数据转换\n                }\n\n                this.searchData = this.searchData.map(function (item) {\n                  item.options = item.name === 'projectState' ? projectStateList : item.options;\n                  item.options = item.name === 'states' ? _this.stateList : item.options;\n                  return item;\n                }); // 列表数据初始化\n\n                this.table.list = data;\n                this.table.total = count;\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](1);\n                console.log('fetchData:请求列表数据失败，错误信息：', _context.t0);\n\n              case 24:\n                _context.prev = 24;\n                this.table.loading = false;\n                return _context.finish(24);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 21, 24, 27]]);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n\n    /**\r\n     * @description: 设置表格名字\r\n     */\n    setFname: function setFname() {\n      var date = this.utils.parseTime(new Date());\n      date = date.replace(' ', '_');\n      date = date.replace(':', '_');\n      this.filename = this.filename + date;\n    },\n\n    /**\r\n     * @description:表格导出功能\r\n     */\n    exportExcel: function () {\n      var _exportExcel = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var postData, _yield$getProjectOutp, data, table;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.exLoading = true;\n                postData = this.getSearchData();\n                postData.currentPage = this.table.currentPage;\n                postData.pageSize = this.table.total;\n                _context2.next = 7;\n                return (0, _projectOutput.getProjectOutputPaging)(postData);\n\n              case 7:\n                _yield$getProjectOutp = _context2.sent;\n                data = _yield$getProjectOutp.data;\n                table = data.map(function (item) {\n                  return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, item), {}, {\n                    state: item.state === 0 ? '制单' : item.state === 1 ? '审批' : item.state === 10000 ? '完成' : '作废'\n                  });\n                });\n                this.sheet = [{\n                  sheetName: '工程产值应收款列表',\n                  keys: ['number', 'orgName', 'projectName', 'firstPartyName', 'outputYear', 'outputMonth', 'managerName', 'internalOutput', 'externalOutput', 'receivable', 'remark', 'state', 'createUserName', 'createDate'],\n                  tHeader: ['编号', '地区', '项目', '甲方名称', '年份', '月份', '项目经理', '对内产值', '对外产值', '应收', '备注', '状态', '制单人', '制单日期'],\n                  table: table\n                }];\n                this.setFname();\n                this.$refs.excelExport.pikaExportExcel();\n                _context2.next = 19;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.onError('获取表格数据失败！');\n\n              case 19:\n                _context2.prev = 19;\n                this.exLoading = false;\n                return _context2.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 15, 19, 22]]);\n      }));\n\n      function exportExcel() {\n        return _exportExcel.apply(this, arguments);\n      }\n\n      return exportExcel;\n    }(),\n\n    /**\r\n     * @description: excel导出错误处理\r\n     */\n    onError: function onError(err) {\n      this.$message.info('导出失败：' + err);\n    },\n\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\n    getSearchData: function getSearchData() {\n      var data = {};\n      console.log(this.searchData);\n      this.searchData.forEach(function (item) {\n        var val = item.value;\n\n        if (item.name === 'yearmonth') {\n          data.outputYear = val[0];\n          data.outputMonth = val[1];\n        } else if (item.name === 'year') {\n          data.year = new Date(val).getFullYear();\n        } else {\n          data[item.name] = item.value;\n        }\n      });\n      return data;\n    },\n\n    /**\r\n     * @description: type栏数据转换\r\n     * @param {Number} value\r\n     */\n    radioChange: function radioChange(value) {\n      // 清空和切换条件\n      this.searchData = _searchData.default; // 填充数据\n\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 设置分页大小\r\n     * @param {Number} val\r\n     */\n    sizeChange: function sizeChange(val) {\n      this.table.pageSize = val;\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 搜索回调\r\n     */\n    handelSearch: function () {\n      var _handelSearch = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.fetchData();\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handelSearch() {\n        return _handelSearch.apply(this, arguments);\n      }\n\n      return handelSearch;\n    }(),\n\n    /**\r\n     * @description: 单据状态\r\n     * @param {Object} row\r\n     */\n    getFormState: function getFormState(row) {\n      if (!row.billFlow) {\n        return '流程空';\n      }\n\n      var formState = row.billFlow.form.formState;\n      this.formState = formState;\n      var state = row.state;\n      var obj = formState.find(function (f) {\n        return f.value === state;\n      });\n\n      if (obj) {\n        return obj.name;\n      } else {\n        return '状态不详';\n      }\n    },\n    getType: function getType(state) {\n      var type = 'primary';\n\n      switch (state) {\n        case 0:\n          type = 'info';\n          break;\n\n        case 1:\n          type = 'warning';\n          break;\n\n        case 1000:\n          type = 'primary';\n          break;\n\n        case 10000:\n          type = 'success';\n          break;\n\n        case -1:\n          type = 'danger';\n          break;\n      }\n\n      return type;\n    },\n\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\n    handleDetails: function handleDetails(row) {\n      this.$router.push({\n        name: 'ProjectOutputDetail',\n        query: {\n          id: row.id,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: row.id\n        }\n      });\n    },\n\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\n    handleAttitude: function handleAttitude(row) {\n      this.$router.push({\n        name: 'ProjectOutputAttitude',\n        query: {\n          id: row.id,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: row.id\n        }\n      });\n    },\n\n    /**\r\n     * @description: table编辑\r\n     * @param {Object} row\r\n     */\n    handleEdit: function handleEdit() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var type = arguments.length > 1 ? arguments[1] : undefined;\n      this.$router.push({\n        name: 'ProjectOutputEdit',\n        query: {\n          type: type,\n          id: id,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: id,\n          type: 3\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
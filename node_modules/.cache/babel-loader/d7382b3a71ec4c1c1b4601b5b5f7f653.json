{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\jhgl\\targetCostDetailAll.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\jhgl\\targetCostDetailAll.vue","mtime":1628230219017},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _targetCost = require(\"@/api/cggl/targetCost\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'TargetCostDetailAll',\n  components: {},\n  props: {\n    obj: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      loading: false,\n      listIndex: 0,\n      list: [],\n      loadFlow: false,\n      multipleSelection: [],\n      columnShow: {\n        unit2: true,\n        brand: true,\n        model: true,\n        spec: true,\n        thickness: true,\n        texture: true,\n        surfaceTreatment: true,\n        designNumber: true\n      }\n    };\n  },\n  watch: {},\n  activated: function activated() {},\n  mounted: function mounted() {\n    this.initData();\n  },\n  methods: {\n    check: function check() {\n      this.$emit('dialogClose', this.multipleSelection, 'addList');\n    },\n    initData: function () {\n      var _initData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.obj && this.obj.orgId)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                this.loading = true;\n                _context.next = 4;\n                return (0, _targetCost.getTargetCostDetailAllByOrgId)({\n                  orgId: this.obj.orgId\n                }).then(function (response) {\n                  return _this.setData(response);\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }(),\n    setData: function setData(response) {\n      var data = response.data;\n      var pom = [];\n      data.forEach(function (e) {\n        if (e.material.materialCategory.isMain === true) {\n          pom.push({\n            id: e.id,\n            targetCostMaterialId: e.materialId,\n            categoryId: e.material.categoryId,\n            category: {\n              id: e.material.categoryId,\n              name: e.material.materialCategory.name,\n              unit: e.material.materialCategory.unit,\n              isMain: e.material.materialCategory.isMain\n            },\n            // unit: e.material.unit,\n            unit2: e.material.unit2,\n            brand: e.material.brand,\n            model: e.material.model,\n            spec: e.material.spec,\n            thickness: e.material.thickness,\n            texture: e.material.texture,\n            surfaceTreatment: e.material.surfaceTreatment,\n            designNumber: e.material.designNumber,\n            targetCostQuantity: e.targetCostQuantity,\n            targetCostPrice: e.targetCostPrice,\n            targetCostAmount: e.targetCostAmount,\n            applicationQuantity: null,\n            applicationQuantity2: null,\n            quantity: null,\n            quantity2: null,\n            entryDate: null,\n            remark: null,\n            fileList: []\n          });\n        }\n      }); // 填充 明细列表\n\n      this.list = pom;\n      var rows = this.obj.datalist;\n      this.$refs.multipleTable.clearSelection();\n\n      if (rows) {\n        this.$nextTick(function () {\n          var _this2 = this;\n\n          // rows.forEach(f => {\n          //   this.list.forEach(e => {\n          //     if (f.materialId === e.materialId) {\n          //       this.$refs.multipleTable.toggleRowSelection(e, true)\n          //     } else {\n          //       alert(1)\n          //       this.$refs.multipleTable.toggleRowSelection(e, false)\n          //     }\n          //   })\n          // })\n          this.list.forEach(function (e) {\n            var row = rows.find(function (f) {\n              return f.targetCostMaterialId === e.targetCostMaterialId;\n            });\n\n            if (row) {\n              _this2.$refs.multipleTable.toggleRowSelection(e, true);\n            } else {\n              _this2.$refs.multipleTable.toggleRowSelection(e, false);\n            }\n          });\n        });\n      }\n\n      this.setColumnShow();\n      this.loading = false; // loading 状态关闭\n\n      this.loadFlow = true; // 加载审批组件\n    },\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    },\n    // 多选框选中数据\n    handleSelectionChange: function handleSelectionChange(selection) {\n      this.multipleSelection = selection;\n    },\n    setColumnShow: function setColumnShow() {\n      // 设置列的显示。列中，都没有值，就隐藏\n      var modelunit2 = false;\n      var modelbrand = false;\n      var modelmodel = false;\n      var modelspec = false;\n      var modelthickness = false;\n      var modeltexture = false;\n      var modelsurfaceTreatment = false;\n      var modeldesignNumber = false;\n\n      var _iterator = (0, _createForOfIteratorHelper2.default)(this.list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n\n          if (row.unit2) {\n            modelunit2 = true;\n          }\n\n          if (row.brand) {\n            modelbrand = true;\n          }\n\n          if (row.model) {\n            modelmodel = true;\n          }\n\n          if (row.spec) {\n            modelspec = true;\n          }\n\n          if (row.thickness) {\n            modelthickness = true;\n          }\n\n          if (row.texture) {\n            modeltexture = true;\n          }\n\n          if (row.surfaceTreatment) {\n            modelsurfaceTreatment = true;\n          }\n\n          if (row.designNumber) {\n            modeldesignNumber = true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.columnShow['unit2'] = modelunit2;\n      this.columnShow['brand'] = modelbrand;\n      this.columnShow['model'] = modelmodel;\n      this.columnShow['spec'] = modelspec;\n      this.columnShow['thickness'] = modelthickness;\n      this.columnShow['texture'] = modeltexture;\n      this.columnShow['surfaceTreatment'] = modelsurfaceTreatment;\n      this.columnShow['designNumber'] = modeldesignNumber;\n    },\n    getMainMaterial: function getMainMaterial(isMain) {\n      if (isMain === true) {\n        return '是';\n      } else {\n        return '否';\n      }\n    }\n  }\n};\nexports.default = _default;",null]}
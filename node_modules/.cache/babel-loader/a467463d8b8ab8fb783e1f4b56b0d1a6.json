{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\Select.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\Select.vue","mtime":1630891145113},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  model: {\n    event: 'change',\n    prop: 'value'\n  },\n  props: {\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          // 该属性对应el-option label属性的格式化输入，类似c语言中的printf，例子如下：\n          // format:'{{value}}-{{label}}'  select选项格式为: 1-小明\n          // 其中label、value为option对象的属性名\n          // 请注意不支持反斜杠转义，双大括号内是属性名，不可有空格或其他字符\n          format: '',\n          // format属性优先于label\n          value: 'value',\n          // 该属性决定选择option对象中哪个属性作为el-option value值\n          label: 'label' // 该属性决定选择option对象中哪个属性作为el-option label值\n          // search: ['value', 'label'] // 搜索配对的属性\n\n        };\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: '选择'\n    },\n    size: {\n      type: String,\n      default: 'small'\n    },\n    value: {\n      type: [Array, String, Number],\n      default: ''\n    },\n    options: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      keyword: ''\n    };\n  },\n  computed: {\n    filterOptions: function filterOptions() {\n      var _this = this;\n\n      var res = this.options;\n\n      if (this.keyword) {\n        var options = this.options.map(function (option) {\n          var tmp = '';\n          var _this$props = _this.props,\n              value = _this$props.value,\n              label = _this$props.label,\n              search = _this$props.search;\n          console.log(11111, _this.props);\n\n          if (Array.isArray(search) && search.length) {\n            tmp = search.map(function (k) {\n              return option[k];\n            }).join('');\n          } else {\n            tmp = option[label].toString() + option[value];\n          }\n\n          var searchText = _this.props.format ? _this.formatOption(option) : tmp;\n          return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, option), {}, {\n            searchText: searchText\n          });\n        }); // console.log(options)\n\n        res = this.fuzzyQuery(options, this.keyword);\n      }\n\n      return res;\n    },\n    inputVal: {\n      set: function set(val) {\n        this.$emit('change', val);\n      },\n      get: function get() {\n        return this.value;\n      }\n    }\n  },\n  methods: {\n    /**\r\n     * @description: 使用spilt方法实现模糊查询\r\n     * @param  {Array}  list     进行查询的字符串数组\r\n     * @param  {String} keyWord  查询的关键词\r\n     * @return {Array}           查询的结果\r\n     */\n    fuzzyQuery: function fuzzyQuery(list, keyWord) {\n      var arr = [];\n\n      for (var i = 0; i < list.length; i++) {\n        if (list[i].searchText.split(keyWord).length > 1) {\n          arr.push(list[i]);\n        }\n      }\n\n      return arr;\n    },\n\n    /**\r\n     * @description:修改关键字\r\n     * @param {*} keyWord 关键字\r\n     */\n    filterMethod: function filterMethod(keyword) {\n      this.keyword = keyword;\n    },\n\n    /**\r\n     * @description: 格式化字符串\r\n     * @param {Object} option\r\n     * @return {String} 格式化后的字符串\r\n     */\n    formatOption: function formatOption(option) {\n      var formatText = this.props.format;\n\n      if (formatText) {\n        var matchArr = (0, _toConsumableArray2.default)(formatText.matchAll(/{{(\\w+)}}/g));\n        matchArr.forEach(function (item) {\n          var replaceText = item[0];\n          var optionKey = item[1];\n          formatText = formatText.replace(replaceText, option[optionKey]);\n        });\n      } else {\n        var key = this.props.label;\n        formatText = option[key];\n      }\n\n      return formatText;\n    }\n  }\n};\nexports.default = _default2;",null]}
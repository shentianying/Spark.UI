{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\index.vue","mtime":1635749455612},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _objectSpread3 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _index = _interopRequireDefault(require(\"./Column/index.js\"));\n\nvar _businessList = _interopRequireDefault(require(\"./businessList\"));\n\nvar _util = require(\"./util\");\n\nvar _pikazExcelJs = require(\"pikaz-excel-js\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n * @method\r\n *          initExcel         initExcel(list)   返回Excel对象 {sheet, export}\r\n *                            sheet：的tHeader、keys通过遍历column.label、column.prop而来,所以提供column很重要\r\n *                            export(sheet): export是function，调用即导出，参数则是sheet\r\n *\r\n *\r\n * @props:\r\n *              columns:[]         // 需要渲染的列数据，但这不是必要的，可以使用tbAfter插槽或者默认插槽插入内容\r\n *              list:[]            // 列表数据\r\n *\r\n *\r\n *              exportExcelLoading  // 导出表格状态\r\n *              excelName           // 导出表格名字\r\n *\r\n *              tooltip-effect\t    // tooltip effect属性: dark/light 默认:light\r\n *              row-class-name\t   //行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。\r\n *                        \t 参数:Function({row, rowIndex})/String\r\n *\r\n *              actionsWidth:120  // 默认操作栏宽度\r\n *              showActions       // 展示默认操作栏(如当前操作栏不满足需求可用默认插槽或者具名插槽tbAfter插入el-table-column)\r\n *\r\n *\r\n *              currentPage:1      // 当前页数，支持 .sync 修饰符\r\n *              pageSize:10        // 每页显示条目个数，支持 .sync 修饰符\r\n *              total:0            // 总条目\r\n *              size:'mini'        // 组件大小\r\n *              tableLoading:true       // 加载状态\r\n *              showActions:true   // 显示默认操作栏\r\n *              showCount:true     // 显示默认统计栏\r\n *              countCont:''       // 统计栏文字，可插入html(实际通过v-html插入该内容)\r\n *\r\n *              popperClass:''     // popperover自定义类名(popperover只有超出隐藏时才展示)\r\n *\r\n * @slot: 在本组件中提供了以下：\r\n *             如果columns属性不能满足要求可以通过插槽去扩展\r\n *               tbAfter:  在遍历渲染props（el-table-column）之前；使用时请先插入el-table-column，与el-table中使用是一致的\r\n *               默认插槽:  在遍历渲染props（el-table-column）之后；使用时请先插入el-table-column，与el-table中使用是一致的\r\n *               actions:  操作栏插槽，在这里请直接插入按钮不需要el-table-column，如果不需要这列请使用props showActions参数隐藏\r\n *               count:    自定义统计栏插槽\r\n *               countCont 统计栏文字内容\r\n *\r\n *\r\n * @event  本组件提供了以下事件：\r\n *\r\n *               rowDblclick:    当某一行被双击时会触发该事件；参数 row, column, event(参考Element Table Events)\r\n *               currentChange:   当前页改变; 参数 current\r\n *               sizeChange:      当分页大小被改变; 参数 size\r\n *               fetchData:       当页改变或者页大小改变时触发\r\n *\r\n * @column对象\r\n *               {\r\n                  label: '部门', // 表头\r\n                  prop: 'number', // 渲染的属性\r\n                  // 输出前对数据进行转换处理。支持字符串或者函数\r\n\r\n                  formatPopper(val, format, row, column)  提示的格式化方式默认使用format。\r\n                  formatExport(val, format, row, column)  表格导出使用的格式化方式默认使用format。\r\n                  format(val,format, row, column)         自定义转换函数。处理好的数据直接return（接受字符串或者自定义函数）\r\n\r\n                  format:'date',  金额万分位:money;  日期:date  目前只接受两种\r\n\r\n                  class: 'link', // 自定义类名\r\n                  popoverType: 'createUserName', // 制单人:createUserName; 不设置时只有文本被折叠时展示(popover内容是所有内容包括被折叠部分)\r\n                  lineClamp: 1, // 超出多少行隐藏,默认1行隐藏               这里决定多少行被折叠\r\n                  click(row) {}, //  单击事件。当前行作为参数，处理好的数据直接return\r\n\r\n                  // 下面是el-table-column参数，具体请查看element文档\r\n                  align: 'center', // 对齐方式\r\n                  width: '130', // 宽度\r\n                  minWidth: '10' // 最小宽度\r\n                }\r\n */\nvar _default2 = {\n  name: 'TableEx',\n  components: {\n    TableExColumn: _index.default,\n    ExcelExport: _pikazExcelJs.ExcelExport\n  },\n  props: {\n    tooltipEffect: {\n      type: String,\n      default: 'light'\n    },\n    excelName: {\n      type: String,\n      default: '导出列表'\n    },\n    rowClassName: {\n      type: [Function, String],\n      default: ''\n    },\n    actionsWidth: {\n      type: Number,\n      default: 120\n    },\n    showActions: {\n      // 显示默认操作栏\n      type: Boolean,\n      default: true\n    },\n    showPagination: {\n      // 显示分页器\n      type: Boolean,\n      default: true\n    },\n    popperClass: {\n      // popper自定义类\n      type: String,\n      default: 'popper-cont'\n    },\n    showCount: {\n      // 显示统计\n      type: Boolean,\n      default: true\n    },\n    countCont: {\n      // 统计栏文字，可插入html\n      type: String,\n      default: ''\n    },\n    size: {\n      type: String,\n      default: 'mini'\n    },\n    tableLoading: {\n      // table Loading状态\n      type: Boolean,\n      default: false\n    },\n    exportExcelLoading: {\n      // Excel Loading状态\n      type: Boolean,\n      default: false\n    },\n    total: {\n      // total\t总条目数\tnumber\n      type: Number,\n      default: 0\n    },\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    columns: {\n      // 需要渲染的列数据，但这不是必要的，可以使用tbAfter插槽或者默认插槽插入内容\n      type: Array,\n      default: function _default() {\n        return [// {\n          //   label: '部门', // 表头\n          //   prop: 'number', // 渲染的属性\n          //   // 输出前对数据进行转换处理。支持字符串或者函数\n          //   formatPopper(val, format, row, column)  提示的格式化方式默认使用format。\n          //   formatExport(val, format, row, column)  表格导出使用的格式化方式默认使用format。\n          //   format(val,format, row, column)         自定义转换函数。处理好的数据直接return（接受字符串或者自定义函数）\n          //   format:'date',  金额万分位:money;  日期:date  目前只接受两种\n          //   class: 'link', // 自定义类名\n          //   popoverType: 'createUserName', // 制单人:createUserName; 不设置时只有文本被折叠时展示(popover内容是所有内容包括被折叠部分)\n          //   lineClamp: 1, // 超出多少行隐藏,默认1行隐藏               这里决定多少行被折叠\n          //   click(row) {}, //  单击事件。当前行作为参数，处理好的数据直接return\n          //   // 下面是el-table-column参数，具体请查看element文档\n          //   align: 'center', // 对齐方式\n          //   width: '130', // 宽度\n          //   minWidth: '10' // 最小宽度\n          // }\n        ];\n      }\n    },\n    list: {\n      // 渲染数据\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      tmpExcelName: '',\n      sheet: []\n    };\n  },\n  computed: {\n    bColumns: function bColumns() {\n      return this.columns.map(function (column) {\n        return (0, _objectSpread3.default)((0, _objectSpread3.default)({}, _businessList.default[column.business]), column);\n      });\n    }\n  },\n  methods: {\n    /**\r\n     * @description:表格导出功能\r\n     */\n    initExcel: function initExcel() {\n      var table = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.$emit('update:exportExcelLoading', true);\n      var sheet1 = {\n        sheetName: this.excelName,\n        keys: [],\n        tHeader: [],\n        table: table\n      };\n      this.bColumns.forEach(function (column) {\n        sheet1.keys.push(column.prop);\n        sheet1.tHeader.push(column.label);\n      });\n      this.setFname();\n      var self = this;\n      return {\n        sheet: [sheet1],\n        format: function format() {\n          var sheet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.sheet;\n\n          try {\n            self.bColumns.forEach(function (column) {\n              sheet = sheet.map(function (item) {\n                var table = item.table.map(function (row) {\n                  var val = self.formatExport(row, column);\n                  return (0, _objectSpread3.default)((0, _objectSpread3.default)({}, row), {}, (0, _defineProperty2.default)({}, column.prop, val));\n                });\n                return (0, _objectSpread3.default)((0, _objectSpread3.default)({}, item), {}, {\n                  table: table\n                });\n              });\n            });\n            this.sheet = sheet;\n          } catch (error) {\n            self.$emit('update:exportExcelLoading', false);\n          }\n\n          return this;\n        },\n        cancel: function cancel() {\n          self.$emit('update:exportExcelLoading', false);\n        },\n        export: function _export(sheet) {\n          self.sheet = sheet || this.sheet;\n          self.$refs.excelExport.pikaExportExcel();\n          self.$emit('update:exportExcelLoading', false);\n          return this;\n        }\n      };\n    },\n    // async exportExcel(params) {\n    //   this.$emit('update:exportExcelLoading', true)\n    //   let sheet1\n    //   try {\n    //     const table = await params()\n    //     sheet1 = { sheetName: this.excelName, keys: [], tHeader: [], table }\n    //     this.bColumns.forEach(column => {\n    //       sheet1.keys.push(column.prop)\n    //       sheet1.tHeader.push(column.label)\n    //       sheet1.table = sheet1.table.map(row => {\n    //         const val = this.formatExport(row, column)\n    //         return { ...row, [column.prop]: val }\n    //       })\n    //     })\n    //   } catch (e) {\n    //     console.log('导出错误，错误信息：', e)\n    //     this.$message.error('导出错误')\n    //     this.$emit('update:exportExcelLoading', false)\n    //   }\n    //   const self = this\n    //   const Excel = {\n    //     sheet: [sheet1],\n    //     export(sheet) {\n    //       self.sheet = sheet || this.sheet\n    //       self.$refs.excelExport.pikaExportExcel()\n    //       self.$emit('update:exportExcelLoading', false)\n    //     }\n    //   }\n    //   return Excel\n    // },\n\n    /**\r\n     * @description: 设置表格名字\r\n     */\n    setFname: function setFname() {\n      var date = this.utils.parseTime(new Date());\n      date = date.replace(' ', '_');\n      date = date.replace(':', '_');\n      this.tmpExcelName = this.excelName + date;\n    },\n\n    /**\r\n     * @description: excel导出错误处理\r\n     */\n    onExcelExportError: function onExcelExportError(err) {\n      // this.$message.info('导出失败：' + err)\n      self.$emit('update:exportExcelLoading', false);\n      this.$emit('onExcelExportError', err);\n    },\n    formatExport: function formatExport(row, column) {\n      var formatExport = column.formatExport,\n          format = column.format;\n      return (0, _util.formatText)(formatExport || format, row, column);\n    },\n    formatCont: function formatCont(row, column) {\n      var format = column.format;\n      return (0, _util.formatText)(format, row, column);\n    },\n    rowDblclick: function rowDblclick() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.$emit.apply(this, ['rowDblclick'].concat(args));\n    },\n    rowClick: function rowClick() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this.$emit.apply(this, ['rowClick'].concat(args));\n    },\n    fetchData: function fetchData() {\n      this.$emit('fetchData');\n    },\n\n    /**\r\n     * @description: 当前页变化\r\n     * @param {Number} val 当前页\r\n     */\n    currentChange: function currentChange(current) {\n      this.$emit('update:currentPage', current);\n      this.$emit('currentChange', current);\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 设置分页大小\r\n     * @param {Number} val 页大小\r\n     */\n    sizeChange: function sizeChange(pageSize) {\n      this.$emit('update:currentPage', 1); // 重置当前页\n\n      this.$emit('update:pageSize', pageSize);\n      this.$emit('sizeChange', pageSize);\n      this.fetchData();\n    }\n  }\n};\nexports.default = _default2;",null]}
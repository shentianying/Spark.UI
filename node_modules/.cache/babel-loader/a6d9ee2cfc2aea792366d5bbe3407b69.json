{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\storage\\storageIn\\storageInAttitude.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\storage\\storageIn\\storageInAttitude.vue","mtime":1628836283471},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _storageIn = require(\"@/api/cggl/storageIn\");\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\nvar _flowSelect = _interopRequireDefault(require(\"@/components/Flow/flowSelect\"));\n\nvar _flowDisplay = _interopRequireDefault(require(\"@/components/Flow/flowDisplay\"));\n\nvar _flowAttitude = _interopRequireDefault(require(\"@/components/Flow/flowAttitude\"));\n\nvar _dictionary = require(\"@/api/xtgl/dictionary\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'StorageInAttitude',\n  components: {\n    UpFile: _UpFile.default,\n    FlowSelect: _flowSelect.default,\n    FlowDisplay: _flowDisplay.default,\n    FlowAttitude: _flowAttitude.default\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        id: 0,\n        number: '',\n        orgId: null,\n        fileList: [],\n        contract: {},\n        supplier: {},\n        type: null,\n        person: {},\n        delivery: {}\n      },\n      loading: false,\n      activate: true,\n      orgStr: '',\n      active: 0,\n      dialogTableVisible: false,\n      dialogTitle: '保存',\n      dialogWidth: '70%',\n      comName: 'PlanDetailAdd',\n      currentRow: null,\n      list: [],\n      payModes: [],\n      billFlow: null,\n      isLoad: false,\n      attitudePara: {},\n      loadFlow: false,\n      entryTypeOptions: [],\n      columnShow: {\n        unit2: true,\n        brand: true,\n        model: true,\n        spec: true,\n        thickness: true,\n        texture: true,\n        surfaceTreatment: true,\n        designNumber: true\n      },\n      rules: {}\n    };\n  },\n  watch: {},\n  activated: function activated() {},\n  mounted: function mounted() {\n    this.initData();\n  },\n  methods: {\n    initData: function () {\n      var _initData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 有参数id 就是编辑\n                if (this.$route.query.id) {\n                  this.id = this.$route.query.id;\n                }\n\n                if (!this.id) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this.loading = true;\n                this.activate = false; // 销毁部门组件\n\n                _context.next = 6;\n                return (0, _storageIn.getStorageInById)({\n                  id: this.id,\n                  type: this.$route.params.type\n                }).then(function (response) {\n                  return _this.setData(response);\n                });\n\n              case 6:\n                (0, _dictionary.getDictionarysByTypes)({\n                  types: 'entryType'\n                }).then(function (response) {\n                  var data = response.data;\n                  data.forEach(function (element) {\n                    element.pid = element.pId;\n\n                    _this.entryTypeOptions.push(element);\n                  });\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }(),\n    setData: function setData(response) {\n      var data = response.data,\n          orgStr = response.orgStr,\n          billFlowData = response.billFlowData;\n      this.ruleForm = data;\n      this.ruleForm.fileList = data.upFile;\n      this.orgStr = orgStr;\n\n      if (data.type === 0) {\n        this.isLoad = true;\n        this.billFlow = billFlowData;\n        this.attitudePara = {\n          formId: billFlowData.formId,\n          billFlowId: data.billFlowId,\n          planId: data.id\n        };\n      } // 填充 明细列表\n\n\n      var pom = [];\n      data.storageInDetails.forEach(function (e) {\n        pom.push({\n          material: e.material,\n          deliveryDetail: e.deliveryDetail,\n          planDetailId: e.planDetailId,\n          quantity: e.quantity,\n          quantity2: e.quantity2,\n          taxInclusivePrice: e.taxInclusivePrice,\n          taxRate: e.taxRate,\n          taxExclusivePrice: e.taxExclusivePrice,\n          taxInclusiveAmount: e.taxInclusiveAmount,\n          tax: e.tax,\n          taxExclusiveAmount: e.taxExclusiveAmount,\n          remark: ''\n        });\n      });\n      this.list = pom;\n      this.setColumnShow();\n      this.loading = false; // loading 状态关闭\n\n      this.activate = true; // 加载部门组件\n    },\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    },\n    updateFlow: function updateFlow() {\n      this.closeThePage();\n    },\n    setColumnShow: function setColumnShow() {\n      // 设置列的显示。列中，都没有值，就隐藏\n      var modelunit2 = false;\n      var modelbrand = false;\n      var modelmodel = false;\n      var modelspec = false;\n      var modelthickness = false;\n      var modeltexture = false;\n      var modelsurfaceTreatment = false;\n      var modeldesignNumber = false;\n\n      var _iterator = (0, _createForOfIteratorHelper2.default)(this.list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row = _step.value;\n\n          if (row.material.unit2) {\n            modelunit2 = true;\n          }\n\n          if (row.material.brand) {\n            modelbrand = true;\n          }\n\n          if (row.material.model) {\n            modelmodel = true;\n          }\n\n          if (row.material.spec) {\n            modelspec = true;\n          }\n\n          if (row.material.thickness) {\n            modelthickness = true;\n          }\n\n          if (row.material.texture) {\n            modeltexture = true;\n          }\n\n          if (row.material.surfaceTreatment) {\n            modelsurfaceTreatment = true;\n          }\n\n          if (row.material.designNumber) {\n            modeldesignNumber = true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.columnShow['unit2'] = modelunit2;\n      this.columnShow['brand'] = modelbrand;\n      this.columnShow['model'] = modelmodel;\n      this.columnShow['spec'] = modelspec;\n      this.columnShow['thickness'] = modelthickness;\n      this.columnShow['texture'] = modeltexture;\n      this.columnShow['surfaceTreatment'] = modelsurfaceTreatment;\n      this.columnShow['designNumber'] = modeldesignNumber;\n    },\n    // openContract(id) {\n    //   this.$router.push({ name: 'ContractAttitude', query: { id: id, refreshRouterName: this.$route.name }, params: { id: id }})\n    // },\n    openSupplier: function openSupplier(id) {\n      this.$router.push({\n        name: 'SupplierDetail',\n        query: {\n          id: id,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: id\n        }\n      });\n    },\n    // cellStyle({ row, column, rowIndex, columnIndex }) {\n    //   if (column.label === '含税单价' || column.label === '税率' || column.label === '不含税单价' ||\n    //     column.label === '含税金额' || column.label === '税额' || column.label === '不含税金额') {\n    //     row.taxInclusivePrice = (Math.round(row.taxInclusivePrice * 100) / 100).toFixed(2)\n    //     row.taxRate = (Math.round(row.taxRate * 100) / 100).toFixed(2)\n    //     row.taxExclusivePrice = (Math.round(row.taxExclusivePrice * 100) / 100).toFixed(2)\n    //     row.taxInclusiveAmount = (Math.round(row.taxInclusiveAmount * 100) / 100).toFixed(2)\n    //     row.tax = (Math.round(row.tax * 100) / 100).toFixed(2)\n    //     row.taxExclusiveAmount = (Math.round(row.taxExclusiveAmount * 100) / 100).toFixed(2)\n    //     return 'text-align: right;padding: 0px;line-height: 4px;'\n    //   } else {\n    //     return 'text-align: center;padding: 0px;line-height: 4px;'\n    //   }\n    // },\n    getTypeName: function getTypeName(type) {\n      if (type !== null) {\n        var entryType = this.entryTypeOptions.find(function (f) {\n          return f.value === type;\n        });\n\n        if (entryType !== undefined) {\n          return entryType.name;\n        } else {\n          return '';\n        }\n      } else {\n        return '';\n      }\n    }\n  }\n};\nexports.default = _default;",null]}
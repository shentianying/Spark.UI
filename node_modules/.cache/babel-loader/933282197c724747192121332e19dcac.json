{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\MyForm\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\MyForm\\index.vue","mtime":1635749455599},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _JSXCompiler = _interopRequireDefault(require(\"./JSXCompiler\"));\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import MyInput from '@/components/SearchBar/MyInput'\nvar components = {};\n\nvar context = require.context('@/components/SearchBar/form/', // 组件所在目录的相对路径\nfalse, // 是否查询其子目录\n/[A-Z]\\w+\\.(vue|js)$/ // 匹配基础组件文件名的正则表达式\n);\n\ncontext.keys().forEach(function (fileName) {\n  // 获取文件名\n  var fname = fileName.split('/').pop().replace(/\\.\\w+$/, ''); // 获取组件配置\n\n  var componentConfig = context(fileName); // 若该组件是通过\"export default\"导出的，优先使用\".default\"，否则退回到使用模块的根\n\n  components[fname] = componentConfig.default || componentConfig;\n});\nvar _default2 = {\n  name: 'MyForm',\n  components: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, components), {}, {\n    JSXCompiler: _JSXCompiler.default,\n    UpFile: _UpFile.default\n  }),\n  props: {\n    type: {\n      // 类型,可选值: Edit:表单,details: 详情\n      type: String,\n      default: 'Edit'\n    },\n    labelWidth: {\n      type: String,\n      default: '120px'\n    },\n    inputWidth: {\n      type: String,\n      default: '272px'\n    },\n    rules: {\n      // 表单校验规则\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    formData: {\n      // 表单数据\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    formNode: {\n      // 表单结构\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    size: {\n      // 表单组件的尺寸\n      type: String,\n      default: 'mini'\n    }\n  },\n  computed: {\n    /**\r\n     * 计算表单结构\r\n     */\n    formList: function formList() {\n      var formNode = this.formNode;\n      var myList = [];\n\n      var _iterator = (0, _createForOfIteratorHelper2.default)(formNode),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          // 增加对 if的支持,如果if为false就直接不显示\n          // 这里必须这么写,不能写!value.if 这样的,因为这样的话 不传也会不渲染,我们需要默认渲染\n          if (value.if === false) continue;\n          var length = myList.length;\n          var me = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, value), {}, {\n            component: value.component || 'elInput'\n          });\n\n          if (length > 0 && myList[length - 1].length < 2 && !myList[length - 1][0].monopolize && !value.monopolize) {\n            // 往上一行添加一个\n            myList[length - 1].push(me);\n          } else {\n            myList.push([me]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return myList;\n    }\n  },\n  methods: {\n    /**\r\n     * 处理子组件的change事件(如果有的话)\r\n     * @param {*} data 子组件事件传出来的数据\r\n     * @param {String} key 此项的key,可以作为触发的标识\r\n     */\n    handelChange: function handelChange(data, key) {\n      this.$emit(\"\".concat(key, \"Change\"), data);\n    },\n\n    /**\r\n     * 处理子组件的select事件(如果有的话)\r\n     * @param {*} data 子组件事件传出来的数据\r\n     * @param {String} key 此项的key,可以作为触发的标识\r\n     */\n    handelSelect: function handelSelect(data, key) {\n      this.$emit(\"\".concat(key, \"Select\"), data);\n    },\n\n    /**\r\n     * el-form validate的封装\r\n     * 提前判断是否校验通过,这样就不用在外面每次都写一遍if了\r\n     * 为了更方便的兼容以前的代码还是会把表单校验状态传出去,但已不建议使用\r\n     */\n    validate: function validate(cb) {\n      this.$refs['myForm'].validate(function (valid, obj) {\n        if (valid) cb(valid, obj);\n      });\n    },\n    resetFields: function resetFields() {\n      this.$refs['myForm'].resetFields();\n    },\n    clearValidate: function clearValidate() {\n      var _this$$refs$myForm;\n\n      (_this$$refs$myForm = this.$refs['myForm']).clearValidate.apply(_this$$refs$myForm, arguments);\n    }\n  }\n};\nexports.default = _default2;",null]}
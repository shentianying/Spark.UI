{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\gckgl\\gathering\\projectGatheringSplit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\gckgl\\gathering\\projectGatheringSplit.vue","mtime":1635749455694},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _projectGathering = require(\"@/api/xmgl/projectGathering\");\n\nvar _validate = require(\"@/utils/validate\");\n\nvar _selectProject = _interopRequireDefault(require(\"@/components/Other/xmgl/selectProject\"));\n\nvar _index = _interopRequireDefault(require(\"@/components/OrgSelect/index2\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ProjectGatheringSplit',\n  components: {\n    SelectProject: _selectProject.default,\n    OrgSelect2: _index.default\n  },\n  data: function data() {\n    return {\n      size: 'mini',\n      ruleForm: {\n        id: 0,\n        number: '',\n        orgId: null,\n        companyId: this.$store.state.user.selectOrgId,\n        projectId: null,\n        gatheringDate: new Date(),\n        personId: this.$store.state.user.uid,\n        gatheringAmount: '',\n        remark: '',\n        state: 0,\n        splitOrgId: null,\n        splitCompanyProjectId: null,\n        splitCompanyAmount: '',\n        splitProjectAmount: '',\n        groupManageFee: '',\n        bank: ''\n      },\n      orgName: '',\n      gatheringType: '',\n      capitalType: '',\n      projectGatheringId: null,\n      projectName: '',\n      orgList: [],\n      keyOrg: 0,\n      acceptances: [],\n      isChengDui: false,\n      loading: false,\n      rules: {\n        splitCompanyProjectId: [{\n          required: true,\n          message: '请选择项目',\n          trigger: 'change'\n        }],\n        splitOrgId: [{\n          required: true,\n          message: '请总公司地区',\n          trigger: 'change'\n        }],\n        splitCompanyAmount: [{\n          required: true,\n          message: '请输入金额',\n          trigger: 'change'\n        }, {\n          validator: _validate.validate.money,\n          message: '金额格式不正确'\n        }],\n        splitProjectAmount: [{\n          required: true,\n          message: '请输入金额',\n          trigger: 'change'\n        }, {\n          validator: _validate.validate.money,\n          message: '金额格式不正确'\n        }],\n        groupManageFee: [{\n          validator: _validate.validate.money,\n          message: '金额格式不正确',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  watch: {\n    'ruleForm.splitCompanyAmount': {\n      handler: function handler(value, oldvalue) {\n        if (value !== oldvalue) {\n          this.ruleForm.groupManageFee = this.ruleForm.gatheringAmount - this.ruleForm.splitCompanyAmount - this.ruleForm.splitProjectAmount;\n        }\n      },\n      deep: true\n    },\n    'ruleForm.splitProjectAmount': {\n      handler: function handler(value, oldvalue) {\n        if (value !== oldvalue) {\n          this.ruleForm.groupManageFee = this.ruleForm.gatheringAmount - this.ruleForm.splitCompanyAmount - this.ruleForm.splitProjectAmount;\n        }\n      },\n      deep: true\n    }\n  },\n  activated: function activated() {\n    if (this.$route.params.id) {\n      this.initData();\n      this.refreshRouterName = this.$route.params.refreshRouterName;\n    }\n  },\n  mounted: function mounted() {\n    if (!this.$route.params.id) {\n      this.initData();\n      this.refreshRouterName = this.$route.params.refreshRouterName;\n    }\n  },\n  methods: {\n    submitForm: function submitForm(formName, state) {\n      var _this = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var newObj = JSON.parse(JSON.stringify(_this.ruleForm));\n          newObj.State = 10000;\n          _this.loading = true;\n\n          if (state === 1) {\n            var AcceptanceList = [];\n\n            if (newObj.capitalType === 2 || newObj.capitalType === 3) {\n              var _iterator = (0, _createForOfIteratorHelper2.default)(_this.acceptances),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var item = _step.value;\n\n                  if (!item.ticketDate) {\n                    _this.$message.error('请填写开票日期');\n\n                    return false;\n                  }\n\n                  if (!item.expiration) {\n                    _this.$message.error('请填写到期日期');\n\n                    return false;\n                  }\n\n                  if (new Date(item.ticketDate) > new Date(item.expiration)) {\n                    _this.$message.error('开票日期不能晚于到期日期');\n\n                    return false;\n                  }\n\n                  if (!_validate.validateData.money(item.amount).isSuccess) {\n                    _this.$message.error('金额格式不正确');\n\n                    return false;\n                  }\n\n                  if (!item.drawer) {\n                    _this.$message.error('请填写出票人');\n\n                    return false;\n                  }\n\n                  if (!item.payer) {\n                    _this.$message.error('请填写付款人');\n\n                    return false;\n                  }\n\n                  if (!item.payee) {\n                    _this.$message.error('请填写收款人');\n\n                    return false;\n                  }\n\n                  var tmp = (0, _objectSpread2.default)({}, item);\n                  delete tmp.isEdit;\n                  delete tmp.backups;\n                  AcceptanceList.push(tmp);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            var data = {\n              projectGathering: newObj,\n              acceptanceList: AcceptanceList\n            };\n            (0, _projectGathering.splitProjectGathering)(data).then(function (response) {\n              if (response.errorMsg) {\n                // 验证错误\n                _this.$alert(\"\".concat(response.errorMsg.replace(/；/g, '；<br />')), {\n                  dangerouslyUseHTMLString: true\n                });\n\n                return;\n              }\n\n              _this.$message(response.message);\n\n              _this.loading = false;\n\n              _this.closeThePage();\n            }).catch(function () {\n              _this.loading = false;\n            });\n          } else if (state === 0) {\n            (0, _projectGathering.handInputProjectGathering)(newObj).then(function (response) {\n              if (response.errorMsg) {\n                // 验证错误\n                _this.$alert(\"\".concat(response.errorMsg.replace(/；/g, '；<br />')), {\n                  dangerouslyUseHTMLString: true\n                });\n\n                return;\n              }\n\n              _this.$message(response.message);\n\n              _this.loading = false;\n\n              _this.closeThePage();\n            }).catch(function () {\n              _this.loading = false;\n            });\n          }\n        }\n      });\n    },\n    initData: function initData() {\n      var _this2 = this;\n\n      this.projectGatheringId = this.$route.query.id;\n\n      if (this.projectGatheringId) {\n        (0, _projectGathering.getProjectGatheringWithSplitById)({\n          id: this.projectGatheringId\n        }).then(function (response) {\n          var data = response.data,\n              acceptances = response.acceptances,\n              orgList = response.orgList,\n              orgName = response.orgName,\n              splitCompanyProject = response.splitCompanyProject,\n              gatheringType = response.gatheringType,\n              capitalType = response.capitalType;\n          _this2.orgList = orgList;\n          _this2.ruleForm = data;\n          _this2.orgName = orgName;\n\n          if (data.capitalType === 2 || data.capitalType === 3) {\n            _this2.isChengDui = true;\n          }\n\n          _this2.keyOrg += 1;\n          _this2.capitalType = capitalType.name;\n          _this2.gatheringType = gatheringType.name;\n          _this2.projectName = splitCompanyProject;\n          _this2.acceptances = acceptances;\n\n          if (Array.isArray(_this2.acceptances)) {\n            _this2.acceptances.forEach(function (ele) {\n              _this2.$set(ele, 'isEdit', false);\n\n              _this2.$set(ele, 'backups', JSON.stringify(ele));\n            });\n          }\n        });\n      }\n    },\n    handleEdit: function handleEdit(row) {\n      this.$set(row, 'isEdit', true);\n    },\n    handleSubmitEdit: function handleSubmitEdit(row) {\n      this.$set(row, 'isEdit', false);\n    },\n\n    /**\r\n     * @description: 列表行内编辑取消修改\r\n     * @param {*} row\r\n     * @return {*}\r\n     */\n    handleCancelEdit: function handleCancelEdit(row) {\n      Object.assign(row, JSON.parse(row.backups));\n    },\n    addRow: function addRow() {\n      var row = {\n        isEdit: false,\n        isAdd: true\n      };\n      this.$set(row, 'backups', JSON.stringify(row));\n      row.isEdit = true;\n      this.acceptances.push(row);\n    },\n    deleteRow: function deleteRow(index, rows) {\n      rows.splice(index, 1);\n    },\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    },\n    selectProject: function selectProject() {\n      this.$refs.projectRef.openDialog();\n    },\n    getProject: function getProject(data) {\n      if (data.length > 0) {\n        this.ruleForm.splitCompanyProjectId = data[0].id;\n        this.projectName = data[0].name;\n        this.ruleForm.splitOrgId = data[0].orgId;\n        this.keyOrg += 1;\n      }\n    }\n  }\n};\nexports.default = _default;",null]}
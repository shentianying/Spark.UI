{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Projects\\spark\\Spark.UI\\src\\utils\\request.js","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\utils\\request.js","mtime":1629874990605},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _router = _interopRequireDefault(require(\"@/router\"));\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 600000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  if (_store.default.getters.token) {\n    config.headers.Authorization = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  var res = response.data; // 判断是不是返回的流数据\n\n  if (response.headers['content-type'] === 'application/octet-stream') {\n    return res;\n  } // if the custom code is not 200, it is judged as an error.\n\n\n  if (res.code !== 200) {\n    // 页面没有权限跳转处理\n    if (res.code === 404) {\n      _router.default.replace({\n        path: '/404'\n      });\n\n      return false;\n    } // jwt 过期\n\n\n    if (res.code === 401) {\n      (0, _elementUi.Message)({\n        message: res.message,\n        type: 'error',\n        duration: 5 * 1000\n      });\n\n      _router.default.replace({\n        path: '/login'\n      });\n    } // if (response.request.responseType === 'blob') {\n    //   var reader = new FileReader()\n    //   reader.readAsText(res, 'utf-8')\n    //   reader.onload = function() {\n    //     var jsonRes = JSON.parse(reader.result)\n    //     Message({\n    //       message: jsonRes.message || 'Error',\n    //       type: 'error',\n    //       duration: 5 * 1000\n    //     })\n    //   }\n    // } else {\n\n\n    (0, _elementUi.Message)({\n      message: res.message || res.errorMsg,\n      type: 'error',\n      duration: 5 * 1000\n    }); // }\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n\n    if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n      // to re-login\n      _elementUi.MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n        confirmButtonText: 'Re-Login',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        _store.default.dispatch('user/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  // console.log('err' + error) // for debug\n  (0, _elementUi.Message)({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\task\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\task\\index.vue","mtime":1635216068755},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nvar _task = require(\"@/api/cggl/task\");\n\nvar _index = _interopRequireDefault(require(\"@/components/OrgSelect/index2\"));\n\nvar _person = require(\"@/api/rsgl/person\");\n\nvar _searchForm = _interopRequireDefault(require(\"@/components/Other/searchForm\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import PlanFrame from './PlanFrame'\nvar _default = {\n  name: 'Task',\n  components: {\n    // PlanFrame\n    OrgSelect2: _index.default,\n    SearchForm: _searchForm.default\n  },\n  data: function data() {\n    return {\n      list: null,\n      listLoading: false,\n      dialogTableVisible: false,\n      dialogTitle: '保存',\n      comName: 'TargetCostEdit',\n      total: 0,\n      currentPage: 1,\n      pageSize: this.utils.getPersonalSettings().pageSize,\n      planStateList: null,\n      planTypeList: null,\n      currentRow: null,\n      search: {\n        number: '',\n        orgIds: [],\n        states: [],\n        buyerIds: null,\n        // createStartDate: null,\n        // createEndDate: null,\n        createRange: [],\n        categoryName: ''\n      },\n      rules: {},\n      formState: [],\n      personList: [],\n      loading: false\n    };\n  },\n  computed: {\n    getOrgList: function getOrgList() {\n      return this.$store.state.user.info.orgList;\n    }\n  },\n  activated: function activated() {\n    if (this.$route.params.refresh) {\n      this.fetchData();\n    }\n  },\n  mounted: function mounted() {\n    this.formState = [{\n      value: 0,\n      name: '待确认'\n    }, {\n      value: -1,\n      name: '拒收'\n    }, {\n      value: 10000,\n      name: '已确认'\n    }];\n    this.fetchData();\n  },\n  methods: {\n    searchData: function searchData(currentPage) {\n      this.currentPage = currentPage;\n      this.fetchData();\n    },\n    fetchData: function fetchData() {\n      var _this = this;\n\n      this.listLoading = true;\n      var postData = {};\n      postData.currentPage = this.currentPage;\n      postData.pageSize = this.pageSize;\n      postData.number = this.search.number;\n      postData.orgIds = this.search.orgIds;\n      postData.states = this.search.states;\n      postData.buyerIds = this.search.buyerIds; // postData.createStartDate = this.search.createStartDate\n      // postData.createEndDate = this.search.createEndDate\n\n      postData.createRange = this.search.createRange;\n      postData.categoryName = this.search.categoryName; // postData.companyId = this.$store.state.user.selectOrgId\n\n      (0, _task.getCGTaskPaging)(postData).then(function (response) {\n        var data = response.data,\n            count = response.count;\n        _this.list = data;\n        _this.total = count;\n        _this.listLoading = false;\n      });\n    },\n    dialogClose: function dialogClose() {\n      this.dialogTableVisible = false;\n      this.fetchData();\n    },\n    // handleAdd(row) {\n    //   this.$router.push({ name: 'TargetCostEdit', query: { refreshRouterName: this.$route.name }})\n    // },\n    taskDetail: function taskDetail(row) {\n      var isCheck = false;\n\n      if (row.state === 10000) {\n        isCheck = true;\n      }\n\n      this.$router.push({\n        name: 'TaskDetail',\n        query: {\n          id: row.id,\n          refreshRouterName: this.$route.name,\n          tab: 'detail'\n        },\n        params: {\n          id: row.id,\n          isCheck: isCheck\n        }\n      });\n    },\n    priceListEdit: function priceListEdit(row) {\n      // console.log('this.$route.name:', this.$route.name)\n      this.$router.push({\n        name: 'QuotationAdd',\n        query: {\n          id: row.id,\n          refreshRouterName: this.$route.name,\n          tab: 'edit'\n        },\n        params: {\n          id: row.id\n        }\n      });\n    },\n    sizeChange: function sizeChange(val) {\n      this.pageSize = val;\n      this.fetchData();\n    },\n    getRemotePerson: function getRemotePerson(query) {\n      var _this2 = this;\n\n      query = query.trim();\n\n      if (query !== '') {\n        this.loading = true;\n        setTimeout(function () {\n          (0, _person.getPersonList)().then(function (response) {\n            _this2.personList = response.data;\n            _this2.loading = false;\n          });\n        }, 200);\n      } else {\n        this.personList = [];\n      }\n    }\n  }\n};\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\OrgSelect\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\OrgSelect\\index.vue","mtime":1633937905701},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _organization = require(\"@/api/xtgl/organization\");\n\nvar _vueTreeselect = _interopRequireDefault(require(\"@riophae/vue-treeselect\"));\n\nvar _index = require(\"@/utils/index\");\n\nrequire(\"@riophae/vue-treeselect/dist/vue-treeselect.css\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'TreeselectComponent',\n  components: {\n    Treeselect: _vueTreeselect.default\n  },\n  model: {\n    prop: 'selectValue',\n    // 指向props的参数名\n    event: 'change' // 事件名称\n\n  },\n  props: {\n    // 插件官网： https://www.vue-treeselect.cn/\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    maxHeight: {\n      type: Number,\n      default: 200\n    },\n    flat: {\n      type: Boolean,\n      default: false\n    },\n    valueConsistsOf: {\n      type: String,\n      default: 'BRANCH_PRIORITY'\n    },\n    // 1.BRANCH_PRIORITY 默认分支节点 2.LEAF_PRIORITY 值是 叶子节点 数组 3.All 所有节点 4.ALL_WITH_INDETERMINATE\n    selectValue: {\n      type: [String, Number, Array],\n      default: null\n    },\n    // 获取你选中的值，传出去的v-model的值\n    treeData: {\n      type: Array,\n      default: null\n    },\n    // 传进来的初始化数据\n    selectData: {\n      type: [String, Number, Array],\n      default: null\n    },\n    // 初始化选中的数据\n    selectStyle: {\n      type: String,\n      default: 'width:100%'\n    },\n    // 选择css样式\n    showRootNode: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示根节点\n    dataMode: {\n      type: Number,\n      default: 0\n    } // treeData传进来的数据就无效 0：全部显示，1：根据自己的权限显示\n\n  },\n  data: function data() {\n    return {\n      modelValue: null,\n      list: [],\n      listTemp: [],\n      //  临时变量\n      allOrgList: [],\n      rootNode: [{\n        id: 0,\n        pid: 0,\n        label: '根节点'\n      }] // 根节点\n\n    };\n  },\n  watch: {\n    modelValue: function modelValue(value) {\n      this.$emit('change', value);\n    }\n  },\n  mounted: function mounted() {\n    // console.log('树形数据1 treeData:', this.treeData)\n    // console.log('下拉组件 selectData:', this.selectData)\n    if (this.selectData) {\n      // console.log('下拉组件 selectData:', this.selectData)\n      this.modelValue = this.selectData;\n    }\n\n    if (this.treeData) {\n      this.list = (0, _index.getTree)(0, this.treeData);\n      console.log('this.list:', this.list);\n      this.addRootNode();\n    } else {\n      this.fetchData();\n    }\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n\n      (0, _organization.getOrganizationList)().then(function (response) {\n        var data = response.data;\n        _this.allOrgList = data;\n        data.forEach(function (ele) {\n          ele.label = ele.name;\n        });\n\n        if (_this.dataMode === 0) {\n          // *******************0**********************\n          // 绑定全部的组织机构数据\n          _this.list = (0, _index.getTree)(0, data).filter(function (f) {\n            return f.id === _this.$store.state.user.selectOrgId;\n          });\n        } else if (_this.dataMode === 1) {\n          // *******************1**********************\n          // 根据自己的权限来显示数据\n          var userOrgList = _this.$store.state.user.info.userOrgList;\n          var selectOrgId = _this.$store.state.user.selectOrgId;\n          var orgIds = userOrgList.filter(function (f) {\n            return f.companyId === selectOrgId;\n          }).map(function (m) {\n            return m.organizationId;\n          }); // console.log('orgIds:', orgIds)\n\n          var arr1 = [];\n          orgIds.forEach(function (orgId) {\n            var temp2 = (0, _index.getTree)(orgId, data); // 根据orgid 获取组织机构树形\n            // console.log('temp2:', temp2)\n            // 有叶子节点,说明当前节点是父级\n\n            if (temp2.length) {\n              var leafNodes = _this.getChildrenNodes({\n                children: temp2\n              }, []); // 添加 子节点\n\n\n              arr1 = [].concat((0, _toConsumableArray2.default)(arr1), (0, _toConsumableArray2.default)(_this.allOrgList.filter(function (f) {\n                return leafNodes.includes(f.id);\n              })));\n            } // 添加 父节点\n\n\n            arr1.push(_this.allOrgList.find(function (f) {\n              return f.id === orgId;\n            }));\n          }); // console.log('当前arr1:', arr1)\n\n          _this.list = _this.toTree(arr1);\n        }\n\n        _this.addRootNode();\n      });\n    },\n    toTree: function toTree(data) {\n      var result = [];\n\n      if (!Array.isArray(data)) {\n        return result;\n      }\n\n      data.forEach(function (item) {\n        delete item.children;\n      });\n      var map = {};\n      data.forEach(function (item) {\n        map[item.id] = item;\n      });\n      data.forEach(function (item) {\n        var parent = map[item.pid];\n\n        if (parent) {\n          (parent.children || (parent.children = [])).push(item);\n        } else {\n          result.push(item);\n        }\n      });\n      return result;\n    },\n    getChildrenNodes: function getChildrenNodes(data, arr) {\n      var _this2 = this;\n\n      if (data.children) {\n        data.children.forEach(function (element) {\n          arr.push(element.id);\n\n          if (element.children) {\n            _this2.getChildrenNodes(element, arr);\n          }\n        });\n      }\n\n      return arr;\n    },\n    addRootNode: function addRootNode() {\n      // 添加根节点\n      if (this.showRootNode) {\n        // 根节点下面有数据，就添加children\n        // if (this.listTemp.length) { this.rootNode[0].children = this.listTemp }\n        this.rootNode[0].children = this.list; // 没数据，就只显示一个根节点\n\n        this.list = this.rootNode;\n      }\n    }\n  }\n};\nexports.default = _default;",null]}
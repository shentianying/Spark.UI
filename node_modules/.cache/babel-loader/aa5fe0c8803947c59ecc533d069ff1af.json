{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowAttitude.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowAttitude.vue","mtime":1635749455595},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _billFlow = require(\"@/api/xtgl/billFlow\");\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 查看流程进度\nvar _default = {\n  name: 'FlowAttitude',\n  components: {\n    UpFile: _UpFile.default\n  },\n  props: {\n    para: {\n      type: Object,\n      default: null\n    },\n    show: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示表单和撤销\n    toVoid: {\n      type: Boolean,\n      default: true\n    },\n    //  是否显示作废，默认显示\n    toBack: {\n      type: Boolean,\n      default: true\n    },\n    //  是否显示退回到制单，默认显示\n    toBeforeState: {\n      type: Boolean,\n      default: true\n    },\n    // 是否允许退到当前state状态之前（不包括制单）默认可以, false 的话，退回到制单状态也默认不显示\n    toContent: {\n      type: Boolean,\n      default: true\n    },\n    // 显示审批内容文本框\n    showStay: {\n      type: Boolean,\n      default: true\n    } // 是否显示\"只填写意见不转下一步\"选项\n\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        id: 0,\n        formId: 0,\n        billId: 0,\n        title: '',\n        content: '',\n        fileList: [],\n        attitudeType: 1,\n        backGroup: null,\n        // 0 制单\n        type: 1 // 操作类型\n\n      },\n      loading: false,\n      list: null,\n      billFlowNodeList: null,\n      activeName: ['1'],\n      upFiles: [],\n      comName: 'UpFile',\n      fileList: [],\n      showBack: true,\n      //  是否显示退回\n      attitudeTypeList: [],\n      // 列表\n      showRevoke: false,\n      // 显示撤销\n      showForm: false,\n      // 显示提交审批表单\n      showAll: true,\n      // 显示所有\n      rules: {\n        content: [{\n          required: true,\n          message: '请输入',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  watch: {\n    para: function para() {\n      this.fetchData();\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    // 显示表单\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n\n      //  如果可退回到制单，backGroup初始值为0，默认 显示制单\n      if (this.toBack) {\n        this.ruleForm.backGroup = 0;\n      }\n\n      var _this$para = this.para,\n          planId = _this$para.planId,\n          billFlowId = _this$para.billFlowId,\n          formId = _this$para.formId;\n      var postData = {\n        billId: planId,\n        billFlowId: billFlowId,\n        formId: formId,\n        toBeforeState: this.toBeforeState\n      };\n      (0, _billFlow.initAttitude)(postData).then(function (response) {\n        var data = response.data,\n            beforeBillFlowNodeList = response.beforeBillFlowNodeList,\n            checkState = response.checkState,\n            isRevoke = response.isRevoke,\n            attitudeTypeList = response.attitudeTypeList;\n        _this.list = data;\n        _this.billFlowNodeList = beforeBillFlowNodeList;\n        _this.attitudeTypeList = attitudeTypeList;\n\n        if (_this.show) {\n          // 跟下面一样的道理,这里也应该这样写,如果担心不是boolean型的话可以用Boolean()强转一次,不过暂时看着似乎没必要\n          _this.showRevoke = isRevoke.item1; // true：可以撤回\n          // true：可以审批\n          // 需要这样写,一个是这样简洁,第二个是,如果是false的时候需要重新赋值false,否则第二次进入缓存的页面时填报栏的状态还是上次的模样,导致作废的单子也会出现填报界面\n\n          _this.showForm = checkState.item1;\n        }\n\n        if ((_this.list || []).length === 0 && !_this.show) {\n          _this.showAll = false;\n        }\n\n        if (_this.billFlowNodeList === null && _this.toBack === false) {\n          _this.showBack = false;\n        }\n      });\n    },\n    submitForm: function submitForm() {\n      var _this2 = this;\n\n      if (this.checkValidate()) {\n        var postData = this.getPostData();\n        this.$confirm('是否确定', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(function () {\n          _this2.add(postData);\n        }).catch(function () {\n          _this2.loading = false;\n        });\n      }\n    },\n    checkValidate: function checkValidate() {\n      var flag = false;\n      this.$refs['ruleForm'].validate(function (valid) {\n        if (valid) {\n          flag = true;\n        }\n      });\n      return flag;\n    },\n    // 获取请求参数\n    getPostData: function getPostData() {\n      var _this3 = this;\n\n      var newObj = JSON.parse(JSON.stringify(this.ruleForm));\n      newObj.billId = this.para.planId;\n      newObj.formId = this.para.formId; // 退回 的审批动作 字符串 由前端拼接，其他的审批动作，由后端根据attitudeType 后端拼接。\n\n      if (this.ruleForm.attitudeType === 3) {\n        newObj.operation = this.attitudeTypeList.find(function (f) {\n          return f.value === _this3.ruleForm.attitudeType;\n        }).name;\n\n        if (this.ruleForm.backGroup === 0) {\n          newObj.operation += '制单';\n        } else {\n          newObj.operation += this.billFlowNodeList.find(function (f) {\n            return f.value === _this3.ruleForm.backGroup;\n          }).name;\n        }\n      }\n\n      if (!newObj.backGroup) {\n        newObj.backGroup = 0;\n      }\n\n      return newObj;\n    },\n    add: function add(newObj) {\n      var _this4 = this;\n\n      this.loading = true;\n      (0, _billFlow.addAttitude)(newObj).then(function (response) {\n        var attitudeList = response.attitudeList,\n            message = response.message,\n            billFlowState = response.billFlowState; // 如果只填写意见不转下一步 需要更新流程\n\n        if (_this4.attitudeType !== 2) {\n          _this4.list = attitudeList;\n        }\n\n        _this4.ruleForm.content = '';\n\n        _this4.$message(message);\n\n        _this4.$emit('update', billFlowState); // 更新流程\n\n\n        _this4.loading = false;\n      }).catch(function () {\n        _this4.loading = false;\n      });\n    },\n    revoke: function revoke() {\n      var postData = {};\n      postData.billId = this.para.planId;\n      postData.formId = this.para.formId;\n      postData.title = '撤回人';\n      postData.content = '撤回单据';\n      postData.operation = '撤回';\n      postData.attitudeType = -2;\n      this.add(postData);\n    },\n    replaceAll: function replaceAll(str) {\n      return str.replace(/\\n/g, '<br>');\n    },\n    radioChange: function radioChange() {\n      this.ruleForm.content = '';\n    }\n  }\n};\nexports.default = _default;",null]}
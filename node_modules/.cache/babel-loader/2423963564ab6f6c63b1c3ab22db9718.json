{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\message.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\message.vue","mtime":1635216068846},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _message = require(\"@/api/xtgl/message\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'Message',\n  components: {},\n  data: function data() {\n    return {\n      list: null,\n      listLoading: true,\n      dialogTableVisible: false,\n      dialogTitle: '保存',\n      total: 0,\n      currentPage: 1,\n      pageSize: this.utils.getPersonalSettings().pageSize,\n      searchStr: '',\n      type: null,\n      isRead: null\n    };\n  },\n  mounted: function mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n\n      this.listLoading = true;\n      var postData = {};\n      postData.currentPage = this.currentPage;\n      postData.pageSize = this.pageSize;\n      postData.title = this.searchStr;\n      postData.type = this.type;\n      postData.isRead = this.isRead;\n      (0, _message.getRemindPaging)(postData).then(function (response) {\n        var data = response.data,\n            count = response.count,\n            noReadCount = response.noReadCount;\n        _this.list = data;\n        _this.total = count;\n        _this.listLoading = false;\n\n        _this.$store.commit('user/SET_NOREADCOUNT', noReadCount);\n      }).catch(function () {\n        _this.listLoading = false;\n      });\n    },\n    sizeChange: function sizeChange(val) {\n      this.pageSize = val;\n      this.fetchData();\n    },\n    setBeRead: function setBeRead(id) {\n      var _this2 = this;\n\n      this.buttonLoading = true;\n      var postData = {\n        msgId: id\n      };\n      (0, _message.putIsRead)(postData).then(function (response) {\n        var message = response.message;\n\n        _this2.$message(message);\n\n        _this2.buttonLoading = false;\n\n        _this2.fetchData();\n      }).catch(function () {\n        _this2.buttonLoading = false;\n      });\n    },\n    radioChang: function radioChang(value) {\n      this.isRead = value;\n      this.fetchData();\n    },\n    goDeal: function goDeal(row) {\n      if (!row.pageId) return;\n\n      var _this$getRoute = this.getRoute(row),\n          routerName = _this$getRoute.routerName;\n\n      this.$router.replace({\n        name: routerName,\n        query: {\n          id: row.billId,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: row.billId,\n          type: 1\n        }\n      });\n    },\n    getRoute: function getRoute(row) {\n      // 获取菜单列表\n      var getIsMenu = _store.default.getters.menus;\n      return getIsMenu.find(function (f) {\n        return f.id === row.pageId;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
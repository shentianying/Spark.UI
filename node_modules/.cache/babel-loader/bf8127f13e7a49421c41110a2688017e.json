{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\TableExColumn.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\TableExColumn.vue","mtime":1631525282202},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"./util\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n  * @column\r\n               {\r\n                  label: '部门', // 表头\r\n                  prop: 'number', // 渲染的属性\r\n                  // 输出前对数据进行转换处理。支持字符串或者函数\r\n\r\n                  formatPopper(val, format, row, column)  提示的格式化方式默认使用format。\r\n                  formatExport(val, format, row, column)  表格导出使用的格式化方式默认使用format。\r\n                  format(val,format, row, column)         自定义转换函数。处理好的数据直接return（接受字符串或者自定义函数）\r\n\r\n                  format:'date',  金额万分位:money;  日期:date  目前只接受两种\r\n\r\n                  class: 'link', // 自定义类名\r\n                  popoverType: 'createUserName', // 制单人:createUserName; 不设置时只有文本被折叠时展示(popover内容是所有内容包括被折叠部分)\r\n                  lineClamp: 1, // 超出多少行隐藏,默认1行隐藏               这里决定多少行被折叠\r\n                  click(row) {}, //  单击事件。当前行作为参数，处理好的数据直接return\r\n\r\n                  // 下面是el-table-column参数，具体请查看element文档\r\n                  align: 'center', // 对齐方式\r\n                  width: '130', // 宽度\r\n                  minWidth: '10' // 最小宽度\r\n                }\r\n  */\nvar _default2 = {\n  props: {\n    popperClass: {\n      type: String,\n      default: 'popper-cont'\n    },\n    column: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  watch: {\n    'scope.row': function scopeRow(val) {}\n  },\n  methods: {\n    click: function click(row) {\n      var ck = this.column.click;\n\n      if (typeof ck === 'function') {\n        ck(row, this.column);\n      }\n    },\n    isCustom: function isCustom(column) {\n      return typeof column.formatPopper === 'function';\n    },\n    formatPopper: function formatPopper(row, column) {\n      var cb = column.formatPopper;\n\n      if (typeof cb === 'function') {\n        var format = column.format,\n            prop = column.prop;\n        var val = (0, _util.getValueByPath)(row, prop);\n        return cb(val, format, row, column);\n      } else {\n        return this.formatCont(row, column);\n      }\n    },\n    formatCont: function formatCont(row, column) {\n      var format = column.format,\n          prop = column.prop;\n      var val = (0, _util.getValueByPath)(row, prop);\n      return (0, _util.formatText)(val, format, row, column);\n    },\n    getValueByPath: function getValueByPath() {\n      return _util.getValueByPath.apply(void 0, arguments);\n    },\n    formatText: function formatText() {\n      return _util.formatText.apply(void 0, arguments);\n    }\n  }\n};\nexports.default = _default2;",null]}
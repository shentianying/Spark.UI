{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\FlowRemake\\flowSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\FlowRemake\\flowSelect.vue","mtime":1631087446325},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _person = require(\"@/api/rsgl/person\");\n\nvar _selectPerson = _interopRequireDefault(require(\"@/components/Other/selectPerson\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 制单选择流程\nvar _default = {\n  name: 'FlowSelect',\n  components: {\n    SelectPerson: _selectPerson.default\n  },\n  props: {\n    billFlow: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      stateList: [],\n      loading: false,\n      orgList: null,\n      open: false,\n      // 是否打开选择用户的 dialog 对话框\n      // tempItem1: [], // 添加人员, 选中的临时对象\n      tempItem2: [],\n      // 添加人员，当前对象\n      temp: [// 添加节点的模板\n      {\n        billFlowId: 0,\n        checkupDate: null,\n        checkupPersonId: null,\n        //   createDate: null,\n        //   createUserId: null,\n        //   createUserName: null,\n        group: 100,\n        id: 0,\n        isAutoChecked: false,\n        isChecked: false,\n        isCurrentState: false,\n        isFixedNode: true,\n        maxDays: 0,\n        mode: 1,\n        nodeType: 1,\n        // 1 新增节点\n        option: 0,\n        orgId: 0,\n        // ?\n        // person: null,\n        personId: null,\n        personList: null,\n        receiveDate: null,\n        remark: null,\n        //   role: null,\n        roleId: 0,\n        roleType: 3,\n        state: 1 //  userList: []\n\n      }]\n    };\n  },\n  computed: {\n    getOrgList: function getOrgList() {\n      return this.$store.state.user.info.orgList;\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    /**\r\n     * 初始化\r\n     */\n    init: function init() {\n      var _this = this;\n\n      var _this$utils$easyDeepC = this.utils.easyDeepClone(this.billFlow),\n          formState = _this$utils$easyDeepC.form.formState,\n          billFlowNode = _this$utils$easyDeepC.billFlowNode;\n\n      var newList = [];\n      formState.sort(function (a, b) {\n        return a.value - b.value;\n      });\n      billFlowNode.forEach(function (fe) {\n        fe.personId = fe.personId || null;\n      });\n      formState.forEach(function (e, i) {\n        if (e.isFlowNode) {\n          if (e.isCheckup) {\n            var gs = _this.groupBy(billFlowNode.filter(function (f) {\n              return f.state === e.value;\n            }), function (item) {\n              return [item.group];\n            });\n\n            e.stateNode = gs;\n          }\n\n          newList.push(e);\n        }\n      });\n      this.stateList = newList;\n    },\n    checkBillFlow: function checkBillFlow() {\n      var isSuccess = true;\n      this.stateList.forEach(function (e) {\n        if (e.isCheckup && e.isFlowNode && e.stateNode.length) {\n          e.stateNode.forEach(function (e1) {\n            e1.forEach(function (g) {\n              if (!g.personId) {\n                isSuccess = false;\n              }\n            });\n          });\n        }\n      });\n      return isSuccess;\n    },\n    getBillFlow: function getBillFlow() {\n      var _this2 = this;\n\n      // 1.验证 流程 中 是否选择\n      // 2.stateList 数据转换城 list 并 返回\n      var billFlow = {};\n      var billFlowNodes = [];\n      this.stateList.forEach(function (e) {\n        if (e.isCheckup && e.isFlowNode && e.stateNode.length) {\n          e.stateNode.forEach(function (e1) {\n            e1.forEach(function (g) {\n              billFlowNodes.push({\n                id: g.id,\n                billFlowId: _this2.billFlow.id,\n                group: g.group,\n                mode: g.mode,\n                roleType: g.roleType,\n                roleId: g.roleId,\n                state: g.state,\n                option: g.option,\n                maxDays: g.maxDays,\n                orgId: g.orgId,\n                personId: g.personId || 0,\n                receiveDate: g.receiveDate,\n                isCurrentState: g.isCurrentState,\n                isChecked: g.isChecked,\n                isAutoChecked: g.isAutoChecked,\n                checkupPersonId: g.checkupPersonId,\n                checkupDate: g.checkupDate,\n                remark: g.remark,\n                nodeType: g.nodeType\n              }); // if (!g.personId) {\n              //   isError = true\n              // }\n            });\n          });\n        }\n      }); // if (isError) {\n      //   this.$alert('请选择流程中的下拉选项')\n      //   return false\n      // } else {\n\n      billFlow.flowId = this.billFlow.flowId;\n      billFlow.formId = this.billFlow.formId;\n      billFlow.billId = this.billFlow.billId;\n      billFlow.billNumber = this.billFlow.billNumber;\n      billFlow.summary = this.billFlow.summary;\n      billFlow.amount = this.billFlow.amount;\n      billFlow.state = this.billFlow.state;\n      billFlow.id = this.billFlow.id;\n      billFlow.companyId = this.billFlow.companyId;\n      billFlow.billFlowNode = billFlowNodes;\n      return billFlow; // }\n    },\n    fetchData: function fetchData() {},\n    groupBy: function groupBy(array, f) {\n      var groups = {};\n      array.forEach(function (o) {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n      });\n      return Object.keys(groups).map(function (group) {\n        return groups[group];\n      });\n    },\n    getRemotePerson: function getRemotePerson(query, item2) {\n      var _this3 = this;\n\n      query = query.trim();\n\n      if (query !== '') {\n        this.loading = true;\n        setTimeout(function () {\n          (0, _person.getPersonList)({\n            name: query\n          }).then(function (response) {\n            item2.personList = response.data;\n            _this3.loading = false;\n          });\n        }, 200);\n      } else {\n        item2.personList = [];\n      }\n    },\n    addNode: function addNode(item, index) {\n      // console.log('item:', item, 'index:', index)\n      // console.log('addNode:', index)\n      // 获取是审核表单状态的 formState\n      var filterFormState = this.stateList.filter(function (f) {\n        return f.inUse && f.isCheckup && f.isFlowNode;\n      });\n      var temp = JSON.parse(JSON.stringify(this.temp)); // 第一个箭头节点,审核节点的左边\n\n      var newGroup = 100;\n\n      if (index === 0) {\n        // 找出第一个元素的group的值\n        if (this.stateList[1].stateNode.length > 0) {\n          newGroup = this.stateList[1].stateNode[0][0].group - 10;\n        }\n\n        temp[0].group = newGroup; // console.log('第一个箭头节点,审核节点的左边newGroup:', newGroup)\n\n        this.stateList[1].stateNode.splice(0, 0, temp);\n      } else if (index < filterFormState.length) {\n        // 点击2个审核节点之间的箭头\n        var preGroups0 = filterFormState[index - 1].stateNode; // 获取前一个状态节点对象\n\n        var smallGroup = preGroups0[preGroups0.length - 1][0].group; // 前一个状态节点的 最后一个 group的值\n\n        var largeGroup = filterFormState[index].stateNode[0][0].group; // 当前节点 第一个group 的值\n\n        var calGroup = (largeGroup + smallGroup) / 2;\n        temp[0].group = calGroup; // console.log('点击2个审核节点之间的箭头calGroup:', calGroup)\n        // this.stateList[index].stateNode.push(temp)\n\n        item.stateNode.push(temp); // console.log('添加后的节点对象：', item.stateNode)\n      } else if (index === filterFormState.length) {\n        // 点击的是最后一个箭头\n        if (item.stateNode.length > 0) {\n          var preGroups1 = filterFormState[index - 1].stateNode; // 获取前一个状态节点对象\n\n          newGroup = preGroups1[preGroups1.length - 1][0].group + 10;\n        }\n\n        temp[0].group = newGroup; // console.log('点击的是最后一个箭头calGroup:', newGroup)\n\n        item.stateNode.push(temp);\n      }\n    },\n    addFlowNode: function addFlowNode(item1) {\n      item1.push({\n        billFlowId: 0,\n        checkupDate: null,\n        checkupPersonId: null,\n        //   createDate: null,\n        //   createUserId: null,\n        //   createUserName: null,\n        group: item1[0].group,\n        id: 0,\n        isAutoChecked: false,\n        isChecked: false,\n        isCurrentState: false,\n        isFixedNode: true,\n        maxDays: 0,\n        mode: 1,\n        nodeType: 1,\n        // 1 新增节点\n        option: 0,\n        orgId: 0,\n        // ?\n        // person: null,\n        personId: null,\n        personList: null,\n        receiveDate: null,\n        remark: null,\n        //   role: null,\n        roleId: 0,\n        roleType: 3,\n        state: 1 //  userList: []\n\n      });\n    },\n    delFlowNode: function delFlowNode(stateNode, index1, item1, index2) {\n      if (item1.length > 1) {\n        item1.splice(index2, 1);\n      } else {\n        stateNode.splice(index1, 1);\n      }\n    },\n    addNode2: function addNode2(item, index1) {\n      // 点击中间箭头的添加节点操作\n      var group1 = item[index1 - 1][0].group; // 小 例如：group:200\n\n      var group2 = item[index1][0].group; // 大 例如：group:210\n\n      var temp = JSON.parse(JSON.stringify(this.temp)); // 设置group\n\n      temp[0].group = group1 + (group2 - group1) / 2; // 中间值：205\n\n      item.splice(index1, 0, temp);\n    },\n    getPersons: function getPersons(personList) {\n      var _this4 = this;\n\n      if ((personList || []).length > 0) {\n        this.tempItem2.personList = personList.map(function (m) {\n          return {\n            id: m.id,\n            name: m.name\n          };\n        });\n        this.$nextTick(function () {\n          _this4.tempItem2.personId = personList[0].id;\n        });\n      }\n    },\n    selectPerson: function selectPerson(item2) {\n      this.tempItem2 = item2;\n      this.$refs.personRef.openDialog();\n    }\n  }\n};\nexports.default = _default;",null]}
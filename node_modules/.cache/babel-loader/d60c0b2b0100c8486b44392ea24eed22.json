{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\conditionAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\conditionAdd.vue","mtime":1624071363336},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _flow = require(\"@/api/xtgl/flow\");\n\nvar _conditionItemAdd = _interopRequireDefault(require(\"./component/conditionItemAdd\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import OrgSelect2 from '@/components/OrgSelect/index2'\nvar _default = {\n  name: 'ConditionAdd',\n  components: {\n    ConditionItemAdd: _conditionItemAdd.default // OrgSelect2\n\n  },\n  props: {\n    dropDownData: {\n      type: Object,\n      default: null\n    },\n    obj: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      list: [{\n        header: {\n          flowId: 0,\n          code: 1,\n          pCode: 0,\n          formFlowFieldId: 0,\n          formFlowField: {\n            field: '',\n            fieldName: '',\n            fieldType: '',\n            dicType: ''\n          },\n          operator: '&&',\n          operatorList: null,\n          dicList: null,\n          isload: true,\n          value: '',\n          isLeaf: false\n        },\n        item: [{\n          flowId: 0,\n          code: 2,\n          pCode: 1,\n          formFlowFieldId: null,\n          formFlowField: {\n            field: '',\n            fieldName: '',\n            fieldType: '',\n            dicType: ''\n          },\n          operator: '',\n          operatorList: null,\n          dicList: null,\n          isload: true,\n          value: '',\n          isLeaf: true\n        }],\n        children: []\n      }],\n      buttonLoading: false,\n      code: 0,\n      dropDownData1: null,\n      conditionStr: '',\n      orgIds: 8,\n      copeFlowId: null,\n      flowList: [],\n      operArr: {\n        '&&': '并且',\n        '||': '或者'\n      }\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    var _this = this;\n\n    this.dropDownData1 = JSON.parse(JSON.stringify(this.dropDownData)); // console.log('conditionAdd:', this.dropDownData.dictionary)\n\n    this.flowList = this.dropDownData1.flowList.filter(function (f) {\n      return f.id !== _this.obj.id;\n    });\n    this.getFlowConditionList(this.obj.id);\n  },\n  methods: {\n    Save: function Save() {\n      var _this2 = this;\n\n      // console.log('获取流程条件json:', this.list)\n      var list0 = JSON.parse(JSON.stringify(this.list));\n      this.conditionStr = this.getStrCondition(list0, '');\n      var newList = this.toList(list0, 0); // 树形转换成list\n\n      var _iterator = (0, _createForOfIteratorHelper2.default)(newList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          if (item.operator === '') {\n            this.$message('条件符号不能为空');\n            return;\n          }\n\n          if (item.isLeaf) {\n            if (item.formFlowFieldId === 0 || item.formFlowFieldId === null) {\n              this.$message('条件字段不能为空');\n              return;\n            }\n\n            if (item.value === '') {\n              this.$message('条件值不能为空');\n              return;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.buttonLoading = true;\n      (0, _flow.addFlowCondition)({\n        id: this.obj.id,\n        conditionDescription: this.conditionStr,\n        flowCondition: newList\n      }).then(function (response) {\n        _this2.$message(response.message);\n\n        _this2.buttonLoading = false;\n\n        _this2.$emit('dialogClose');\n      }).catch(function () {\n        _this2.buttonLoading = false;\n      });\n    },\n    getFlowConditionList: function getFlowConditionList(id) {\n      var _this3 = this;\n\n      // 初始化\n      (0, _flow.getFlowCondition)({\n        flowId: id\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.length > 0) {\n          data.forEach(function (e) {\n            e.operatorList = null;\n            e.formFlowField = null;\n            e.isload = true;\n\n            if (e.isLeaf) {\n              e.formFlowField = _this3.dropDownData1.formfieldList.find(function (f) {\n                return f.id === e.formFlowFieldId;\n              });\n              e.operatorList = _this3.dropDownData1.fieldTypeList.find(function (f) {\n                return f.type === e.formFlowField.fieldType;\n              }).operator;\n\n              if (e.formFlowField.fieldType === 'dictionary') {\n                e.dicList = _this3.dropDownData1.dictionary.filter(function (f) {\n                  return f.type === e.formFlowField.dicType;\n                });\n                e.dicList.forEach(function (e) {\n                  // e.label = e.name\n                  e.pid = e.pId;\n                  e.id = e.value;\n                });\n                e.value = e.value.split(',').map(function (item) {\n                  return +item;\n                });\n              }\n\n              if (e.formFlowField.fieldType === 'organization') {\n                e.dicList = _this3.dropDownData1.organization;\n                e.value = e.value.split(',').map(function (item) {\n                  return +item;\n                });\n              }\n            }\n          });\n          _this3.list = _this3.getTree(0, data);\n        }\n      });\n    },\n    getTree: function getTree(pCode, data) {\n      var itemArr = [];\n\n      for (var i = 0; i < data.length; i++) {\n        var node = data[i];\n\n        if (node.pCode === pCode && node.isLeaf === false) {\n          var c = this.getTree(node.code, data);\n          var newNode = {\n            header: node,\n            item: data.filter(function (f) {\n              return f.pCode === node.code && f.isLeaf;\n            }),\n            children: c\n          };\n          itemArr.push(newNode);\n        }\n      }\n\n      return itemArr;\n    },\n    toList: function toList(arr, index) {\n      var _this4 = this;\n\n      var list = [];\n\n      var _iterator2 = (0, _createForOfIteratorHelper2.default)(arr),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var a = _step2.value;\n          var header = a.header;\n          header.flowId = this.obj.id;\n          var item = a.item;\n          index = index + 1;\n          header.code = index;\n\n          if (header.isLeaf === false) {\n            this.code = index;\n          }\n\n          header.formFlowFieldId = header.formFlowFieldId || 0;\n          delete header.operatorList;\n          delete header.formFlowField;\n          delete header.dicList;\n          delete header.isload;\n          delete header.id; // 子节点循环\n\n          item.forEach(function (e, i) {\n            e.pCode = _this4.code;\n            index = index + 1;\n            e.code = index;\n            e.flowId = _this4.obj.id;\n            e.formFlowFieldId = e.formFlowFieldId || 0;\n\n            if (e.formFlowField.fieldType === 'dictionary' || e.formFlowField.fieldType === 'organization') {\n              // 类型是字典或者组织机构就把数组转成字符串\n              if (Array.isArray(e.value)) {\n                e.value = e.value.join(',');\n              } // 如果value 是数组，转成字符串\n\n            }\n\n            delete e.operatorList;\n            delete e.formFlowField;\n            delete e.dicList;\n            delete e.isload;\n            delete e.id;\n            index = e.code;\n          });\n          list = [].concat((0, _toConsumableArray2.default)(list), [header], (0, _toConsumableArray2.default)(item)); // 合并\n\n          if (a.children.length > 0) {\n            list = [].concat((0, _toConsumableArray2.default)(list), (0, _toConsumableArray2.default)(this.toList(a.children, index)));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return list;\n    },\n    // 拼接查询条件描述\n    getStrCondition: function getStrCondition(arr, operator) {\n      var _this5 = this;\n\n      var strCondition = '';\n      var i = 0;\n\n      var _iterator3 = (0, _createForOfIteratorHelper2.default)(arr),\n          _step3;\n\n      try {\n        var _loop = function _loop() {\n          var a = _step3.value;\n\n          if (i > 0) {\n            strCondition += ' ' + _this5.operArr[operator] + ' ';\n          }\n\n          i++;\n          tmpStr = '';\n          j = 0;\n          a.item.forEach(function (e, _) {\n            if (j > 0) {\n              tmpStr += ' ' + _this5.operArr[a.header.operator] + ' ';\n            }\n\n            var value = e.value;\n\n            if (e.formFlowField.fieldType === 'dictionary') {\n              value = _this5.dropDownData1.dictionary.filter(function (f) {\n                return f.type === e.formFlowField.dicType && e.value.indexOf(f.value) >= 0;\n              }).map(function (m) {\n                return m.name;\n              }).join('，');\n              value = '（' + value + '）';\n            }\n\n            if (e.formFlowField.fieldType === 'organization') {\n              value = _this5.dropDownData1.organization.filter(function (f) {\n                return e.value.includes(f.id);\n              }).map(function (m) {\n                return m.name;\n              }).join('，');\n              value = '（' + value + '）';\n            }\n\n            tmpStr += e.formFlowField.fieldName + ' ' + e.operator + ' ' + value;\n            j++;\n          });\n\n          if (a.children.length > 0) {\n            if (j > 0) {\n              tmpStr += ' ' + _this5.operArr[a.header.operator] + ' ';\n            }\n\n            tmpStr += _this5.getStrCondition(a.children, a.header.operator);\n          }\n\n          if (operator !== '' && a.item.length + a.children.length > 1) {\n            tmpStr = '（' + tmpStr + '）';\n          }\n\n          strCondition += tmpStr;\n        };\n\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var tmpStr;\n          var j;\n\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return strCondition;\n    },\n    changeFlow: function changeFlow(value) {\n      // console.log('value:', value)\n      this.copeFlowId = value;\n      this.getFlowConditionList(value);\n    }\n  }\n};\nexports.default = _default;",null]}
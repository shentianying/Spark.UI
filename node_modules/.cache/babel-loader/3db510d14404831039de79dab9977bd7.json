{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Projects\\spark\\Spark.UI\\src\\utils\\validate.js","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\utils\\validate.js","mtime":1624071363308},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isExternal = isExternal;\nexports.validUsername = validUsername;\nexports.validateData = exports.validate = void 0;\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\n/**\r\n * Created by PanJiaChen on 16/11/18.\r\n */\n\n/**\r\n * @param {string} path\r\n * @returns {Boolean}\r\n */\nfunction isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path);\n}\n/**\r\n * @param {string} str\r\n * @returns {Boolean}\r\n */\n\n\nfunction validUsername(str) {\n  var valid_map = ['admin', 'editor'];\n  return valid_map.indexOf(str.trim()) >= 0;\n}\n/**\r\n * vue验证函数\r\n * import { validate } from '@/utils/validate'\r\n * 使用：\r\n * { validator: validate.dbl }\r\n * { validator: validate.dbl, message: '可为空或数字类型', required: false }\r\n * { validator: validate.logic, logic: value => value > 0 && value < 1 }\r\n * { validator: validate.regex, regex: /^\\d+$/ }\r\n */\n\n\nvar validate = {\n  required: function required(rule, value, callback) {\n    return validateFunction('required', rule, value, callback);\n  },\n  phone: function phone(rule, value, callback) {\n    return validateFunction('phone', rule, value, callback);\n  },\n  mobile: function mobile(rule, value, callback) {\n    return validateFunction('mobile', rule, value, callback);\n  },\n  email: function email(rule, value, callback) {\n    return validateFunction('email', rule, value, callback);\n  },\n  url: function url(rule, value, callback) {\n    return validateFunction('url', rule, value, callback);\n  },\n  number: function number(rule, value, callback) {\n    return validateFunction('number', rule, value, callback);\n  },\n  qq: function qq(rule, value, callback) {\n    return validateFunction('qq', rule, value, callback);\n  },\n  int: function int(rule, value, callback) {\n    return validateFunction('int', rule, value, callback);\n  },\n  dbl: function dbl(rule, value, callback) {\n    return validateFunction('dbl', rule, value, callback);\n  },\n  date: function date(rule, value, callback) {\n    return validateFunction('date', rule, value, callback);\n  },\n  money: function money(rule, value, callback) {\n    return validateFunction('money', rule, value, callback);\n  },\n  idCode: function idCode(rule, value, callback) {\n    return validateFunction('idCode', rule, value, callback);\n  },\n  regex: function regex(rule, value, callback) {\n    return validateFunction('regex', rule, value, callback);\n  },\n  logic: function logic(rule, value, callback) {\n    return validateFunction('logic', rule, value, callback);\n  }\n};\n/**\r\n *  js数据验证\r\n * import { validateData } from '@/utils/validate'\r\n * 使用（返回布尔型）：\r\n * validateData.dbl(value)\r\n * 数据可为空\r\n * validateData.null_dbl(value)\r\n * 正则验证\r\n * validateData.regex(value, /^\\d+$/)\r\n * 逻辑验证\r\n * validateData.logic(value, value => value > 0 && value < 1)\r\n */\n\nexports.validate = validate;\nvar validateData = {\n  required: function required(value) {\n    return validateDataFunction('required', true, value);\n  },\n  phone: function phone(value) {\n    return validateDataFunction('phone', true, value);\n  },\n  mobile: function mobile(value) {\n    return validateDataFunction('mobile', true, value);\n  },\n  email: function email(value) {\n    return validateDataFunction('email', true, value);\n  },\n  url: function url(value) {\n    return validateDataFunction('url', true, value);\n  },\n  number: function number(value) {\n    return validateDataFunction('number', true, value);\n  },\n  qq: function qq(value) {\n    return validateDataFunction('qq', true, value);\n  },\n  int: function int(value) {\n    return validateDataFunction('int', true, value);\n  },\n  dbl: function dbl(value) {\n    return validateDataFunction('dbl', true, value);\n  },\n  date: function date(value) {\n    return validateDataFunction('date', true, value);\n  },\n  money: function money(value) {\n    return validateDataFunction('money', true, value);\n  },\n  idCode: function idCode(value) {\n    return validateDataFunction('idCode', true, value);\n  },\n  regex: function regex(value, _regex) {\n    return validateDataFunction('regex', true, value, _regex);\n  },\n  logic: function logic(value, func) {\n    return validateDataFunction('logic', true, value, func);\n  },\n  null_phone: function null_phone(value) {\n    return validateDataFunction('phone', false, value);\n  },\n  null_mobile: function null_mobile(value) {\n    return validateDataFunction('mobile', false, value);\n  },\n  null_email: function null_email(value) {\n    return validateDataFunction('email', false, value);\n  },\n  null_url: function null_url(value) {\n    return validateDataFunction('url', false, value);\n  },\n  null_number: function null_number(value) {\n    return validateDataFunction('number', false, value);\n  },\n  null_qq: function null_qq(value) {\n    return validateDataFunction('qq', false, value);\n  },\n  null_int: function null_int(value) {\n    return validateDataFunction('int', false, value);\n  },\n  null_dbl: function null_dbl(value) {\n    return validateDataFunction('dbl', false, value);\n  },\n  null_date: function null_date(value) {\n    return validateDataFunction('date', false, value);\n  },\n  null_money: function null_money(value) {\n    return validateDataFunction('money', false, value);\n  },\n  null_idCode: function null_idCode(value) {\n    return validateDataFunction('idCode', false, value);\n  },\n  null_regex: function null_regex(value, regex) {\n    return validateDataFunction('regex', false, value, regex);\n  },\n  null_logic: function null_logic(value, func) {\n    return validateDataFunction('logic', false, value, func);\n  }\n};\nexports.validateData = validateData;\n\nfunction validateDataFunction(type, required, value) {\n  // 错误提示信息\n  var errMsg = validateErrMsg[type];\n  var result; // 数据为空且可为空时直接验证通过\n\n  if (!required && value.trim() === '') {\n    result = true;\n  } else {\n    switch (type) {\n      case 'idCode':\n        // 身份证验证\n        result = checkIdCode(value) === '1';\n        break;\n\n      case 'regex':\n        // 正则验证\n        if (arguments.length >= 4) {\n          result = arguments[3].test(value);\n        } else {\n          result = false;\n          alert('未设置正则表达式');\n        }\n\n        break;\n\n      case 'logic':\n        // 逻辑验证\n        if (arguments.length >= 4) {\n          result = arguments[3](value);\n        } else {\n          result = false;\n          alert('未设置验证方法');\n        }\n\n        break;\n\n      default:\n        // 其他指定的验证方式\n        if (validateReg.hasOwnProperty(type)) {\n          result = validateReg[type].test(value);\n        } else {\n          result = false;\n          alert('未知的验证方法');\n        }\n\n        break;\n    }\n  } // alert(errMsg)\n\n\n  return {\n    isSuccess: result,\n    msg: errMsg\n  };\n}\n\nfunction validateFunction(type, rule, value, callback) {\n  var required = true;\n  if (rule.hasOwnProperty('required')) required = rule.required; // 数据为空且可为空时直接验证通过\n\n  if (!required && (value === null || value.trim() === '')) {\n    callback();\n    return;\n  } // 错误提示信息\n\n\n  var errMsg = rule.message || validateErrMsg[type];\n\n  switch (type) {\n    case 'idCode':\n      // 身份证验证\n      if (checkIdCode(value) === '1') {\n        callback();\n      } else {\n        callback(new Error(errMsg));\n      }\n\n      break;\n\n    case 'regex':\n      // 正则验证\n      if (rule.hasOwnProperty('regex') && rule.regex.constructor === RegExp) {\n        if (rule.regex.test(value)) {\n          callback();\n        } else {\n          callback(new Error(errMsg));\n        }\n      } else {\n        callback(new Error('未设置正则表达式'));\n      }\n\n      break;\n\n    case 'logic':\n      // 逻辑验证\n      if (rule.hasOwnProperty('logic') && rule.logic.constructor === Function) {\n        if (rule.logic(value)) {\n          callback();\n        } else {\n          callback(new Error(errMsg));\n        }\n      } else {\n        callback(new Error('未设置验证方法'));\n      }\n\n      break;\n\n    default:\n      // 其他指定的验证方式\n      if (validateReg.hasOwnProperty(type)) {\n        if (validateReg[type].test(value)) {\n          callback();\n        } else {\n          callback(new Error(errMsg));\n        }\n      } else {\n        callback(new Error('未知的验证方法'));\n      }\n\n      break;\n  }\n}\n\nvar validateErrMsg = {\n  required: '不能为空',\n  phone: '电话或手机号不正确',\n  mobile: '手机号不正确',\n  email: 'Email格式不正确',\n  url: '必须为网址格式',\n  money: '必须为数字格式',\n  number: '必须为数字格式',\n  qq: 'QQ号码不正确',\n  int: '必须为整数格式',\n  dbl: '必须为数字格式',\n  date: '日期格式不正确',\n  idCode: '身份证号码不正确',\n  logic: '数据不正确',\n  regex: '数据不合规则'\n};\nvar validateReg = {\n  required: /.+/,\n  phone: /^((((\\(\\d{3}\\))|(\\d{3}\\-))?(\\(0\\d{2,3}\\)|0\\d{2,3}-)?[1-9]\\d{6,7}(-\\d{1,4})?)|(0?1[3-9]\\d{9}))$/,\n  // 电话可兼容手机号码\n  mobile: /^0?1[3-9]\\d{9}$/,\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i,\n  url: /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i,\n  money: /^\\d+(\\.\\d+)?$/,\n  number: /^\\d+$/,\n  qq: /^[1-9]\\d{4,10}$/,\n  int: /^[-\\+]?\\d+$/,\n  dbl: /^[-\\+]?\\d+(\\.\\d+)?$/,\n  date: /^\\d{4}[-\\/]((0?[1-9])|(1[0-2]))[-\\/]((0?[1-9])|([1-2][0-9])|(3[0-1]))$/\n};\n\nfunction checkIdCode(idCode) {\n  var Errors = ['1', '身份证号码位数不对！', '身份证号码出生日期超出范围或含有非法字符！', '身份证号码校验错误！', '身份证地区非法！'];\n  var area = {\n    11: '北京',\n    12: '天津',\n    13: '河北',\n    14: '山西',\n    15: '内蒙古',\n    21: '辽宁',\n    22: '吉林',\n    23: '黑龙江',\n    31: '上海',\n    32: '江苏',\n    33: '浙江',\n    34: '安徽',\n    35: '福建',\n    36: '江西',\n    37: '山东',\n    41: '河南',\n    42: '湖北',\n    43: '湖南',\n    44: '广东',\n    45: '广西',\n    46: '海南',\n    50: '重庆',\n    51: '四川',\n    52: '贵州',\n    53: '云南',\n    54: '西藏',\n    61: '陕西',\n    62: '甘肃',\n    63: '青海',\n    64: '宁夏',\n    65: '新疆',\n    71: '台湾',\n    81: '香港',\n    82: '澳门',\n    91: '国外'\n  };\n  var Y, JYM;\n  var S, M;\n  var idCode_array = idCode.split('');\n  var ereg; // 地区检验\n\n  if (area[parseInt(idCode.substr(0, 2))] === null) return Errors[4]; // 身份号码位数及格式检验\n\n  switch (idCode.length) {\n    case 15:\n      if ((parseInt(idCode.substr(6, 2), 10) + 1900) % 400 === 0 || (parseInt(idCode.substr(6, 2), 10) + 1900) % 100 !== 0 && (parseInt(idCode.substr(6, 2), 10) + 1900) % 4 === 0) {\n        ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/; // 测试出生日期的合法性\n      } else {\n        ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/; // 测试出生日期的合法性\n      }\n\n      if (ereg.test(idCode)) return Errors[0];else return Errors[2];\n\n    case 18:\n      // 18位身份号码检测\n      // 出生日期的合法性检查\n      // 闰年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))\n      // 平年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))\n      if (parseInt(idCode.substr(6, 4)) % 400 === 0 || parseInt(idCode.substr(6, 4)) % 100 !== 0 && parseInt(idCode.substr(6, 4)) % 4 === 0) {\n        ereg = /^[1-9][0-9]{5}(19|20)[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/; // 闰年出生日期的合法性正则表达式\n      } else {\n        ereg = /^[1-9][0-9]{5}(19|20)[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/; // 平年出生日期的合法性正则表达式\n      }\n\n      if (ereg.test(idCode)) {\n        // 测试出生日期的合法性\n        // 计算校验位\n        S = (parseInt(idCode_array[0]) + parseInt(idCode_array[10])) * 7 + (parseInt(idCode_array[1]) + parseInt(idCode_array[11])) * 9 + (parseInt(idCode_array[2]) + parseInt(idCode_array[12])) * 10 + (parseInt(idCode_array[3]) + parseInt(idCode_array[13])) * 5 + (parseInt(idCode_array[4]) + parseInt(idCode_array[14])) * 8 + (parseInt(idCode_array[5]) + parseInt(idCode_array[15])) * 4 + (parseInt(idCode_array[6]) + parseInt(idCode_array[16])) * 2 + parseInt(idCode_array[7]) * 1 + parseInt(idCode_array[8]) * 6 + parseInt(idCode_array[9]) * 3;\n        Y = S % 11;\n        M = 'F';\n        JYM = '10X98765432';\n        M = JYM.substr(Y, 1); // 判断校验位\n\n        if (M === idCode_array[17].toUpperCase()) return Errors[0]; // 检测ID的校验位\n        else return Errors[3];\n      } else return Errors[2];\n\n    default:\n      return Errors[1];\n  }\n}",null]}
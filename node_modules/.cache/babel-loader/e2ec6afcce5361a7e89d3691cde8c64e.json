{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\FlowRemake\\flowSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\FlowRemake\\flowSelect.vue","mtime":1631670623791},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _selectPerson = _interopRequireDefault(require(\"@/components/Other/selectPerson\"));\n\nvar _flowSelect = _interopRequireDefault(require(\"@/components/Flow/flowSelect.vue\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n * 改为使用mixins的方式直接将原组件混入\r\n * 这样既可以做到修改样式,又可以不用重复修改,当原组件修改逻辑以后本组件会同时被修改\r\n */\nvar _default = {\n  components: {\n    SelectPerson: _selectPerson.default\n  },\n  mixins: [_flowSelect.default],\n  watch: {\n    billFlow: function billFlow() {\n      var _this = this;\n\n      var _this$utils$easyDeepC = this.utils.easyDeepClone(this.billFlow),\n          formState = _this$utils$easyDeepC.form.formState,\n          billFlowNode = _this$utils$easyDeepC.billFlowNode;\n\n      var newList = [];\n      formState.sort(function (a, b) {\n        return a.value - b.value;\n      });\n      billFlowNode.forEach(function (fe) {\n        fe.personId = fe.personId || null;\n      });\n      formState.forEach(function (e, i) {\n        if (e.isFlowNode) {\n          if (e.isCheckup) {\n            var gs = _this.groupBy(billFlowNode.filter(function (f) {\n              return f.state === e.value;\n            }), function (item) {\n              return [item.group];\n            });\n\n            e.stateNode = gs;\n          }\n\n          newList.push(e);\n        }\n      });\n      this.stateList = newList;\n    }\n  }\n};\nexports.default = _default;",null]}
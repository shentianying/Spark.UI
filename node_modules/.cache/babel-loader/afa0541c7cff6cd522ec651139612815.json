{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\components\\upLoadAvatar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\components\\upLoadAvatar.vue","mtime":1624071363346},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.typed.uint8-array\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'UpImage',\n  // 上传图片\n  data: function data() {\n    return {\n      uploadImageAction: 'http://aaaa.com/api/EntryForm/UpLoadImage',\n      avatar: '',\n      avatarTemp: ''\n    };\n  },\n  methods: {\n    // 上传文件的方法\n    handleRemove: function handleRemove(file, fileList) {\n      this.fileList = this.fileList.filter(function (item) {\n        return item.url !== file.url;\n      });\n    },\n    handlePreview: function handlePreview(file) {// window.open(file.url);\n    },\n    handleExceed: function handleExceed(files, fileList) {\n      this.$message.warning(\"\\u5F53\\u524D\\u9650\\u5236\\u9009\\u62E9 3 \\u4E2A\\u6587\\u4EF6\\uFF0C\\u672C\\u6B21\\u9009\\u62E9\\u4E86 \".concat(files.length, \" \\u4E2A\\u6587\\u4EF6\\uFF0C\\u5171\\u9009\\u62E9\\u4E86 \").concat(files.length + fileList.length, \" \\u4E2A\\u6587\\u4EF6\"));\n    },\n    beforeRemove: function beforeRemove(file, fileList) {// return this.$confirm(`确定移除 ${file.name}？`);\n    },\n    // handleError(err, file, fileList) {\n    //   this.$message.error('出错了')\n    // },\n    handleSuccess: function handleSuccess(response, file, fileList) {\n      this.fileList.push({\n        name: file.name,\n        url: response\n      });\n    },\n    handleAvatarSuccess: function handleAvatarSuccess(res, file) {\n      this.Avatar = URL.createObjectURL(file.raw); // 作显示的\n\n      this.AvatarTemp = res; // 保存数据库的值\n    },\n    beforeFileUpload: function beforeFileUpload(file) {\n      var isLt2M = file.size / 1024 / 1024 < 10;\n\n      if (!isLt2M) {\n        this.$message.error('上传文件大小不能超过 10MB!');\n      }\n\n      return isLt2M;\n    },\n    beforeAvatarUpload: function beforeAvatarUpload(file) {\n      var _this2 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var isLt2M = file.size / 1024 / 1024 < 10; // 判定图片大小是否小于10MB\n\n        if (!isLt2M) {\n          _this2.$message.error('上传头像图片大小不能超过 10MB!');\n\n          reject();\n        }\n\n        var image = new Image();\n        var resultBlob = '';\n        image.src = URL.createObjectURL(file);\n\n        image.onload = function () {\n          // 调用方法获取blob格式，方法写在下边\n          resultBlob = _this.compressUpload(image, file);\n          resolve(resultBlob);\n        };\n\n        image.onerror = function () {\n          reject();\n        };\n      });\n    },\n    compressUpload: function compressUpload(image, file) {\n      var canvas = document.createElement('canvas');\n      var ctx = canvas.getContext('2d'); // const initSize = image.src.length\n\n      var width = image.width;\n      var height = image.height;\n      canvas.width = width;\n      canvas.height = height;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(image, 0, 0, width, height); // 进行最小压缩0.1\n\n      var compressData = canvas.toDataURL(file.type || 'image/jpeg', 0.5); // 压缩后调用方法进行base64转Blob，方法写在下边\n\n      var blobImg = this.dataURItoBlob(compressData);\n      return blobImg;\n    },\n    dataURItoBlob: function dataURItoBlob(data) {\n      var byteString;\n\n      if (data.split(',')[0].indexOf('base64') >= 0) {\n        byteString = atob(data.split(',')[1]);\n      } else {\n        byteString = unescape(data.split(',')[1]);\n      }\n\n      var mimeString = data.split(',')[0].split(':')[1].split(';')[0];\n      var ia = new Uint8Array(byteString.length);\n\n      for (var i = 0; i < byteString.length; i += 1) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      return new Blob([ia], {\n        type: mimeString\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
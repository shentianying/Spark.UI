{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowDisplay.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowDisplay.vue","mtime":1635840233762},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar _flowDisplayAdd = _interopRequireDefault(require(\"./flowDisplayAdd\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 查看流程进度\nvar _default = {\n  name: 'FlowDisplay',\n  components: {\n    FlowDisplayAdd: _flowDisplayAdd.default\n  },\n  props: {\n    billFlow: {\n      type: Object,\n      default: null\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    } // 是否启用编辑\n\n  },\n  data: function data() {\n    return {\n      stateList: [],\n      loading: false,\n      activeName: ['1'],\n      createUserName: '',\n      billFlowData: null,\n      dialogTableVisible: false,\n      dialogTitle: '编辑流程',\n      dialogWidth: '70%',\n      comName: 'FlowDisplayAdd',\n      formStateOption: []\n    };\n  },\n  computed: {\n    // 是否允许编辑\n    allowEdit: function allowEdit() {\n      var _this$billFlow,\n          _this$billFlow$billFl,\n          _this = this;\n\n      // 只有制单人 或者 当前审批人才能显示编辑流程的按钮 并且流程状态state>1<10000 审批中\n      if (this.billFlow.state < 1 || this.billFlow.state >= 10000) {\n        return false;\n      }\n\n      if (this.billFlow.createUserId === this.$store.state.user.uid) {\n        return true;\n      }\n\n      var arr = ((_this$billFlow = this.billFlow) === null || _this$billFlow === void 0 ? void 0 : (_this$billFlow$billFl = _this$billFlow.billFlowNode) === null || _this$billFlow$billFl === void 0 ? void 0 : _this$billFlow$billFl.filter(function (f) {\n        return f.isCurrentState && !f.isChecked;\n      })) || [];\n\n      if (arr.find(function (v) {\n        return v.personId === _this.$store.state.user.uid;\n      })) {\n        return true;\n      }\n\n      return false;\n    }\n  },\n  watch: {\n    /**\r\n     * 写这个是为了使得页面没有关闭从新打开另一个单子详情的时候审批组件的内容会刷新\r\n     */\n    billFlow: function billFlow() {\n      this.fetchData();\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.billFlowData = JSON.parse(JSON.stringify(this.billFlow));\n    this.fetchData();\n  },\n  methods: {\n    /**\r\n     * 这个方法要重写,\r\n     * 因为原来那个不符合现在的页面逻辑,\r\n     * 在已有页面不关闭的情况下,再次进入会在原来基础上增加\r\n     * 所以现在采用每次都新拼接一个再反向覆盖的方式\r\n     */\n    fetchData: function fetchData() {\n      var _this2 = this;\n\n      var _this$utils$easyDeepC = this.utils.easyDeepClone(this.billFlowData),\n          formState = _this$utils$easyDeepC.form.formState,\n          billFlowNode = _this$utils$easyDeepC.billFlowNode;\n\n      this.billFlowData.billFlowNode.forEach(function (fe) {\n        fe.personId = fe.personId || null;\n      });\n      var newList = [];\n      formState.forEach(function (e, i) {\n        if (e.isFlowNode) {\n          if (e.isCheckup) {\n            e.stateNode = _this2.groupBy(billFlowNode.filter(function (f) {\n              return f.state === e.value;\n            }), function (item) {\n              return [item.group];\n            });\n          }\n\n          newList.push(e);\n        }\n\n        if ((e.formStateOption || []).length > 0) {\n          // console.log('e.formStateOption:', e.formStateOption)\n          e.formStateOption.forEach(function (e0) {\n            _this2.formStateOption.push((0, _objectSpread2.default)({}, e0));\n          });\n        }\n      });\n      this.stateList = newList;\n    },\n    groupBy: function groupBy(array, f) {\n      var groups = {};\n      array.forEach(function (o) {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n      });\n      return Object.keys(groups).map(function (group) {\n        return groups[group];\n      });\n    },\n    addChecker: function addChecker() {\n      this.dialogTitle = '编辑流程';\n      this.dialogTableVisible = true;\n    },\n    dialogClose: function dialogClose(bf) {\n      // 刷新流程数据\n      this.billFlowData = bf;\n      this.stateList = [];\n      this.dialogTableVisible = false;\n      this.fetchData();\n      this.$parent.$refs.flowAttitude.fetchData(); // 刷新 审批列表信息\n    }\n  }\n};\nexports.default = _default;",null]}
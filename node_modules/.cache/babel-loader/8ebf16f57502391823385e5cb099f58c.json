{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\byj\\Imprest\\WriteOffEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\byj\\Imprest\\WriteOffEdit.vue","mtime":1635216068765},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _MyForm = _interopRequireDefault(require(\"@/components/MyForm\"));\n\nvar _validate = require(\"@/utils/validate\");\n\nvar _Impresst = require(\"@/api/cwgl/Impresst\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ImprestWriteOffEdit',\n  components: {\n    MyForm: _MyForm.default\n  },\n  data: function data() {\n    return {\n      state: 0,\n      size: 'mini',\n      selectPlaceholder: '输入选择',\n      inputPlaceholder: '请输入',\n      firstForm: {\n        id: 0,\n        // 新增id为0\n        companyId: '',\n        // 公司id\n        number: '',\n        // 新增编号自动生成\n        personId: '',\n        // 冲销人工号\n        orgId: '',\n        // 部门id\n        imprestType: 2,\n        // 冲销方式: 1：网银冲销；2：发票冲销\n        personName: '',\n        amount: '',\n        // 冲销金额\n        remark: '',\n        // 备注\n        type: 1 // 备用金冲销 固定值为1\n\n      },\n      firstRules: {\n        orgId: [{\n          required: true,\n          message: '请选择部门',\n          trigger: 'change'\n        }],\n        personId: [{\n          required: true,\n          message: '请输入冲销人工号',\n          trigger: 'change'\n        }],\n        personName: [{\n          required: true,\n          trigger: 'change',\n          message: '请选择冲销人'\n        }],\n        amount: [{\n          required: true,\n          message: '请输入金额',\n          trigger: 'change'\n        }, {\n          validator: _validate.validate.money,\n          message: '金额格式不正确',\n          trigger: 'change'\n        }, {\n          validator: _validate.validate.max_amount,\n          message: '超过所能存储的最大金额',\n          trigger: 'change'\n        }],\n        imprestType: [{\n          required: true,\n          message: '请选择冲销方式',\n          trigger: 'change'\n        }]\n      },\n      filter: {\n        imprestTypeList: [] // 冲销方式列表数据\n\n      },\n      project: {}\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return this.firstForm.state === 10000;\n    },\n    formNodeData: function formNodeData() {\n      var _this = this;\n\n      var h = this.$createElement;\n      var inputPlaceholder = this.inputPlaceholder,\n          selectPlaceholder = this.selectPlaceholder,\n          firstForm = this.firstForm,\n          filter = this.filter;\n      return [{\n        label: '编号:',\n        keyword: 'number',\n        props: {\n          disabled: true,\n          placeholder: '系统自动生成'\n        }\n      }, {\n        label: '部门:',\n        keyword: 'orgId',\n        component: 'OrgSelect',\n        props: {\n          placeholder: selectPlaceholder\n        }\n      }, {\n        label: '冲销人工号:',\n        keyword: 'personId',\n        component: 'PersonSelect',\n        props: {\n          propsLabel: 'number',\n          multiple: false,\n          placeholder: selectPlaceholder\n        }\n      }, {\n        label: '姓名:',\n        keyword: 'personName',\n        props: {\n          disabled: true,\n          placeholder: '自动带出'\n        }\n      }, {\n        label: '冲销金额:',\n        keyword: 'amount',\n        props: {\n          placeholder: inputPlaceholder\n        }\n      }, {\n        label: '冲销方式:',\n        keyword: 'imprestType',\n        render: function render(h) {\n          return h(\"el-radio-group\", {\n            \"model\": {\n              value: firstForm.imprestType,\n              callback: function callback($$v) {\n                _this.$set(firstForm, \"imprestType\", $$v);\n              }\n            }\n          }, [filter.imprestTypeList.map(function (e) {\n            return h(\"el-radio\", {\n              \"key\": e.id,\n              \"attrs\": {\n                \"label\": e.value\n              }\n            }, [e.name]);\n          })]);\n        }\n      }, {\n        label: '备注:',\n        monopolize: true,\n        keyword: 'remark',\n        props: {\n          placeholder: inputPlaceholder,\n          type: 'textarea'\n        }\n      }];\n    }\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.InitImprestWriteOffType();\n      var newId = vm.$route.query.id;\n      var oldId = vm.firstForm.id;\n      var type = vm.$route.query.type;\n      var form = vm.firstForm;\n      var selectOrgId = vm.$store.state.user.selectOrgId;\n      form.companyId = selectOrgId;\n\n      if (newId && newId !== oldId) {\n        // 说明是打开另一个单子的编辑页面\n        vm.firstForm.id = newId;\n        vm.initDataById(newId);\n        vm.state = 1;\n      } else {\n        if (type === 'add' && oldId) {\n          Object.assign(vm.$data.firstForm, vm.$options.data().firstForm);\n          vm.$nextTick(function () {\n            vm.$refs.firstForm.resetFields();\n          });\n        }\n      }\n    });\n  },\n  methods: {\n    /**\r\n     * 处理项目选择器选择事件\r\n     */\n    selectPerson: function selectPerson(val) {\n      Object.assign(this.firstForm, {\n        personName: val ? val.name : ''\n      });\n    },\n\n    /**\r\n     * @description: 根据id获取数据并且初始化选项框数据\r\n     */\n    initDataById: function initDataById(id) {\n      var _this2 = this;\n\n      (0, _Impresst.GetImprestWriteOffById)({\n        id: id\n      }).then(function (res) {\n        _this2.user = res.data.person;\n        var form = _this2.firstForm;\n\n        for (var key in form) {\n          if (Object.hasOwnProperty.call(form, key)) {\n            form[key] = res.data[key] || form[key];\n          }\n        }\n\n        if (form.amount < 0) {\n          form.amount = Math.abs(form.amount);\n        }\n      });\n    },\n\n    /**\r\n     * @description: 初始化冲销方式单选\r\n     */\n    InitImprestWriteOffType: function InitImprestWriteOffType() {\n      var _this3 = this;\n\n      (0, _Impresst.InitImprestWriteOff)().then(function (res) {\n        _this3.filter.imprestTypeList = res.typeList;\n      });\n    },\n\n    /**\r\n     * 提交表单\r\n     * @param {Number} state 提交类型，0：保存；1：提交; 10000: 修改\r\n     */\n    submitForm: function submitForm(state, formName) {\n      var _this4 = this;\n\n      this.$refs[formName].validate( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var req;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (valid) {\n                    req = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _this4.firstForm), {}, {\n                      state: state\n                    });\n                    delete req.personName;\n\n                    if (req.id) {\n                      (0, _Impresst.PutImprestWriteOff)(req).then(function (res) {\n                        // 更新\n                        _this4.$message.success('保存成功');\n\n                        _this4.back();\n                      });\n                    } else {\n                      (0, _Impresst.AddImprestWriteOff)(req).then(function () {\n                        // 添加\n                        _this4.$message.success('提交成功');\n\n                        _this4.back();\n                      });\n                    }\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * 作废\r\n     */\n    invalidForm: function invalidForm() {\n      var _this5 = this;\n\n      this.$confirm('作废以后将无法编辑，是否确定作废？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        return (0, _Impresst.DeleteImprestWriteOff)({\n          id: _this5.firstForm.id\n        });\n      }).then(function () {\n        _this5.$message.success('操作成功');\n\n        _this5.back();\n      });\n    },\n    back: function back() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    }\n  }\n};\nexports.default = _default;",null]}
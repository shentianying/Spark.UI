{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Gathering\\details.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Gathering\\details.vue","mtime":1635749455638},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _Gathering = require(\"@/api/cwgl/zjgl/Gathering.js\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ShouKuanDetails',\n  data: function data() {\n    return {\n      loading: false,\n      // 获取数据状态\n      myDetails: null // 详情数据\n\n    };\n  },\n  computed: {\n    /**\r\n     * 详情字段计算\r\n     */\n    infoList: function infoList() {\n      var _ref = this.myDetails || {},\n          number = _ref.number,\n          orgName = _ref.orgName,\n          gatheringTypeName = _ref.gatheringTypeName,\n          capitalTypeName = _ref.capitalTypeName,\n          gatheringDate = _ref.gatheringDate,\n          personName = _ref.personName,\n          amount = _ref.amount,\n          bank = _ref.bank,\n          remark = _ref.remark,\n          createUserName = _ref.createUserName,\n          createDate = _ref.createDate,\n          lastEditUserName = _ref.lastEditUserName,\n          lastEditDate = _ref.lastEditDate,\n          pageName = _ref.pageName,\n          pageId = _ref.pageId,\n          billId = _ref.billId;\n\n      var $moment = this.$moment,\n          goDeal = this.goDeal; // 遍历的数据 label:展示名   value:展示值  monopolize:独占一行   name:对应response返回的属性名  click: 点击时触发的事件 params 点击事件的参数\n\n      return [{\n        label: '收款编号',\n        value: number\n      }, {\n        label: '部门',\n        value: orgName\n      }, {\n        label: '收款类型',\n        value: gatheringTypeName\n      }, {\n        label: '资金形式',\n        value: capitalTypeName\n      }, {\n        label: '收款日期',\n        value: $moment(gatheringDate).format('YYYY-MM-DD')\n      }, {\n        label: '经手人',\n        value: personName\n      }, {\n        label: '金额',\n        value: this.utils.formatMoney(amount, 2, 0)\n      }, {\n        label: '收款银行',\n        value: bank\n      }, {\n        label: '备注',\n        value: remark,\n        monopolize: true\n      }, {\n        label: '制单人',\n        value: createUserName\n      }, {\n        label: '制单时间',\n        value: createDate\n      }, {\n        label: '更新人',\n        value: lastEditUserName\n      }, {\n        label: '更新时间',\n        value: lastEditDate\n      }, {\n        label: '源头',\n        value: pageName,\n        click: goDeal,\n        params: [pageId, billId]\n      }];\n    }\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.initData();\n    });\n  },\n  methods: {\n    /**\r\n     * @description: 初始化数据\r\n     */\n    initData: function initData() {\n      // console.log(this.$route.query.id)\n      var id = this.$route.query.id;\n\n      if (id) {\n        this.id = id;\n        this.fetchData();\n      }\n    },\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                _context.prev = 1;\n                _context.next = 4;\n                return (0, _Gathering.GetPaymentById)(this.id);\n\n              case 4:\n                res = _context.sent;\n                this.myDetails = res.data;\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                console.log('fetchData:请求列表数据失败，错误信息：', _context.t0);\n\n              case 11:\n                _context.prev = 11;\n                this.loading = false;\n                return _context.finish(11);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8, 11, 14]]);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n\n    /**\r\n     * 前往源头\r\n     * @param {*} pageId 路由id\r\n     * @param {*} billId 单据id\r\n     */\n    goDeal: function goDeal(pageId, billId) {\n      if (!pageId) return;\n\n      var _this$getRoute = this.getRoute(pageId),\n          routerName = _this$getRoute.routerName;\n\n      this.$router.replace({\n        name: routerName,\n        query: {\n          id: billId,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: billId,\n          type: 1\n        }\n      });\n    },\n\n    /**\r\n     * 获取源头路由\r\n     * @param {*} pageId 路由ID\r\n     * @returns 对应路由\r\n     */\n    getRoute: function getRoute(pageId) {\n      // 获取菜单列表\n      var getIsMenu = this.$store.getters.menus;\n      return getIsMenu.find(function (f) {\n        return f.id === pageId;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
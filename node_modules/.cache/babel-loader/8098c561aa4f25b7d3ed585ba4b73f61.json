{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\FlowRemake\\flowDisplay.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\FlowRemake\\flowDisplay.vue","mtime":1631670623789},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _flowDisplay = _interopRequireDefault(require(\"@/components/Flow/flowDisplay.vue\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n * 流程进度组件重做,\r\n * 逻辑,流程完全一样,只是排版和样式修改\r\n * 还有把折叠面板去掉了\r\n * 去除了编辑功能,该组件只做展示,编辑用另一个组件\r\n */\nvar _default = {\n  name: 'FlowDisplay',\n  mixins: [_flowDisplay.default],\n  watch: {\n    /**\r\n     * 写这个是为了使得页面没有关闭从新打开另一个单子详情的时候审批组件的内容会刷新\r\n     */\n    billFlow: function billFlow() {\n      this.fetchData();\n    }\n  },\n  methods: {\n    /**\r\n     * 这个方法要重写,\r\n     * 因为原来那个不符合现在的页面逻辑,\r\n     * 在已有页面不关闭的情况下,再次进入会在原来基础上增加\r\n     * 所以现在采用每次都新拼接一个再反向覆盖的方式\r\n     */\n    fetchData: function fetchData() {\n      var _this = this;\n\n      var _this$utils$easyDeepC = this.utils.easyDeepClone(this.billFlow),\n          formState = _this$utils$easyDeepC.form.formState,\n          billFlowNode = _this$utils$easyDeepC.billFlowNode;\n\n      var newList = [];\n      formState.forEach(function (e, i) {\n        if (e.isFlowNode) {\n          if (e.isCheckup) {\n            e.stateNode = _this.groupBy(billFlowNode.filter(function (f) {\n              return f.state === e.value;\n            }), function (item) {\n              return [item.group];\n            });\n          }\n\n          newList.push(e);\n        }\n      });\n      this.stateList = newList;\n    }\n  }\n};\nexports.default = _default;",null]}
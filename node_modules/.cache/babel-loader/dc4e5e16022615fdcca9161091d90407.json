{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Acceptance\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Acceptance\\index.vue","mtime":1635216068774},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _TableEx = _interopRequireDefault(require(\"@/components/TableEx\"));\n\nvar _Acceptance = require(\"@/api/cwgl/zjgl/Acceptance.js\");\n\nvar _SearchBar = _interopRequireDefault(require(\"@/components/SearchBar\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import searchData from './searchData'\nvar _default = {\n  name: 'ChengDuiXinXiIndex',\n  components: {\n    SearchBar: _SearchBar.default,\n    TableEx: _TableEx.default\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      size: 'mini',\n      // 整体大小 medium / small / mini\n      searchData: require(\"./searchData\").default(),\n      // 渲染搜索栏数据\n      lastSearch: null,\n      // 最近一次搜索的数据\n\n      /* 列表数据相关 */\n      table: {\n        columns: [{\n          label: '票号',\n          // 表头\n          prop: 'ticketNumber',\n          // 渲染的属性\n          class: 'link',\n          // class\n          width: '130',\n          // 宽度\n          click: function click(row) {\n            return _this.handleDetails(row);\n          }\n        }, {\n          label: '收款部门',\n          prop: 'orgName',\n          width: '130'\n        }, {\n          label: '类型',\n          prop: 'capitalType',\n          width: '100'\n        }, {\n          label: '开票日期',\n          prop: 'ticketDate',\n          format: 'date',\n          width: '100'\n        }, {\n          label: '到期日期',\n          prop: 'expiration',\n          format: 'date',\n          width: '100'\n        }, {\n          label: '付款人',\n          prop: 'payer',\n          width: '100'\n        }, {\n          label: '收款银行',\n          prop: 'bank',\n          width: '100'\n        }, {\n          label: '金额',\n          align: 'right',\n          prop: 'amount',\n          format: 'money',\n          width: '100'\n        }, {\n          label: '备注',\n          prop: 'remark',\n          minWidth: '150'\n        }, {\n          label: '状态',\n          prop: 'stateName',\n          minWidth: '100',\n          formatExport: function formatExport(val) {\n            return val;\n          },\n          // 表格导出使用的格式化方式默认使用format。\n          format: function format(val, _format, row, column) {\n            return \"\\n                <div class=\\\"state\\\">\\n                  <div class=\\\"circle \".concat(row.state === 1 ? 'success' : '', \"\\\" ></div>\\n                  \").concat(val, \"\\n                </div>\\n              \");\n          }\n        }],\n        list: [],\n        exLoading: false,\n        // 导出loading\n        tbLoading: false,\n        // table loading\n        total: 0,\n        currentPage: 1,\n        pageSize: this.utils.getPersonalSettings().pageSize\n      }\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.fetchData();\n    });\n  },\n  methods: {\n    /**\r\n     * @description: 权限判断\r\n     */\n    promise: function promise(expiration, state, row) {\n      // 本地时间>到期时间 并且 state是未支付状态\n      if (new Date() > new Date(expiration) && state === 0) {\n        return false;\n      }\n\n      return true;\n    },\n    parseServeDate: function parseServeDate(res) {\n      var data = res.data,\n          count = res.count,\n          stateOptions = res.stateOptions,\n          capitalTypeOptions = res.capitalTypeOptions; // 搜索栏数据初始化\n\n      stateOptions.forEach(function (ele) {\n        ele.label = ele.name;\n      }); // 资金形式选项数据转换\n\n      capitalTypeOptions.forEach(function (ele) {\n        ele.label = ele.name;\n      }); // 收款类型选项数据转换\n\n      this.searchData = this.searchData.map(function (item) {\n        item.options = item.name === 'states' ? stateOptions : item.options;\n        item.options = item.name === 'capitalTypes' ? capitalTypeOptions : item.options;\n        return item;\n      }); // 列表数据初始化\n\n      this.table.list = data;\n      this.table.total = count;\n    },\n\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\n    getTable: function getTable() {\n      var currentPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.table.currentPage;\n      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.table.pageSize;\n      var postData = this.getSearchData();\n      console.log(postData);\n      postData.currentPage = currentPage;\n      postData.pageSize = pageSize;\n      console.log('fetchData:请求数据', postData);\n      return (0, _Acceptance.GetAcceptDetailPaging)(postData);\n    },\n    fetchData: function fetchData(type) {\n      var _this2 = this;\n\n      // SearchBar 事件类型 重置:reset  搜索:search\n      switch (type) {\n        case 'filter':\n          this.table.currentPage = 1;\n          break;\n\n        case 'reset':\n        case 'search':\n          this.table.currentPage = 1;\n          this.lastSearch = null;\n          break;\n      }\n\n      this.table.tbLoading = true;\n      this.getTable().then(function (res) {\n        return _this2.parseServeDate(res);\n      }).finally(function () {\n        _this2.table.tbLoading = false;\n      });\n    },\n\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\n    getSearchData: function getSearchData() {\n      var _this3 = this;\n\n      if (this.lastSearch === null) {\n        this.lastSearch = {};\n        this.searchData.forEach(function (item) {\n          var value = item.value,\n              transformType = item.transformType,\n              name = item.name;\n\n          if (transformType === 'property-serial') {\n            value.forEach(function (ele, index) {\n              var serial = index + 1;\n              _this3.lastSearch[name + serial] = ele;\n            });\n          } else {\n            _this3.lastSearch[name] = value;\n          }\n        });\n      }\n\n      return this.lastSearch;\n    },\n\n    /**\r\n     * @description:表格导出功能\r\n     */\n    exportExcel: function () {\n      var _exportExcel = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this4 = this;\n\n        var Excel;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Excel = this.$refs['TableEx'].initExcel();\n                this.getTable(1, this.table.total).then(function (_ref) {\n                  var data = _ref.data;\n                  Excel.format([(0, _objectSpread2.default)((0, _objectSpread2.default)({}, Excel.sheet[0]), {}, {\n                    table: data\n                  })]).export();\n                }).catch(function () {\n                  _this4.$message.error('导出失败');\n\n                  Excel.cancel();\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function exportExcel() {\n        return _exportExcel.apply(this, arguments);\n      }\n\n      return exportExcel;\n    }(),\n\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\n    handleDetails: function handleDetails(row, type) {\n      this.$router.push({\n        name: 'ChengDuiXinXiDetails',\n        query: {\n          id: row.id,\n          type: type,\n          refreshRouterName: this.$route.name\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
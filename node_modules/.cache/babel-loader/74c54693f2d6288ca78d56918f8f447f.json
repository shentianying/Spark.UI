{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\flowAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\flowAdd.vue","mtime":1630736284830},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/typeof\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _flow = require(\"@/api/xtgl/flow\");\n\nvar _addFlowNode = _interopRequireDefault(require(\"./component/addFlowNode\"));\n\nvar _index = require(\"@/utils/index\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'AddFlow',\n  components: {\n    AddFlowNode: _addFlowNode.default\n  },\n  props: {\n    obj: {\n      type: Object,\n      default: null\n    },\n    formObj: {\n      type: Object,\n      default: null\n    },\n    dropDownData: {\n      type: Object,\n      default: null\n    },\n    isCopy: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        name: '',\n        formId: null,\n        // formName: '',\n        remark: '',\n        inUse: true,\n        flowNode: []\n      },\n      list: [],\n      flowStateNode: [],\n      buttonLoading: false,\n      dialogTableVisible: false,\n      currentRow: null,\n      state: 0,\n      // 当前状态\n      index: 0,\n      formStateIndex: 0,\n      formStateId: null,\n      // 查找 特殊操作 option用的\n      rules: {\n        name: [{\n          required: true,\n          message: '必填',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    getObjectValue: function getObjectValue() {\n      return _index.getObjectValue;\n    }\n  },\n  mounted: function mounted() {\n    // console.log('formObj:', this.formObj)\n    this.initData();\n  },\n  methods: {\n    submitForm: function submitForm() {\n      var _this = this;\n\n      this.$refs['ruleForm'].validate(function (valid) {\n        if (valid) {\n          var newObj;\n          var group1;\n\n          var _ret = function () {\n            newObj = JSON.parse(JSON.stringify(_this.ruleForm)); // console.log('newObj:', newObj)\n\n            var flag = [false, ''];\n            var flowNode = [];\n            group1 = 0;\n\n            var _iterator = (0, _createForOfIteratorHelper2.default)(_this.flowStateNode),\n                _step;\n\n            try {\n              var _loop = function _loop() {\n                var s = _step.value;\n\n                // 表单状态循环\n                if (s.isCheckup && s.isFlowNode) {\n                  s.flowNode.forEach(function (e, i) {\n                    // 状态下的节点循环\n                    group1 += 100;\n                    e.forEach(function (e2, i2) {\n                      // 节点下的 审批人 循环\n                      // console.log(`i:${s.flowNode.length - 1},i2:${e.length - 1},e2.maxDays:${e2.maxDays}`)\n                      if (i2 === e.length - 1 && i === s.flowNode.length - 1 && e2.maxDays > 0) {\n                        flag = [true, \"\".concat(s.name, \"-\\u6700\\u540E\\u4E00\\u4E2A\\u8282\\u70B9\\u6700\\u5927\\u5BA1\\u6279\\u65F6\\u95F4\\u5FC5\\u987B\\u7B49\\u4E8E0\\uFF0C\\u5F53\\u524D\\u662F\\uFF1A\").concat(e2.maxDays)];\n                      }\n\n                      flowNode.push({\n                        group: group1,\n                        mode: e2.mode,\n                        option: e2.option,\n                        roleType: e2.roleType,\n                        state: e2.state,\n                        maxDays: e2.maxDays,\n                        roleId: e2.roleId,\n                        grade: e2.grade\n                      });\n                    });\n                  });\n                }\n              };\n\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                _loop();\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            if (flag[0]) {\n              _this.$alert(flag[1]);\n\n              return {\n                v: void 0\n              };\n            }\n\n            newObj.flowNode = flowNode; // console.log('newObj:', newObj)\n            // 复制 操作\n\n            if (_this.obj && _this.isCopy) {\n              _this.buttonLoading = true;\n              delete newObj.id;\n              delete newObj.lastEditDate;\n              delete newObj.lastEditUserId;\n              delete newObj.lastEditUserName;\n              delete newObj.createUserName;\n              delete newObj.createUserId;\n              delete newObj.createUserName;\n              newObj.conditionDescription = '';\n              (0, _flow.addFlow)(newObj).then(function (response) {\n                _this.$message(response.message);\n\n                _this.buttonLoading = false;\n\n                _this.$emit('dialogClose');\n              }).catch(function () {\n                _this.buttonLoading = false;\n              });\n            } // console.log('编辑流程请求对象：', newObj)\n            // return\n\n\n            if (_this.obj && !_this.isCopy) {\n              // 修改\n              _this.buttonLoading = true;\n              (0, _flow.putFlow)(newObj).then(function (response) {\n                _this.$message(response.message);\n\n                _this.buttonLoading = false;\n\n                _this.$emit('dialogClose');\n              }).catch(function () {\n                _this.buttonLoading = false;\n              });\n            } else if (!_this.obj && !_this.isCopy) {\n              // 添加\n              _this.buttonLoading = true;\n              (0, _flow.addFlow)(newObj).then(function (response) {\n                _this.$message(response.message);\n\n                _this.buttonLoading = false;\n\n                _this.$emit('dialogClose');\n              }).catch(function () {\n                _this.buttonLoading = false;\n              });\n            }\n          }();\n\n          if ((0, _typeof2.default)(_ret) === \"object\") return _ret.v;\n        }\n      });\n    },\n    initData: function initData() {\n      var _this2 = this;\n\n      var formStateList = (0, _toConsumableArray2.default)(this.dropDownData.formStateList);\n\n      if (this.obj) {\n        var thisObj = JSON.parse(JSON.stringify(this.obj)); // const formStateList = [...this.dropDownData.formStateList]\n\n        formStateList.forEach(function (e) {\n          if (e.isFlowNode) {\n            var fn = thisObj.flowNode.filter(function (f) {\n              return f.state === e.value;\n            });\n            e.flowNode = _this2.groupBy(fn, function (item) {\n              return [item.group];\n            });\n\n            _this2.flowStateNode.push(e);\n          }\n        });\n        this.ruleForm = thisObj; // 清空\n\n        if (this.isCopy) {\n          this.ruleForm.name = '';\n          this.ruleForm.remark = '';\n        }\n      } else {\n        this.ruleForm.formId = this.formObj.id;\n        formStateList.forEach(function (e) {\n          if (e.isFlowNode) {\n            e.flowNode = [];\n\n            _this2.flowStateNode.push(e);\n          }\n        });\n      }\n    },\n    addNode: function addNode(index2, item1, index1) {\n      this.currentRow = null;\n      this.index = index2;\n      this.state = item1.value;\n      this.formStateId = item1.id;\n      this.formStateIndex = index1;\n      this.dialogTableVisible = true;\n    },\n    editNode: function editNode(item1, index1, item2, index2) {\n      this.currentRow = item2;\n      this.index = index2;\n      this.state = item1.value;\n      this.formStateId = item1.id;\n      this.formStateIndex = index1;\n      this.dialogTableVisible = true;\n    },\n    deleteNode: function deleteNode(index1, index2) {\n      var _this3 = this;\n\n      this.$confirm('确定删除?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this3.flowStateNode[index1].flowNode.splice(index2, 1);\n      }).catch(function () {});\n    },\n    dialogAddClose: function dialogAddClose(data) {\n      var _this4 = this;\n\n      this.dialogTableVisible = false;\n\n      if (data) {\n        data.forEach(function (e) {\n          e.state = _this4.state;\n        });\n        this.flowStateNode[this.formStateIndex].flowNode.splice(this.index, 0, data);\n      }\n    },\n    dialogEditClose: function dialogEditClose(data) {\n      var _this5 = this;\n\n      this.dialogTableVisible = false;\n\n      if (data) {\n        data.forEach(function (e) {\n          e.state = _this5.state;\n        });\n        this.flowStateNode[this.formStateIndex].flowNode.splice(this.index, 1, data);\n      }\n    },\n    groupBy: function groupBy(array, f) {\n      var groups = {};\n      array.forEach(function (o) {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n      });\n      return Object.keys(groups).map(function (group) {\n        return groups[group];\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
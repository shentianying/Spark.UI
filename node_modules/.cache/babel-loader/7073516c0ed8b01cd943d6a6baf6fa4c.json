{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Other\\ywgl\\selectSocialResource.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Other\\ywgl\\selectSocialResource.vue","mtime":1634781212934},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _socialResource = require(\"@/api/ywgl/socialResource\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import { getCurrentCompanyOrgList } from '@/api/xtgl/organization'\n// import { getTree } from '@/utils'\n\n/**\r\n * @description: 本组件提供双向绑定功能，绑定值为id 或 id数组\r\n * @event getCheckedItem 保存时触发的事件 参数为选中项(选项中包括但不限于id)\r\n * @event getAllOptions  初始化列表时触发,获取所有选项(选项中包括但不限于id)\r\n * @function getSelection 该方法可获取所有选中项(选项中包括但不限于id)\r\n */\nvar _default2 = {\n  name: 'SelectSocialResource',\n  components: {},\n  model: {\n    event: 'change',\n    prop: 'value'\n  },\n  props: {\n    value: {\n      type: [Array, String, Number],\n      default: function _default() {\n        return [];\n      }\n    },\n    dialogWidth: {\n      type: String,\n      default: '70%'\n    },\n    // 弹出层的宽度\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    // 默认多选\n    maxItem: {\n      type: Number,\n      default: 3\n    },\n    // 多选最大个数\n    tableColumn: {\n      // 表格渲染的列\n      type: Array,\n      default: function _default() {\n        return [{\n          prop: 'name',\n          label: '姓名',\n          minWidth: '90'\n        }, {\n          prop: 'company',\n          label: '所在单位',\n          minWidth: '120'\n        }, {\n          prop: 'position',\n          label: '职位',\n          minWidth: '90'\n        }];\n      }\n    },\n    selectRules: {\n      // multiple为true时调用multiple验证,反之single,回调参数为this\n      type: Object,\n      default: function _default() {\n        return {\n          single: [{\n            validator: function validator(_ref) {\n              var selectionItem = _ref.selectionItem;\n              return selectionItem.length > 0;\n            },\n            message: '单选只能选一个哦'\n          }],\n          multiple: [{\n            validator: function validator(_ref2) {\n              var maxItem = _ref2.maxItem;\n              return maxItem < 2;\n            },\n            message: '多选模式，maxItem参数必须大于2'\n          }, {\n            validator: function validator(_ref3) {\n              var selectionItem = _ref3.selectionItem,\n                  maxItem = _ref3.maxItem;\n              return selectionItem.length >= maxItem;\n            },\n            message: '多选模式，maxItem参数必须大于2'\n          }]\n        };\n      }\n    },\n    request: {\n      // 请求对象\n      type: Object,\n      default: function _default() {\n        return {\n          fn: _socialResource.GetSocialResourceList,\n          params: [{\n            name: 'name',\n            label: '姓名',\n            component: 'ElInput'\n          }, {\n            name: 'company',\n            label: '所在单位',\n            component: 'ElInput'\n          }, {\n            name: 'position',\n            label: '职位',\n            component: 'ElInput'\n          }]\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      open: false,\n      treeList: null,\n      table: {\n        // 表格数据\n        list: [],\n        loading: false,\n        isInit: false\n      },\n      saveLoading: false,\n      seleArr: [],\n      // 选中的人员数组\n      postData: {},\n      treeProps: {\n        // el-tree  props属性\n        children: 'children',\n        label: 'name'\n      }\n    };\n  },\n  computed: {\n    selectionItem: {\n      set: function set(val) {\n        this.seleArr = val.map(function (_ref4) {\n          var id = _ref4.id;\n          return id;\n        });\n        var data = this.multiple ? this.seleArr : this.seleArr[0];\n        this.$emit('change', data);\n      },\n      get: function get() {\n        var _this = this;\n\n        var data = this.seleArr;\n\n        if (!Array.isArray(this.seleArr)) {\n          if (typeof this.seleArr !== 'number' && !this.seleArr) {\n            data = [];\n          } else {\n            data = [this.seleArr];\n          }\n        }\n\n        data = data.map(function (id) {\n          return _this.table.list.find(function (f) {\n            return f.id.toString() === id.toString();\n          }) || id;\n        });\n        return data;\n      }\n    }\n  },\n  watch: {\n    'request.params': {\n      handler: function handler(val) {\n        var _this2 = this;\n\n        val.forEach(function (_ref5) {\n          var name = _ref5.name;\n\n          _this2.$set(_this2.postData, name, '');\n        });\n      },\n      deep: true,\n      immediate: true\n    },\n    'value': {\n      immediate: true,\n      deep: true,\n      handler: function handler(val) {\n        this.seleArr = val;\n      }\n    }\n  },\n  created: function created() {\n    this.fetchData();\n  },\n  methods: {\n    getSelection: function getSelection() {\n      return this.selectionItem;\n    },\n    openDialog: function openDialog() {\n      // 清空数据\n      this.table.isInit = false; // this.selectionItem = []\n      // this.table.list = []\n      // this.searchText = ''\n\n      this.fetchData();\n      this.open = true;\n    },\n    // getTreeList() {\n    //   this.saveLoading = true\n    //   getCurrentCompanyOrgList().then(res => {\n    //     const { data } = res\n    //     this.treeList = getTree(0, data)\n    //   }).finally(() => { this.saveLoading = false })\n    // },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    },\n    test: function test() {\n      var _this3 = this;\n\n      // 增加选项前检验\n      var rules = this.multiple ? this.selectRules.multiple : this.selectRules.single;\n      var errItem = rules.find(function (_ref6) {\n        var validator = _ref6.validator;\n        return validator(_this3);\n      });\n\n      if (errItem) {\n        this.$alert(errItem.message);\n        return false;\n      }\n\n      return true;\n    },\n    add: function add(row) {\n      if (!this.test()) {\n        return;\n      }\n\n      this.selectionItem = [].concat((0, _toConsumableArray2.default)(this.selectionItem), [row]);\n      this.save();\n    },\n    handleNodeClick: function handleNodeClick(data, node) {\n      this.fetchData({\n        orgId: data.id\n      }); // // 如果是叶子节点，就查找信息\n      // if (node.isLeaf) {\n      //   this.fetchData({ orgId: data.id })\n      // } else {\n      //   // this.$alert('选中的必须是最后的节点')\n      // }\n    },\n    tagClose: function tagClose(uid) {\n      this.selectionItem = this.selectionItem.filter(function (f) {\n        return f.id !== uid;\n      });\n    },\n    fetchData: function fetchData() {\n      var _this4 = this;\n\n      var postData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.request.fn(postData).then(function (res) {\n        if (!_this4.table.isInit) {\n          _this4.table.isInit = true;\n\n          _this4.$emit('getAllOptions', res.data);\n        }\n\n        _this4.table.list = res.data;\n        _this4.saveLoading = false;\n      }).catch(function () {\n        _this4.saveLoading = false;\n      });\n    },\n    search: function search() {\n      var _this5 = this;\n\n      this.saveLoading = true;\n      setTimeout(function () {\n        _this5.fetchData(_this5.postData);\n      }, 700);\n    },\n    save: function save() {\n      var _this6 = this;\n\n      this.saveLoading = true; // 触发父组件的事件\n\n      setTimeout(function () {\n        _this6.$emit('getCheckedItem', _this6.selectionItem);\n\n        _this6.saveLoading = false;\n        _this6.open = false;\n      }, 300);\n    }\n  }\n};\nexports.default = _default2;",null]}
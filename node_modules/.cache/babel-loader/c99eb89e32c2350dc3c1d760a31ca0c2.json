{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-resize-sensor\\src\\resize-sensor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-resize-sensor\\src\\resize-sensor.vue","mtime":1509913592000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = {\n  // thanks to https://github.com/marcj/css-element-queries\n  props: {\n    initial: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      size: {\n        width: -1,\n        height: -1\n      }\n    };\n  },\n  methods: {\n    reset: function reset() {\n      var expand = this.$el.firstChild;\n      var shrink = this.$el.lastChild;\n      expand.scrollLeft = 100000;\n      expand.scrollTop = 100000;\n      shrink.scrollLeft = 100000;\n      shrink.scrollTop = 100000;\n    },\n    update: function update() {\n      this.size.width = this.$el.offsetWidth;\n      this.size.height = this.$el.offsetHeight;\n    }\n  },\n  watch: {\n    size: {\n      deep: true,\n      handler: function handler(size) {\n        this.reset();\n        this.$emit('resize', {\n          width: this.size.width,\n          height: this.size.height\n        });\n      }\n    }\n  },\n  render: function render(create) {\n    var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n    var styleChild = 'position: absolute; left: 0; top: 0;';\n    return create('div', {\n      style: style + 'animation-name: resizeSensorVisibility;',\n      on: {\n        '~animationstart': this.update\n      }\n    }, [create('div', {\n      style: style,\n      on: {\n        scroll: this.update\n      }\n    }, [create('div', {\n      style: styleChild + 'width: 100000px; height: 100000px;'\n    })]), create('div', {\n      style: style,\n      on: {\n        scroll: this.update\n      }\n    }, [create('div', {\n      style: styleChild + 'width: 200%; height: 200%;'\n    })])]);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$emit('resize', {\n      width: 0,\n      height: 0\n    });\n    this.$emit('resizeSensorBeforeDestroy');\n  },\n  mounted: function mounted() {\n    if (this.initial === true) this.$nextTick(this.update);\n    if (this.$el.offsetParent !== this.$el.parentNode) this.$el.parentNode.style.position = 'relative';\n\n    if ('attachEvent' in this.$el && !('AnimationEvent' in window)) {\n      var onresizeHandler = function () {\n        this.update();\n        removeOnresizeEvent();\n      }.bind(this);\n\n      var removeOnresizeEvent = function () {\n        this.$el.detachEvent('onresize', onresizeHandler);\n        this.$off('resizeSensorBeforeDestroy', removeOnresizeEvent);\n      }.bind(this);\n\n      this.$el.attachEvent('onresize', onresizeHandler);\n      this.$on('resizeSensorBeforeDestroy', removeOnresizeEvent);\n      this.reset();\n    }\n  }\n};\nexports.default = _default;",null]}
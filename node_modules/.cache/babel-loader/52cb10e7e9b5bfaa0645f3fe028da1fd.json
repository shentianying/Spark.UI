{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\ywgl\\khgl\\customerEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\ywgl\\khgl\\customerEdit.vue","mtime":1628919709376},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _customer = require(\"@/api/ywgl/customer\");\n\nvar _dictionary = require(\"@/api/xtgl/dictionary\");\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'CustomerEdit',\n  components: {\n    UpFile: _UpFile.default\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        name: '',\n        customerType: null,\n        companyId: this.$store.state.user.selectOrgId,\n        legalPerson: '',\n        linkMan: '',\n        linkManTel: '',\n        linkManPosition: '',\n        linkManChiefArea: '',\n        capitalSource: '',\n        capital: 0,\n        companyPhone: '',\n        address: '',\n        email: '',\n        mainBusiness: '',\n        remark: '',\n        inUse: true,\n        upFile: [],\n        fileList: []\n      },\n      customerTypeList: [],\n      // 客户类别列表\n      buttonLoading: false,\n      refreshRouterName: '',\n      rules: {\n        name: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        legalPerson: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        linkMan: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        linkManTel: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        customerType: [{\n          required: true,\n          message: '不能为空',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  activated: function activated() {\n    if (this.$route.query.id) {\n      this.fetchData();\n      this.refreshRouterName = this.$route.params.refreshRouterName;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    (0, _dictionary.getDictionarysByTypes)({\n      types: 'customerType'\n    }).then(function (response) {\n      var data = response.data; // 1.客户类型下拉列表\n\n      _this.customerTypeList = data;\n    });\n  },\n  methods: {\n    submitForm: function submitForm(formName) {\n      var _this2 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var postData = JSON.parse(JSON.stringify(_this2.ruleForm));\n          console.log(postData);\n          var tempIds = [];\n\n          if (postData.upFile.length) {\n            tempIds = postData.upFile.map(function (m) {\n              return {\n                id: m.id,\n                addFlag: m.addFlag\n              };\n            });\n          }\n\n          postData.fileList = tempIds;\n\n          if (_this2.$route.query.id) {\n            _this2.buttonLoading = true;\n            (0, _customer.putCustomer)(postData).then(function (response) {\n              _this2.$message(response.message);\n\n              _this2.buttonLoading = false;\n\n              _this2.closeThePage();\n            }).catch(function () {\n              _this2.buttonLoading = false;\n            });\n          } else {\n            _this2.buttonLoading = true;\n            (0, _customer.addCustomer)(postData).then(function (response) {\n              _this2.$message(response.message);\n\n              _this2.buttonLoading = false;\n\n              _this2.closeThePage();\n            }).catch(function () {\n              _this2.buttonLoading = false;\n            });\n          }\n        }\n      });\n    },\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.$route.query.id !== 0)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return (0, _customer.getCustomerById)({\n                  id: this.$route.query.id\n                }).then(function (response) {\n                  var data = response.data;\n                  _this3.ruleForm = data;\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    }\n  }\n};\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\paid\\paidEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\paid\\paidEdit.vue","mtime":1628756195065},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _paid = require(\"@/api/cggl/paid\");\n\nvar _index = _interopRequireDefault(require(\"@/components/OrgSelect/index2\"));\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\nvar _flowSelect = _interopRequireDefault(require(\"@/components/Flow/flowSelect\"));\n\nvar _flowDisplay = _interopRequireDefault(require(\"@/components/Flow/flowDisplay\"));\n\nvar _flowAttitude = _interopRequireDefault(require(\"@/components/Flow/flowAttitude\"));\n\nvar _quotationSuppliersCheck = _interopRequireDefault(require(\"@/views/cggl/quotation/quotationSuppliersCheck\"));\n\nvar _contractCheck = _interopRequireDefault(require(\"@/views/cggl/contract/contractCheck\"));\n\nvar _dictionary = require(\"@/api/xtgl/dictionary\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'PaidEdit',\n  components: {\n    OrgSelect2: _index.default,\n    UpFile: _UpFile.default,\n    FlowSelect: _flowSelect.default,\n    FlowDisplay: _flowDisplay.default,\n    FlowAttitude: _flowAttitude.default,\n    QuotationSuppliersCheck: _quotationSuppliersCheck.default,\n    ContractCheck: _contractCheck.default\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        id: 0,\n        number: '',\n        contractNumber: null,\n        orgId: null,\n        fileList: [],\n        contract: {},\n        dues: 0,\n        paid: 0,\n        receipt: 0,\n        applyAmount: 0,\n        attitudeAmount: 0\n      },\n      loading: false,\n      activate: true,\n      active: 0,\n      dialogTableVisible: false,\n      dialogTitle: '保存',\n      dialogWidth: '70%',\n      comName: 'PlanDetailAdd',\n      currentRow: null,\n      list: [],\n      payModes: [],\n      payModeOptions: [],\n      keyPayMode: 0,\n      billFlow: null,\n      attitudePara: null,\n      loadFlow: false,\n      orgKey: 0,\n      fileListKey: 0,\n      disabled: false,\n      rules: {\n        orgId: [{\n          required: true,\n          message: '请选择',\n          trigger: 'blur'\n        }],\n        contractNumber: [{\n          required: true,\n          message: '请选择',\n          trigger: 'blur'\n        }] // applyAmount: [{ required: true, message: '请输入', trigger: 'blur' }],\n        // breachDuty: [{ required: true, message: '请输入', trigger: 'blur' }],\n        // attitudeAmount: [{ required: true, message: '请输入', trigger: 'blur' }]\n\n      }\n    };\n  },\n  watch: {\n    'ruleForm.applyAmount': {\n      handler: function handler(value, oldvalue) {\n        if (value > this.ruleForm.dues - this.ruleForm.paid) {\n          this.$message.error('超出可申请金额范围！');\n        }\n      },\n      deep: true\n    }\n  },\n  activated: function activated() {\n    this.initData();\n  },\n  mounted: function mounted() {},\n  methods: {\n    // 根据表单获取流程\n    getDynamicFlow: function getDynamicFlow() {\n      var _this = this;\n\n      this.$refs['ruleForm'].validate(function (valid) {\n        if (valid) {\n          _this.loading = true;\n          var newObj = JSON.parse(JSON.stringify(_this.ruleForm));\n          var postData = {};\n          postData.number = newObj.number;\n          postData.contractId = newObj.contract.id;\n          postData.orgId = newObj.orgId;\n          postData.dues = newObj.dues;\n          postData.paid = newObj.paid;\n          postData.receipt = newObj.receipt;\n          postData.applyAmount = newObj.applyAmount;\n          postData.attitudeAmount = newObj.attitudeAmount;\n          postData.billFlowId = newObj.billFlowId;\n          _this.pay;\n          var pom = [];\n          var errorMessage = '';\n\n          _this.payModes.forEach(function (e) {\n            if (e.payMode === '' || !e.payMode) {\n              errorMessage = '请选择付款方式';\n            }\n\n            pom.push({\n              payMode: e.payMode,\n              amount: e.amount,\n              remark: e.remark\n            });\n          });\n\n          if (_this.payModes.length === 0) {\n            errorMessage = '请添加付款方式';\n          }\n\n          postData.fileList = newObj.fileList;\n          postData.cGPaidDetails = pom;\n\n          if (_this.id) {\n            postData.id = _this.id;\n          }\n\n          if (errorMessage !== '') {\n            _this.$message.error(errorMessage);\n\n            _this.loading = false;\n          } else if (newObj.applyAmount > newObj.dues - newObj.paid) {\n            _this.$message.error('超出可申请金额范围！');\n\n            _this.loading = false;\n          } else {\n            (0, _paid.getBillFlow)(postData).then(function (response) {\n              _this.loading = false;\n\n              if (response.success) {\n                _this.billFlow = response.data.billFlow;\n                _this.active = 1;\n              } else {\n                _this.$message(response.message);\n              }\n            }).catch(function () {\n              _this.loading = false;\n            });\n          }\n        }\n      });\n    },\n    submitForm: function submitForm(state) {\n      var _this2 = this;\n\n      this.$refs['ruleForm'].validate(function (valid) {\n        if (valid) {\n          _this2.ruleForm.state = state;\n          _this2.loading = true;\n          var newObj = JSON.parse(JSON.stringify(_this2.ruleForm));\n          var postData = {};\n          postData.contractId = newObj.contract.id;\n          postData.orgId = newObj.orgId;\n          postData.dues = newObj.dues;\n          postData.paid = newObj.paid;\n          postData.receipt = newObj.receipt;\n          postData.applyAmount = newObj.applyAmount;\n          postData.attitudeAmount = newObj.attitudeAmount;\n          var pom = [];\n\n          _this2.payModes.forEach(function (e) {\n            if (e.payMode === '') {\n              _this2.$message.error('请选择付款方式');\n\n              return false;\n            }\n\n            pom.push({\n              payMode: e.payMode,\n              amount: e.amount,\n              remark: e.remark\n            });\n          });\n\n          postData.fileList = newObj.fileList;\n          postData.state = state;\n          postData.cGPaidDetails = pom; // 获取流程组件中的数据\n\n          if (state === 1) {\n            // 如果是提交，验证流程人员的完整信息\n            var checkBillFlow = _this2.$refs.flowSelect.checkBillFlow();\n\n            if (!checkBillFlow) {\n              _this2.$message('流程错误，流程中审批人员不能为空');\n\n              return false;\n            }\n          }\n\n          var billFlow = _this2.$refs.flowSelect.getBillFlow();\n\n          console.log('获取的billFlow:', billFlow);\n          _this2.ruleForm.billFlow = billFlow;\n          postData.billFlow = billFlow;\n\n          if (_this2.id) {\n            postData.id = _this2.id;\n            (0, _paid.putCGPaid)(postData).then(function (response) {\n              _this2.closeThePage();\n            });\n          } else {\n            postData.id = 0;\n            (0, _paid.addCGPaid)(postData).then(function (response) {\n              _this2.closeThePage();\n            });\n          }\n        }\n      });\n    },\n    previous: function previous() {\n      // 上一步\n      this.active = 0;\n      this.billFlow = null;\n    },\n    initData: function () {\n      var _initData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                (0, _dictionary.getDictionarysByTypes)({\n                  types: 'payMode'\n                }).then(function (response) {\n                  var data = response.data;\n                  data.forEach(function (element) {\n                    element.pid = element.pId;\n\n                    _this3.payModeOptions.push(element);\n                  });\n                  _this3.keyPayMode += 1;\n                }); // 有参数id 就是编辑\n\n                if (this.$route.query.id) {\n                  this.id = this.$route.query.id;\n                }\n\n                if (!this.id) {\n                  _context.next = 7;\n                  break;\n                }\n\n                this.loading = true;\n                this.activate = false; // 销毁部门组件\n\n                _context.next = 7;\n                return (0, _paid.getCGPaidById)({\n                  id: this.id\n                }).then(function (response) {\n                  return _this3.setData(response);\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }(),\n    setData: function setData(response) {\n      var data = response.data;\n      this.ruleForm = data;\n      this.ruleForm.fileList = data.upFile;\n      this.ruleForm.contractNumber = data.contract.number;\n      this.orgKey++; // 重新加载项目组件\n\n      this.fileListKey++; // 重新加载文件组件\n      // 填充 明细列表\n\n      this.payModes = data.cgPaidDetails;\n      this.keyPayMode++; // 重新加载付款方式组件\n\n      this.loading = false; // loading 状态关闭\n\n      this.activate = true; // 加载部门组件\n    },\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    },\n    dialogClose: function dialogClose(data, state) {\n      var _this4 = this;\n\n      if (state === 'checkContract') {\n        this.ruleForm.contract = data;\n        this.ruleForm.contractNumber = data.number;\n        (0, _paid.getPaidAmount)({\n          contractId: data.id\n        }).then(function (response) {\n          var dues = response.dues,\n              paid = response.paid,\n              receipt = response.receipt;\n          _this4.ruleForm.dues = dues;\n          _this4.ruleForm.paid = paid;\n          _this4.ruleForm.receipt = receipt;\n        });\n      }\n\n      this.dialogTableVisible = false;\n    },\n    cancel: function cancel() {\n      var _this5 = this;\n\n      // 作废\n      this.$confirm('作废以后将无法编辑，是否确定作废？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this5.loading = true;\n        (0, _paid.deleteCGPaid)({\n          id: _this5.ruleForm.id\n        }).then(function (response) {\n          _this5.$message(response.message);\n\n          _this5.loading = false;\n\n          _this5.closeThePage();\n        });\n      }).catch(function () {});\n    },\n    openContract: function openContract(id) {\n      this.$router.push({\n        name: 'ContractAttitude',\n        query: {\n          id: id,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: id\n        }\n      });\n    },\n    // openSupplier(id) {\n    //   this.$router.push({ name: 'SupplierDetail', query: { id: id, refreshRouterName: this.$route.name }, params: { id: id }})\n    // },\n    handleChange: function handleChange() {//\n    },\n    add: function add() {\n      var pom = {\n        payMode: null,\n        amount: null,\n        remark: ''\n      };\n      this.payModes.push(pom);\n    },\n    del: function del(d) {\n      // 列表删除\n      this.payModes.splice(d.$index, 1);\n    },\n    checkContract: function checkContract() {\n      this.dialogTitle = '选择合同';\n      this.comName = 'ContractCheck';\n      this.currentRow = null;\n      this.dialogWidth = '100%';\n      this.fileList = [];\n      this.dialogTableVisible = true;\n    },\n    getSummaries: function getSummaries(param) {\n      var columns = param.columns,\n          data = param.data;\n      var sums = [];\n      columns.forEach(function (column, index) {\n        if (index === 0) {\n          sums[index] = '合计';\n          return;\n        }\n\n        var values = data.map(function (item) {\n          return Number(item[column.property]);\n        });\n\n        if (!values.every(function (value) {\n          return isNaN(value);\n        })) {\n          sums[index] = values.reduce(function (prev, curr) {\n            var value = curr;\n\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0); // sums[index] += ' 元'\n        } else {\n          sums[index] = '';\n        }\n      });\n      sums[1] = Number(sums[1]).toFixed(4);\n      this.ruleForm.applyAmount = sums[1];\n      this.ruleForm.attitudeAmount = sums[1];\n      return sums;\n    }\n  }\n};\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\OrgSelect\\index2.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\OrgSelect\\index2.vue","mtime":1624071363285},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _role = require(\"@/api/xtgl/role\");\n\nvar _index = require(\"@/utils/index\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'TreeselectComponent',\n  components: {},\n  model: {\n    prop: 'selectValue',\n    // 指向props的参数名\n    event: 'change' // 事件名称\n\n  },\n  props: {\n    selectValue: {\n      type: [String, Number, Array],\n      default: null\n    },\n    // 获取你选中的值，传出去的v-model的值\n    selectData: {\n      type: [Array, Number],\n      default: null\n    },\n    // 初始化选中的数据\n    // 组件参数\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    // 已选中的选项的Tag，是否折叠显示\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    checkStrictly: {\n      type: Boolean,\n      default: false\n    },\n    // 是否严格的遵守父子节点不互相关联\n    expandTrigger: {\n      type: String,\n      default: 'click'\n    },\n    // click / hover\n    propsValue: {\n      type: String,\n      default: 'id'\n    },\n    // 绑定的字段值\n    propsLabel: {\n      type: String,\n      default: 'name'\n    },\n    // 绑定的文本\n    size: {\n      type: String,\n      default: 'mini'\n    },\n    // 可选值：medium / small / mini\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    // 搜索功能\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    // 输入框占位文本\n    separator: {\n      type: String,\n      default: '/'\n    },\n    // 选项分隔符\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    // 输入框中是否显示选中值的完整路径\n    options: {\n      type: Array,\n      default: null\n    },\n    // 可选项数据源，键名可通过 Props 属性配置\n    selectStyle: {\n      type: String,\n      default: 'width:100%'\n    },\n    // 样式\n    // showRootNode: { type: Boolean, default: false }, // 是否显示根节点\n    dataMode: {\n      type: Number,\n      default: 0\n    } // 数据默认显示方式 0：全部显示，1：根据自己的权限显示\n\n  },\n  data: function data() {\n    return {\n      modelValue: this.selectValue,\n      list: [],\n      props: {\n        expandTrigge: 'click',\n        // 触发方式 click hover\n        multiple: false,\n        // 是否多选\n        checkStrictly: false,\n        // 是否严格的遵守父子节点不互相关联\n        emitPath: true,\n        // 在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置false，则只返回该节点的值\n        lazy: false,\n        //\t是否动态加载子节点，需与 lazyLoad 方法结合使用\n        lazyLoad: function lazyLoad(node, resolve) {\n          resolve;\n        },\n        // 加载动态数据的方法，仅在 lazy 为 true 时有效 ---- function(node, resolve)，node为当前点击的节点，resolve为数据加载完成的回调(必须调用)\n        value: 'id',\n        // 指定选项标签为选项对象的某个属性值\n        label: 'name',\n        // 指定选项标签为选项对象的某个属性值\n        children: 'children',\n        // 指定选项的子选项为选项对象的某个属性值\n        disabled: 'disabled',\n        // 指定选项标签为选项对象的某个属性值\n        leaf: 'leaf' // 指定选项的叶子节点的标志位为选项对象的某个属性值\n\n      },\n      orgList: [],\n      rootNode: [{\n        id: 0,\n        pid: 0,\n        name: '根节点',\n        value: 0\n      }] // 根节点\n\n    };\n  },\n  watch: {\n    modelValue: function modelValue(value) {\n      value = value || [];\n\n      if (this.multiple) {\n        // 多选\n        this.$emit('change', value.map(function (m) {\n          return m[m.length - 1];\n        }));\n      } else {\n        // 单选\n        this.$emit('change', value[value.length - 1]);\n      }\n    }\n  },\n  created: function created() {\n    this.props.multiple = this.multiple;\n    this.props.checkStrictly = this.checkStrictly;\n    this.props.expandTrigger = this.expandTrigger;\n    this.props.value = this.propsValue;\n    this.props.label = this.propsLabel; // console.log('传过来的选中的值：', this.selectData)\n  },\n  mounted: function mounted() {\n    if (this.options) {\n      this.orgList = this.options;\n      this.list = (0, _index.getTree)(0, (0, _toConsumableArray2.default)(this.orgList)); // console.log('this.list:', this.list)\n\n      if (this.selectData) {\n        this.modelValue = this.filterParentNodes(this.selectData); // console.log('解析出来的值', this.modelValue)\n      }\n    } else {\n      this.fetchData();\n    }\n  },\n  methods: {\n    getCategoryInfo: function getCategoryInfo() {},\n    fetchData: function fetchData() {\n      var _this = this;\n\n      (0, _role.getCurrentUserOrg)().then(function (response) {\n        var data = response.data,\n            currentOrgList = response.currentOrgList;\n        _this.orgList = currentOrgList; // 当前公司的所有组织机构list\n\n        if (!data) return;\n\n        if (_this.dataMode === 0) {\n          _this.list = (0, _index.toTree)(currentOrgList);\n        } else if (_this.dataMode === 1) {\n          var org = _this.processData((0, _toConsumableArray2.default)(data), currentOrgList);\n\n          _this.list = (0, _index.toTree)(org);\n        }\n\n        if (_this.selectData) {\n          _this.modelValue = _this.filterParentNodes(_this.selectData);\n        }\n      });\n    },\n    // 根据 arr 找到每项所有对应的所有父节点的数组 =>匹配组件数据格式 如：arr=[19] 返回 [[2, 3, 8, 19]]\n    filterParentNodes: function filterParentNodes(arr) {\n      var _this2 = this;\n\n      if (!this.multiple) {\n        arr = [arr];\n      }\n\n      var result = [];\n      arr.forEach(function (e) {\n        var idArr = (0, _index.findPNode)(_this2.orgList, e).map(function (m) {\n          return m.id;\n        }).reverse();\n\n        if (_this2.multiple) {\n          if (idArr.length > 0) {\n            result.push(idArr);\n          }\n        } else {\n          result = idArr;\n        }\n      });\n      return result;\n    },\n    // toTree(data) {\n    //   const result = []\n    //   if (!Array.isArray(data)) {\n    //     return result\n    //   }\n    //   data.forEach(item => {\n    //     delete item.children\n    //   })\n    //   const map = {}\n    //   data.forEach(item => {\n    //     map[item.id] = item\n    //   })\n    //   data.forEach(item => {\n    //     const parent = map[item.pid]\n    //     if (parent) {\n    //       (parent.children || (parent.children = [])).push(item)\n    //     } else {\n    //       result.push(item)\n    //     }\n    //   })\n    //   return result\n    // },\n    getChildrenNodes: function getChildrenNodes(data, arr) {\n      var _this3 = this;\n\n      if (data.children) {\n        data.children.forEach(function (element) {\n          arr.push(element.id);\n\n          if (element.children) {\n            _this3.getChildrenNodes(element, arr);\n          }\n        });\n      }\n\n      return arr;\n    },\n    processData: function processData(userOrgList, currentOrgList) {\n      currentOrgList.forEach(function (e) {\n        e.disabled = !userOrgList.find(function (f) {\n          return f.id === e.id;\n        });\n      });\n      return currentOrgList;\n    } // ,\n    // addRootNode() {\n    //   // 添加根节点\n    //   if (this.showRootNode) {\n    //     // 根节点下面有数据，就添加children\n    //     // if (this.listTemp.length) { this.rootNode[0].children = this.listTemp }\n    //     this.rootNode[0].children = this.list\n    //     // 没数据，就只显示一个根节点\n    //     this.list = this.rootNode\n    //   }\n    // }\n\n  }\n};\nexports.default = _default;",null]}
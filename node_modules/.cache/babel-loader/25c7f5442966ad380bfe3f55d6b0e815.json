{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\rsgl\\rygl\\personEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\rsgl\\rygl\\personEdit.vue","mtime":1634202153942},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _person = require(\"@/api/rsgl/person\");\n\nvar _postPool = require(\"@/api/rsgl/postPool\");\n\nvar _index = _interopRequireDefault(require(\"@/components/OrgSelect/index2\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import { getTree } from '@/utils/index'\nvar _default = {\n  name: 'UserInfo',\n  components: {\n    OrgSelect2: _index.default\n  },\n  props: {\n    id: {\n      type: Number,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        name: '',\n        number: '',\n        companyId: this.$store.state.user.selectOrgId,\n        organizationId: null,\n        postId: null,\n        personTypeID: null,\n        inUse: true,\n        isUser: true,\n        isConfirmAccount: false,\n        idType: '',\n        idNumber: '',\n        phoneNumber: '',\n        idAddress: '',\n        homeAddres: '',\n        gender: '',\n        nation: '',\n        birthDate: null,\n        expirationDate: '2099-12-31',\n        remark: ''\n      },\n      postForm: {\n        personId: null,\n        postId: 0,\n        orgId: null,\n        postPoolDetailId: null,\n        roleId: null,\n        positionId: null,\n        isMain: true,\n        inUse: true\n      },\n      personId: 0,\n      orgList: [],\n      // 所有的组织机构数据\n      companyList: [],\n      // 过滤出的公司信息数据\n      postList: [],\n      idTypeList: [],\n      // 证件类型列表\n      personTypeList: [],\n      // 员工类型列表\n      bankList: [],\n      // 开户行列表\n      changeFlag: false,\n      buttonLoading: false,\n      refreshRouterName: '',\n      loadOrg: false,\n      rules: {\n        name: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        number: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        companyId: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        idType: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'change'\n        }],\n        personTypeID: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'change'\n        }],\n        organizationId: [{\n          required: true,\n          message: '不能为空',\n          trigger: ['blur', 'change']\n        }],\n        postId: [{\n          required: true,\n          message: '不能为空',\n          trigger: ['blur', 'change']\n        }],\n        expirationDate: [{\n          required: true,\n          type: 'string',\n          message: '不能为空',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    // this.fetchData()\n    this.initData();\n\n    if (this.$route.query.id) {\n      this.personId = this.$route.query.id;\n      this.fetchData();\n      this.refreshRouterName = this.$route.params.refreshRouterName;\n    } else {\n      this.$refs['ruleForm'].resetFields();\n      this.loadOrg = true;\n    }\n  },\n  activated: function activated() {// this.initData()\n    // if (this.$route.query.id) {\n    //   this.personId = this.$route.query.id\n    //   this.fetchData()\n    //   this.refreshRouterName = this.$route.params.refreshRouterName\n    // } else {\n    //   this.$refs['ruleForm'].resetFields()\n    //   this.loadOrg = true\n    //   // this.userOrg = []\n    // }\n  },\n  methods: {\n    submitForm: function submitForm(formName) {\n      var _this = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var postData = JSON.parse(JSON.stringify(_this.ruleForm));\n          postData.personTypeID = Number(postData.personTypeID);\n          postData.idType = postData.idType + ''; // const uo = []\n          // this.userOrg.forEach(ele => {\n          //   const pNodes = findPNode(this.orgList, ele)\n          //   // 取最大父节点\n          //   const pNode = pNodes.find(f => f.pid === 0)\n          //   uo.push({ userId: this.$route.query.id, companyId: pNode.id, organizationId: ele })\n          // })\n          // postData.userOrgList = uo\n\n          if (_this.$route.query.id !== 0) {\n            _this.buttonLoading = true;\n            (0, _person.putPerson)(postData) // putPerson({ person: postData, userOrgList: uo })\n            .then(function (response) {\n              _this.$message(response.message);\n\n              _this.buttonLoading = false;\n\n              _this.$emit('dialogClose');\n            }).catch(function () {\n              _this.buttonLoading = false;\n            });\n          }\n\n          if (_this.$route.query.id === 0) {\n            _this.buttonLoading = true;\n            console.log(postData); // postData.passWord = this.ruleForm.passWord\n\n            (0, _person.addPerson)(postData).then(function (response) {\n              _this.$message(response.message);\n\n              _this.personId = response.data;\n              _this.buttonLoading = false;\n\n              _this.$emit('dialogClose');\n            }).catch(function () {\n              _this.buttonLoading = false;\n            });\n          }\n        }\n      }); // this.$refs.child.submitForm()\n    },\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.$route.query.id !== 0)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return (0, _person.getPersonById)({\n                  id: this.$route.query.id\n                }).then(function (response) {\n                  var data = response.data,\n                      data1 = response.data1,\n                      data6 = response.data6;\n                  _this2.postList = data6;\n                  _this2.ruleForm = data;\n                  _this2.userOrg = data1;\n                  _this2.ruleForm.idType = Number(_this2.ruleForm.idType);\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n    initData: function () {\n      var _initData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _person.getPersonEditInit)({\n                  companyId: this.ruleForm.companyId\n                }).then(function (response) {\n                  var data3 = response.data3,\n                      data4 = response.data4,\n                      data5 = response.data5; // 1.岗位数据列表\n                  // this.postList = data1\n                  // 2.组织机构列表\n                  // data2.forEach((ele) => {\n                  //   ele.label = ele.name\n                  //   // ele.isDisabled = !ele.optional\n                  // })\n                  // this.orgList = data2\n                  // const treedata1 = getTree(0, this.orgList)\n                  // this.treeList = treedata1.filter(f => f.id === this.ruleForm.companyId)\n                  // 3.员工类型下拉数据\n\n                  _this3.personTypeList = data3; // 4.证件类型下拉数据\n\n                  _this3.idTypeList = data4;\n                  _this3.bankList = data5;\n                  _this3.loadOrg = true;\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }(),\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    },\n    getPostList: function getPostList(setVal) {\n      var _this4 = this;\n\n      (0, _postPool.getPostListByOrgId)({\n        id: setVal\n      }).then(function (response) {\n        var data = response.data;\n        _this4.postList = data;\n      });\n    },\n    orgChange: function orgChange(val) {\n      if (this.changeFlag) {\n        if (val) {\n          this.ruleForm.postId = null;\n          this.getPostList(val);\n        }\n      } else {\n        this.changeFlag = true;\n      }\n    },\n    editPersonPost: function editPersonPost() {\n      this.$router.push({\n        name: 'PersonPostEdit',\n        query: {\n          id: this.personId,\n          refreshRouterName: 'PersonPost'\n        },\n        params: {\n          id: this.personId\n        }\n      });\n    },\n    editRange: function editRange() {\n      this.$router.push({\n        name: 'UserFrame',\n        query: {\n          id: this.personId,\n          refreshRouterName: 'Person',\n          tab: 'userOrg',\n          showTag: 0\n        },\n        params: {\n          id: this.personId\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\index.vue","mtime":1634781212939},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _index = _interopRequireDefault(require(\"./MyInput/index.js\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default3 = {\n  name: 'SearchBar',\n  components: {\n    MyInput: _index.default\n  },\n  model: {\n    event: 'change',\n    prop: 'data'\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        // 该属性用于遍历表单组件\n        return [\n          /*  示例\r\n          {\r\n            name:'id',//属性名，当调用handleSearch事件时将返回一个对象该值作为属性名\r\n            value:'1',//属性值，当调用handleSearch事件时将返回一个对象该值作为属性值\r\n            defaultValue: '1', //默认值,当重置时会被设置成该值(废弃)\r\n            component:'Input',//form组件类型,根据该值判断使用什么组件\r\n            isMain:true, //默认显示，否则展开时展示\r\n              //-------------以下当component为Select时有效---------------//\r\n            multiple:false,\r\n            checkStrictly:true,\r\n            options:[ //用于遍历el-option，Option Attributes具体请参考element ui\r\n              {\r\n                label:'',\r\n                value\r\n              }\r\n            ],\r\n              //-------------以下当component为DatePicker时有效---------------//\r\n            dateType:'daterange',  //对应DatePicker的type\r\n            valueFormat: 'yyyy-MM-dd HH:mm:ss', //对应DatePicker的value-format\r\n            //-------------以下为Form-Item Attributes具体请参考element ui-------------//\r\n            label:'',\r\n            placeholder:'',\r\n            labelWidth:0px,\r\n            required：false,\r\n            rules:[]\r\n          }\r\n          */\n        ];\n      }\n    },\n    width: {\n      type: String,\n      default: '14vw'\n    },\n    // 每个组件的宽度\n    size: {\n      type: String,\n      default: 'mini'\n    },\n    // 所有组件大小\n    labelWidth: {\n      type: String,\n      default: '68px'\n    },\n    // 作用与element ui form组件一致，请参考element ui\n    search: {\n      type: Function,\n      default: function () {\n        var _default2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function _default() {\n          return _default2.apply(this, arguments);\n        }\n\n        return _default;\n      }()\n    },\n    // 回调函数\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 查询按钮的loading(使用sync绑定时会在回调函数search触发前后修改该值)\n    showToggle: {\n      type: Boolean,\n      default: true\n    } // 是否显示“展开”和“收起\" 切换按钮\n\n  },\n  data: function data() {\n    return {\n      showMore: false,\n      loadingType: 'search' // backups: null\n\n    };\n  },\n  computed: {\n    searchData: {\n      get: function get() {\n        var obj = {};\n        var main = [];\n        var auxiliary = [];\n        this.data.forEach(function (item) {\n          var name = item.name,\n              value = item.value,\n              isMain = item.isMain;\n          obj[name] = value;\n          isMain ? main.push(item) : auxiliary.push(item);\n        });\n        return {\n          data: this.data,\n          obj: obj,\n          main: main,\n          auxiliary: auxiliary\n        };\n      },\n      set: function set(val) {\n        this.$emit('change', val.data);\n      }\n    }\n  },\n  // created() {\n  //   if (this.backups === null) {\n  //     this.backups = JSON.parse(JSON.stringify(this.searchData.data))\n  //   }\n  // },\n  methods: {\n    /**\r\n     * @description: 重置所有参数并且触发搜索回调\r\n     */\n    resetSearchData: function resetSearchData() {\n      this.loadingType = 'reset'; // const data = this.searchData.data\n      // data.forEach((item, index) => {\n      //   let val = this.backups[index] ? this.backups[index].value : ''\n      //   if (typeof item.defaultValue !== 'undefined') {\n      //     val = item.defaultValue\n      //   }\n      //   this.$set(item, 'value', val)\n      // })\n\n      this.$refs['SearchBar'].resetFields();\n      this.search('reset', this.getSearchData());\n    },\n\n    /**\r\n     * @description: 以对象方式返回所有参数(data数组每一项的label作为key，value作为值)\r\n     * @return {Object} 所有参数\r\n     */\n    getSearchData: function getSearchData() {\n      // const obj = {}\n      //   this.data.forEach(({name,value}) => {\n      //     obj[name] = value\n      //   })\n      return this.searchData.obj;\n    },\n\n    /**\r\n     * @description: 触发search回调，接受promise\r\n     * @return {*}\r\n     */\n    handleSearch: function () {\n      var _handleSearch = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(type) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loadingType = 'search'; // this.$emit('update:loading', true)\n                // this.$emit('update:loading', false)\n\n                this.$refs['SearchBar'].validate(function (valid) {\n                  if (valid) {\n                    _this.search(type, _this.getSearchData());\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleSearch(_x) {\n        return _handleSearch.apply(this, arguments);\n      }\n\n      return handleSearch;\n    }(),\n    toggleState: function toggleState() {\n      this.showMore = !this.showMore;\n    },\n\n    /**\r\n     * 设置搜索栏的设置项的某个值\r\n     * @param {String} name searchData的name,用来当作唯一标识找到对应项\r\n     * @param {String} key 想要改变项的键名\r\n     * @param {*} data 想要覆盖的值\r\n     * @param {String} model 设置模式-cover:直接覆盖,init:如果目标为空的话才会覆盖\r\n     */\n    setData: function setData(name, key, data) {\n      var model = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'cover';\n      var target = this.data.find(function (v) {\n        return v.name === name;\n      });\n      if (!target) throw new Error(\"SearchBar setData: \\u6CA1\\u6709\\u627E\\u5230\\u5BF9\\u5E94\\u9879,\\u8BF7\\u68C0\\u67E5name\\u8F93\\u5165\\u662F\\u5426\\u6B63\\u786E\");\n\n      if (model === 'cover') {\n        target[key] = data;\n      } else if (model === 'init') {\n        if (!target[key] || !target[key].length) {\n          target[key] = data;\n        }\n      } else {\n        throw new Error('SearchBar setData: 没有对应的模式,请检查model输入是否正确');\n      }\n    }\n  }\n};\nexports.default = _default3;",null]}
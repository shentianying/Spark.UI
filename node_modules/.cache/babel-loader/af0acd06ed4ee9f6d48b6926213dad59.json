{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\jhgl\\planDetailAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\jhgl\\planDetailAdd.vue","mtime":1627105574176},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar _material = require(\"@/api/cggl/material\");\n\nvar _index = require(\"@/utils/index\");\n\nvar _validate = require(\"@/utils/validate\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import { getMaterialCategoryByIsMain, getAllMaterialCategory, getMaterialCategoryPropertyByCategoryId } from '@/api/cggl/material'\n// import UpFile from '@/components/UpLoad/UpFile'\nvar _default = {\n  name: 'PlanDetailAdd',\n  components: {// UpFile\n  },\n  props: {\n    obj: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        categoryId: null,\n        category: null,\n        // unit: '',\n        unit2: '',\n        brand: '',\n        model: '',\n        spec: '',\n        thickness: '',\n        texture: '',\n        surfaceTreatment: '',\n        designNumber: '',\n        applicationQuantity: null,\n        applicationQuantity2: null,\n        quantity: null,\n        quantity2: null,\n        entryDate: null,\n        remark: '' // confirmTime: null,\n        // processOrgId: null,\n        // processUser: null,\n        // enteredQuantity: null\n\n      },\n      buttonLoading: false,\n      comName: '',\n      list: null,\n      categoryList: null,\n      categoryPropertyList: null,\n      oldrProperty: {},\n      options: null,\n      rules: {\n        categoryId: [{\n          required: true,\n          message: '请选择',\n          trigger: 'change'\n        }],\n        // applicationQuantity: [{ type: 'string', required: true, message: '必须是数字类型', trigger: 'blur' }],\n        applicationQuantity: [{\n          validator: _validate.validate.logic,\n          logic: function logic(value) {\n            return value > 0;\n          },\n          required: true,\n          trigger: 'blur'\n        }],\n        applicationQuantity2: [{\n          validator: _validate.validate.logic,\n          logic: function logic(value) {\n            return value > 0;\n          },\n          required: true,\n          trigger: 'blur'\n        }],\n        entryDate: [{\n          type: 'string',\n          required: true,\n          message: '请输入',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  computed: {\n    getEndCategoryId: function getEndCategoryId() {\n      // 获取categoryId数 组中最后一个 id\n      return this.ruleForm.categoryId[this.ruleForm.categoryId.length - 1];\n    }\n  },\n  watch: {\n    'ruleForm.unit2': {\n      handler: function handler(value) {\n        if (value === '') {\n          this.rules.applicationQuantity2[0].required = false;\n        } else {\n          this.rules.applicationQuantity2[0].required = true;\n        }\n      },\n      immediate: true\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.initData();\n  },\n  methods: {\n    submitForm: function submitForm(formName) {\n      var _this = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var newObj = JSON.parse(JSON.stringify(_this.ruleForm)); // 获取级联数组中的最后一个id,就是当前选中的最末级的分类id\n\n          var computerCategoryId = newObj.categoryId[newObj.categoryId.length - 1];\n          newObj.category = _this.categoryList.find(function (f) {\n            return f.id === computerCategoryId;\n          });\n          newObj.categoryId = computerCategoryId;\n          newObj.quantity = newObj.applicationQuantity;\n          newObj.quantity2 = newObj.applicationQuantity2; // newObj.unit = newObj\n\n          if (newObj.category.level !== 3) {\n            _this.$message.error('选择的材料必须是三级分类');\n\n            return false;\n          } // console.log('修改计划明细后返回的值:', newObj)\n\n\n          if (_this.obj) {\n            _this.$emit('dialogClose', newObj, 'update');\n          } else {\n            _this.$emit('dialogClose', newObj, 'add');\n          }\n        }\n      });\n    },\n    initData: function initData() {\n      var _this2 = this;\n\n      var promise = this.getCategory();\n\n      if (this.obj) {\n        promise.then(function () {\n          var newObj = JSON.parse(JSON.stringify(_this2.obj));\n          console.log('initData=>this.obj:', _this2.obj);\n          console.log('initData=>newObj:', newObj);\n          _this2.ruleForm = newObj; // 拼接id成三级数组，来匹配 选材料 级联菜单\n\n          var categoryIdArray = [];\n\n          var secondCategoryId = _this2.categoryList.find(function (f) {\n            return f.id === _this2.ruleForm.categoryId;\n          }).pid;\n\n          var firstCategoryId = _this2.categoryList.find(function (f) {\n            return f.id === secondCategoryId;\n          }).pid;\n\n          categoryIdArray.push(firstCategoryId);\n          categoryIdArray.push(secondCategoryId);\n          categoryIdArray.push(_this2.ruleForm.categoryId);\n          _this2.ruleForm.categoryId = categoryIdArray;\n\n          _this2.getCategoryInfo();\n        });\n      }\n    },\n    getCategoryInfo: function getCategoryInfo() {\n      var _this3 = this;\n\n      // 材料级联，最后一个id 才是选中的id\n      var computerCategoryId = this.ruleForm.categoryId[this.ruleForm.categoryId.length - 1];\n      (0, _material.getMaterialCategoryPropertyByCategoryId)({\n        categoryId: computerCategoryId\n      }).then(function (response) {\n        var data = response.data; // categoryId v-model 改变了，还要改变的category对象\n\n        var categoryObject = _this3.categoryList.find(function (f) {\n          return f.id === computerCategoryId;\n        }); // console.log('categoryObject:', categoryObject)\n\n\n        _this3.ruleForm.category = {\n          id: categoryObject.id,\n          name: categoryObject.name,\n          unit: categoryObject.unit,\n          isMain: categoryObject.isMain\n        }; // 上次选择的数据\n        // this.oldrProperty.unit = this.ruleForm.unit\n\n        _this3.oldrProperty.unit2 = _this3.ruleForm.unit2;\n        _this3.oldrProperty.brand = _this3.ruleForm.brand;\n        _this3.oldrProperty.model = _this3.ruleForm.model;\n        _this3.oldrProperty.spec = _this3.ruleForm.spec;\n        _this3.oldrProperty.thickness = _this3.ruleForm.thickness;\n        _this3.oldrProperty.texture = _this3.ruleForm.texture;\n        _this3.oldrProperty.surfaceTreatment = _this3.ruleForm.surfaceTreatment;\n        _this3.oldrProperty.designNumber = _this3.ruleForm.designNumber; // 清空数据\n        // this.ruleForm.unit = ''\n\n        _this3.ruleForm.unit2 = '';\n        _this3.ruleForm.brand = '';\n        _this3.ruleForm.model = '';\n        _this3.ruleForm.spec = '';\n        _this3.ruleForm.thickness = '';\n        _this3.ruleForm.texture = '';\n        _this3.ruleForm.surfaceTreatment = '';\n        _this3.ruleForm.designNumber = ''; // 遍历获得选中分类的分类属性\n\n        var _iterator = (0, _createForOfIteratorHelper2.default)(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var row = _step.value;\n            var oldvalue = _this3.oldrProperty[row.property.materialField]; // 分类属性中的选项的名称 是否等于 上次选择的分类属性的名称\n\n            _this3.ruleForm[row.property.materialField] = oldvalue;\n\n            if (row.mcpItem.length === 1) {\n              _this3.ruleForm[row.property.materialField] = row.mcpItem[0].name;\n            }\n          } // 绑定属性\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        _this3.categoryPropertyList = data;\n      }).catch(function () {});\n    },\n    getCategory: function getCategory(query) {\n      var _this4 = this;\n\n      var pro1 = new Promise(function (resolve, reject) {\n        (0, _material.getMaterialCategoryByIsMain)({\n          name: query,\n          isMain: false\n        }).then(function (response) {\n          var data = response.data;\n          data.forEach(function (e) {\n            e.pid = e.pId;\n            e.label = e.name;\n            e.value = e.id;\n            delete e.pId;\n          });\n          _this4.categoryList = data;\n          _this4.options = (0, _index.getTree)(0, data);\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n      });\n      return pro1;\n    },\n    filterNode: function filterNode(data, value) {\n      // console.log('data:', data)\n      // [keyword1,keyword2] => label,number\n      var _data$data = data.data,\n          label = _data$data.label,\n          number = _data$data.number;\n      if (!value) return true;\n      var splitValue = value.split(' ');\n      var arr = [];\n\n      var _iterator2 = (0, _createForOfIteratorHelper2.default)(splitValue),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          // arr.push(label.indexOf(item) !== -1)\n          var isLabel = label.indexOf(item) !== -1;\n          var isNumber = number.indexOf(item) !== -1;\n\n          if (isLabel || isNumber) {\n            arr.push(true);\n          } else arr.push(false);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var ok = true;\n      arr.forEach(function (e) {\n        if (!e) ok = false;\n      });\n      return ok;\n    }\n  }\n};\nexports.default = _default;",null]}
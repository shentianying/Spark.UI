{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\dictionaryEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\dictionaryEdit.vue","mtime":1629255194280},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _dictionary = require(\"@/api/xtgl/dictionary\");\n\nvar _index = require(\"@/utils/index\");\n\nvar _vueTreeselect = _interopRequireDefault(require(\"@riophae/vue-treeselect\"));\n\nrequire(\"@riophae/vue-treeselect/dist/vue-treeselect.css\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import the component\n// import the styles\nvar _default = {\n  name: 'DictionaryEdit',\n  components: {\n    Treeselect: _vueTreeselect.default\n  },\n  props: {\n    obj: {\n      type: Object,\n      default: null\n    },\n    postTypeList: {\n      type: Array,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        pId: 0,\n        sort: 1,\n        name: '',\n        value: 0,\n        type: '',\n        typeName: '',\n        remark: '',\n        companyId: null,\n        inUse: true\n      },\n      // zero: 0,\n      userOrg: [],\n      treeList: [],\n      // 转化成树形的数据列表\n      typeList: [],\n      // 类型下拉数据列表\n      sourceData: [],\n      // 没有格式化的数据列表\n      newType: '',\n      newTypeName: '',\n      dialogTableVisible: false,\n      dialogTableVisible2: false,\n      buttonLoading: false,\n      rules: {\n        name: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'change'\n        }],\n        pId: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    this.initData();\n    this.initTree();\n  },\n  methods: {\n    submitForm: function submitForm(formName) {\n      var _this = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var newObj = JSON.parse(JSON.stringify(_this.ruleForm));\n          newObj.companyId = Number(newObj.companyId);\n          delete newObj.companyName;\n          _this.buttonLoading = true;\n\n          if (_this.obj) {\n            newObj.id = _this.obj.id;\n            (0, _dictionary.putDictionary)(newObj).then(function (response) {\n              _this.$message(response.message);\n\n              _this.buttonLoading = false;\n\n              _this.$emit('dialogClose');\n            }).catch(function () {\n              _this.buttonLoading = false;\n            });\n          } else {\n            (0, _dictionary.addDictionary)(newObj).then(function (response) {\n              _this.$message(response.message);\n\n              _this.buttonLoading = false;\n\n              _this.$emit('dialogClose');\n            }).catch(function () {\n              _this.buttonLoading = false;\n            });\n          }\n        }\n      });\n    },\n    initData: function initData() {\n      this.typeList = this.postTypeList; // console.log('this.typeList', this.typeList)\n      // console.log('this.obj：', this.obj)\n\n      if (this.obj) {\n        var newObj = JSON.parse(JSON.stringify(this.obj));\n        newObj.companyId = Number(newObj.companyId);\n        this.ruleForm = newObj;\n      }\n    },\n    initTree: function () {\n      var _initTree = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.buttonLoading = true;\n                _context.next = 3;\n                return (0, _dictionary.initDictionary)().then(function (response) {\n                  var data1 = response.data1,\n                      data2 = response.data2;\n                  data1.forEach(function (ele) {\n                    ele.label = ele.name;\n                    ele.pid = ele.pId;\n                    delete ele.pId;\n                  });\n                  _this2.sourceData = data1;\n\n                  _this2.fill(data1); // 绑定公司列表\n\n\n                  var arr2 = [];\n                  arr2.push({\n                    name: '公用',\n                    id: 0\n                  });\n                  data2.forEach(function (e) {\n                    arr2.push({\n                      name: e.name,\n                      id: e.id\n                    });\n                  });\n                  _this2.userOrg = arr2;\n                  _this2.buttonLoading = false;\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initTree() {\n        return _initTree.apply(this, arguments);\n      }\n\n      return initTree;\n    }(),\n    fill: function fill() {\n      var _this3 = this;\n\n      var filterData = this.sourceData.filter(function (f) {\n        return f.type === _this3.ruleForm.type;\n      });\n\n      if (filterData.length) {\n        this.typeName = filterData.typeName;\n        var result = (0, _index.getTree)(0, filterData);\n        this.treeList = [{\n          id: 0,\n          pid: 0,\n          label: '根目录',\n          remark: '',\n          children: result\n        }];\n      } else {\n        this.treeList = [{\n          id: 0,\n          pid: 0,\n          label: '根目录'\n        }];\n      }\n    },\n    addType: function addType() {\n      this.typeList.unshift(this.newType); // 添加下拉列表框的类型\n\n      this.ruleForm.type = this.newType; //  默认添加的项目被选中\n\n      this.ruleForm.typeName = this.newTypeName;\n      this.dialogTableVisible = false;\n      this.fill();\n    },\n    updateType: function updateType() {\n      var _this4 = this;\n\n      this.buttonLoading = true;\n      (0, _dictionary.putDictionaryTypeName)({\n        type: this.ruleForm.type,\n        typeName: this.ruleForm.typeName\n      }).then(function (res) {\n        _this4.$message(res.message);\n\n        _this4.buttonLoading = false;\n\n        _this4.typeList.forEach(function (e) {\n          if (e.type === _this4.ruleForm.type) {\n            e.typeName = _this4.ruleForm.typeName;\n          }\n        });\n\n        _this4.sourceData.forEach(function (e) {\n          if (e.type === _this4.ruleForm.type) {\n            e.typeName = _this4.ruleForm.typeName;\n          }\n        });\n\n        _this4.dialogTableVisible2 = false;\n      }).catch(function () {\n        _this4.buttonLoading = false;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
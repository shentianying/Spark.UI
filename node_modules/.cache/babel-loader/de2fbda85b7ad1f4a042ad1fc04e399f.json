{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\zggl\\worker\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\zggl\\worker\\index.vue","mtime":1633917085234},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _worker = require(\"@/api/zggl/worker\");\n\nvar _SearchBar = _interopRequireDefault(require(\"@/components/SearchBar\"));\n\nvar _searchData = _interopRequireDefault(require(\"./searchData\"));\n\nvar _pikazExcelJs = require(\"pikaz-excel-js\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'Worker',\n  components: {\n    SearchBar: _SearchBar.default,\n    ExcelExport: _pikazExcelJs.ExcelExport\n  },\n  data: function data() {\n    return {\n      size: 'mini',\n      searchData: _searchData.default,\n      // 渲染搜索栏数据\n      filename: '工人列表',\n      exLoading: false,\n      // 导出\n      sheet: [],\n      filter: {\n        // 过滤数据\n        type: '6',\n        // 类型\n        typeOptions: [// 类型数组\n        {\n          value: '6',\n          name: '列表'\n        }, {\n          value: '5',\n          name: '有保险'\n        }, {\n          value: '4',\n          name: '无保险'\n        }, {\n          value: '3',\n          name: '已退场'\n        }, {\n          value: '1',\n          name: '暂退'\n        }, {\n          value: '2',\n          name: '已报到'\n        }, {\n          value: '0',\n          name: '未报到'\n        }]\n      },\n\n      /* 列表数据相关 */\n      table: {\n        list: [],\n        loading: false,\n        total: 0,\n        currentPage: 1,\n        pageSize: 10\n      }\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.fetchData();\n    });\n  },\n  methods: {\n    /**\r\n     * 类型重新选择的事件\r\n     */\n    typeChange: function typeChange() {\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var postData, _this$table, currentPage, pageSize, response, data, count, yearOptions, default_options, workOptions, workerOptions, bankOptions;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.table.loading = true;\n                _context.prev = 1;\n                // 获取请求参数\n                postData = this.getSearchData();\n                _this$table = this.table, currentPage = _this$table.currentPage, pageSize = _this$table.pageSize; // 请求开始\n\n                _context.next = 6;\n                return (0, _worker.getWorkerPaging)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, postData), {}, {\n                  currentPage: currentPage,\n                  pageSize: pageSize,\n                  type: this.filter.type\n                }));\n\n              case 6:\n                response = _context.sent;\n                data = response.data, count = response.count, yearOptions = response.yearOptions; // 初始化数据获取\n\n                _context.next = 10;\n                return (0, _worker.getDefaultOptions)();\n\n              case 10:\n                default_options = _context.sent;\n                workOptions = default_options.workOptions, workerOptions = default_options.workerOptions, bankOptions = default_options.bankOptions;\n                workOptions.forEach(function (ele) {\n                  // 资金形式选项数据转换\n                  ele.label = ele.name;\n                });\n                workerOptions.forEach(function (ele) {\n                  // 资金形式选项数据转换\n                  ele.label = ele.name;\n                });\n                bankOptions.forEach(function (ele) {\n                  // 资金形式选项数据转换\n                  ele.label = ele.name;\n                }); // 搜索栏数据初始化\n\n                this.searchData = this.searchData.map(function (item) {\n                  item.options = item.name === 'year' ? yearOptions : item.options;\n                  item.options = item.name === 'workTypes' ? workOptions : item.options;\n                  item.options = item.name === 'bank' ? bankOptions : item.options;\n                  item.options = item.name === 'workerType' ? workerOptions : item.options;\n                  return item;\n                }); // 列表数据初始化\n\n                this.table.list = data;\n                this.table.total = count;\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](1);\n                console.log('fetchData:请求列表数据失败，错误信息：', _context.t0);\n\n              case 23:\n                _context.prev = 23;\n                this.table.loading = false;\n                return _context.finish(23);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 20, 23, 26]]);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n\n    /**\r\n     * @description: 设置表格名字\r\n     */\n    setFname: function setFname() {\n      var date = this.utils.parseTime(new Date());\n      date = date.replace(' ', '_');\n      date = date.replace(':', '_');\n      this.filename = this.filename + date;\n    },\n\n    /**\r\n     * @description:表格导出功能\r\n     */\n    exportExcel: function () {\n      var _exportExcel = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var postData, _yield$getWorkerPagin, data, table;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.exLoading = true;\n                postData = this.getSearchData();\n                postData.currentPage = 1;\n                postData.pageSize = this.table.total;\n                _context2.next = 7;\n                return (0, _worker.getWorkerPaging)(postData);\n\n              case 7:\n                _yield$getWorkerPagin = _context2.sent;\n                data = _yield$getWorkerPagin.data;\n                table = data.map(function (item) {\n                  return (0, _objectSpread2.default)({}, item);\n                });\n                this.sheet = [{\n                  sheetName: '工人列表',\n                  keys: ['year', 'orgName', 'number', 'name', 'idNumber', 'age', 'workerTypeName', 'gongzhangName', 'workingAge', 'remark', 'createUserName'],\n                  tHeader: ['年度', '项目', '工号', '姓名', '身份证号', '年龄', '工种', '工长', '工龄', '备注', '制单人'],\n                  table: table\n                }];\n                this.setFname();\n                this.$refs.excelExport.pikaExportExcel();\n                _context2.next = 19;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.onError('获取表格数据失败！');\n\n              case 19:\n                _context2.prev = 19;\n                this.exLoading = false;\n                return _context2.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 15, 19, 22]]);\n      }));\n\n      function exportExcel() {\n        return _exportExcel.apply(this, arguments);\n      }\n\n      return exportExcel;\n    }(),\n\n    /**\r\n     * @description: excel导出错误处理\r\n     */\n    onError: function onError(err) {\n      this.$message.info('导出失败：' + err);\n    },\n\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\n    getSearchData: function getSearchData() {\n      var data = {};\n      this.searchData.forEach(function (item) {\n        // if (item.name === 'year') {\n        //   data['year'] = new Date(item.value).getFullYear()\n        // } else {\n        //   data[item.name] = item.value\n        // }\n        data[item.name] = item.value;\n      });\n      return data;\n    },\n\n    /**\r\n     * @description: 设置分页大小\r\n     * @param {Number} val\r\n     */\n    sizeChange: function sizeChange(val) {\n      this.table.pageSize = val;\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 搜索回调\r\n     */\n    handelSearch: function handelSearch() {\n      this.table.currentPage = 1; // 返回第一页\n\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\n    handleDetails: function handleDetails(row) {\n      this.$router.push({\n        name: 'WorkerDetails',\n        query: {\n          id: row.id,\n          refreshRouterName: this.$route.name\n        }\n      });\n    },\n\n    /**\r\n     * @description: table编辑\r\n     * @param {Object} id\r\n     */\n    handleEdit: function handleEdit(id) {\n      this.$router.push({\n        name: 'WorkerEdit',\n        query: {\n          id: id,\n          refreshRouterName: this.$route.name\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
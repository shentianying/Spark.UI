{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\worker\\pause\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\worker\\pause\\index.vue","mtime":1635749455670},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _workerPause = require(\"@/api/ggzx/workerPause\");\n\nvar _worker = require(\"@/api/ggzx/worker\");\n\nvar _SearchBar = _interopRequireDefault(require(\"@/components/SearchBar\"));\n\nvar _searchData = _interopRequireDefault(require(\"./searchData\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'WorkerPause',\n  components: {\n    SearchBar: _SearchBar.default\n  },\n  data: function data() {\n    return {\n      size: 'mini',\n      searchData: _searchData.default,\n      // 渲染搜索栏数据\n      filter: {\n        // 过滤数据\n        type: '3',\n        // 类型\n        typeOptions: [// 类型数组\n        {\n          value: '0',\n          name: '我发起的'\n        }, {\n          value: '1',\n          name: '待审批'\n        }, {\n          value: '2',\n          name: '已审批'\n        }, {\n          value: '3',\n          name: '列表'\n        }]\n      },\n\n      /* 列表数据相关 */\n      table: {\n        list: [],\n        loading: false,\n        total: 0,\n        currentPage: 1,\n        pageSize: 10\n      }\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.fetchData();\n      vm.getOptions();\n    });\n  },\n  methods: {\n    /**\r\n     * 类型重新选择的事件\r\n     */\n    typeChange: function typeChange() {\n      this.fetchData();\n    },\n    getOptions: function getOptions() {\n      var _this = this;\n\n      (0, _worker.getDefaultOptions)().then(function (op) {\n        var yearOptions = op.yearOptions; // 搜索栏数据初始化\n\n        _this.searchData = _this.searchData.map(function (item) {\n          item.options = item.name === 'year' ? yearOptions : item.options;\n          return item;\n        });\n      });\n    },\n\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var postData, _this$table, currentPage, pageSize, response, data, count;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.table.loading = true;\n                _context.prev = 1;\n                // 获取请求参数\n                postData = this.getSearchData();\n                _this$table = this.table, currentPage = _this$table.currentPage, pageSize = _this$table.pageSize; // 请求开始\n\n                _context.next = 6;\n                return (0, _workerPause.getWorkerPausePaging)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, postData), {}, {\n                  currentPage: currentPage,\n                  pageSize: pageSize,\n                  type: this.filter.type\n                }));\n\n              case 6:\n                response = _context.sent;\n                data = response.data, count = response.count; // 列表数据初始化\n\n                this.table.list = data;\n                this.table.total = count;\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](1);\n                console.log('fetchData:请求列表数据失败，错误信息：', _context.t0);\n\n              case 15:\n                _context.prev = 15;\n                this.table.loading = false;\n                return _context.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 12, 15, 18]]);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\n    getSearchData: function getSearchData() {\n      var lastSearch = {};\n      this.searchData.forEach(function (item) {\n        var value = item.value,\n            transformType = item.transformType,\n            name = item.name;\n\n        if (transformType === 'property-serial') {\n          value.forEach(function (ele, index) {\n            var serial = index + 1;\n            lastSearch[name + serial] = ele;\n          });\n        } else {\n          lastSearch[name] = value;\n        }\n      });\n      return lastSearch;\n    },\n\n    /**\r\n     * @description: 设置分页大小\r\n     * @param {Number} val\r\n     */\n    sizeChange: function sizeChange(val) {\n      this.table.pageSize = val;\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 搜索回调\r\n     */\n    handelSearch: function handelSearch() {\n      this.table.currentPage = 1; // 返回第一页\n\n      this.fetchData();\n    },\n\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\n    handleDetails: function handleDetails(row) {\n      this.$router.push({\n        name: 'WorkerPauseDetail',\n        query: {\n          id: row.id,\n          refreshRouterName: this.$route.name\n        }\n      });\n    },\n\n    /**\r\n     * @description: table编辑\r\n     * @param {Object} id\r\n     */\n    handleEdit: function handleEdit(id) {\n      this.$router.push({\n        name: 'WorkerPauseEdit',\n        query: {\n          id: id,\n          refreshRouterName: this.$route.name\n        }\n      });\n    },\n    getFormState: function getFormState(row) {\n      if (!row.billFlow) {\n        return '流程空';\n      }\n\n      var formState = row.billFlow.form.formState;\n      this.formState = formState;\n      var state = row.state;\n      if (state === -1) return '作废';\n      var obj = formState.find(function (f) {\n        return f.value === state;\n      });\n\n      if (obj) {\n        return obj.name;\n      } else {\n        return '状态不详';\n      }\n    },\n    getPerson: function getPerson(bf) {\n      if (bf) {\n        var arr = bf.billFlowNode.filter(function (f) {\n          return f.isCurrentState && !f.isChecked;\n        });\n        return arr.map(function (m) {\n          return m.person.name;\n        }).join('、');\n      }\n    },\n    // 审批\n    attitude: function attitude(id) {\n      this.$router.push({\n        name: 'WorkerPauseAttitude',\n        query: {\n          id: id,\n          refreshRouterName: this.$route.name\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}
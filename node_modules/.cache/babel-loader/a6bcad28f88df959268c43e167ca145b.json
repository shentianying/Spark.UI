{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\UpLoad\\UpFile.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\UpLoad\\UpFile.vue","mtime":1635749455614},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _upfile = require(\"@/api/xtgl/upfile\");\n\nvar _svgIcons = _interopRequireDefault(require(\"@/utils/svg-icons\"));\n\nvar _vuePdf = _interopRequireDefault(require(\"vue-pdf\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import Rename from './Rename'\n// 上传文件组件\nvar _default2 = {\n  name: 'UpFile',\n  components: {\n    pdf: _vuePdf.default // Rename\n\n  },\n  model: {\n    prop: 'fileList',\n    // 指向props的参数名\n    event: 'change' // 事件名称\n\n  },\n  props: {\n    limit: {\n      type: Number,\n      default: null\n    },\n    // 上传数量\n    fileSize: {\n      type: Number,\n      default: 10\n    },\n    // 上传大小\n    accept: {\n      type: String,\n      default: 'image/*,.doc, .docx, .xls, .xlsx, .ppt, .pptx, .zip, .rar, .pdf, .dwg, .txt'\n    },\n    // 上传类型\n    postData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 上传参数{}\n    showFileList: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示文件列表\n    fileList: {\n      type: [String, Number, Array],\n      default: null\n    },\n    // 文件数据\n    mode: {\n      type: Number,\n      default: 0\n    },\n    // 0：查看，1：编辑\n    isPreview: {\n      type: Boolean,\n      default: true\n    },\n    // 是否预览\n    isDownload: {\n      type: Boolean,\n      default: true\n    },\n    // 是否下载\n    isDelete: {\n      type: Boolean,\n      default: false\n    },\n    // 是否删除\n    isRename: {\n      type: Boolean,\n      default: false\n    },\n    // 是否重命名\n    isUpfile: {\n      type: Boolean,\n      default: false\n    } // 是否显示上传按钮\n\n  },\n  data: function data() {\n    var path = process.env.VUE_APP_BASE_API;\n    path = path + (path.slice(-1) === '/' ? '' : '/') + 'api/xtgl/upfile/upLoadFile';\n    return {\n      postUrl: path,\n      imageUrl: '',\n      dialogTitle: '信息',\n      dialogImageVisible: false,\n      showProgress: false,\n      percentage: 0,\n      // PDF预览\n      viewVisible: false,\n      pdfSrc: null,\n      pdfPage: 1,\n      pageCount: 0,\n      // viewVisible2: false,\n      newValue: '',\n      buttonLoading: false,\n      renameDialog: false,\n      extension: '',\n      renameObj: '',\n      svgIcons: _svgIcons.default\n    };\n  },\n  computed: {\n    headers: function headers() {\n      return {\n        Authorization: (0, _auth.getToken)()\n      };\n    }\n  },\n  created: function created() {// console.log('输出fileList:', this.fileList)\n  },\n  methods: {\n    handleSuccess: function handleSuccess(response, file, fileList) {\n      // name:上传文件显示的名称 id:编号  addFlag:是否是新添加的\n      this.$emit('change', [].concat((0, _toConsumableArray2.default)(this.fileList), [{\n        fileName: file.name,\n        id: response.data,\n        fileSize: file.size,\n        addFlag: true\n      }])); // this.fileList.push({ fileName: file.name, id: response.data, fileSize: file.size, addFlag: true })\n      // console.log('handleSuccess：', response, file, fileList)\n    },\n    // handleExceed(files, fileList) {\n    //   console.log('handleExceed')\n    // },\n    beforeUpload: function beforeUpload(file) {\n      var _this = this;\n\n      // console.log('beforeUpload:', file)\n      return new Promise(function (resolve, reject) {\n        var isLt2M = file.size / 1024 / 1024 < _this.fileSize; // 判定图片大小是否小于10MB\n\n        if (!isLt2M) {\n          _this.$message.error(\"\\u4E0A\\u4F20\\u6587\\u4EF6\\u5927\\u5C0F\\u4E0D\\u80FD\\u8D85\\u8FC7 \".concat(_this.fileSize, \"MB!\"));\n\n          reject();\n        }\n\n        resolve();\n      });\n    },\n    // beforeRemove(file, fileList) {\n    //   // 加个判断，因为上传 判断文件大小 返回false 或者返回 reject 会触发当前的钩子，status为 ready\n    //   if (file && file.status === 'success') {\n    //     // 编辑模式才能删除\n    //     if (this.mode === 1) {\n    //       this.fileList.splice(this.fileList.findIndex(item => item.id === file.id), 1)\n    //     } else {\n    //       return false\n    //     }\n    //   }\n    //   console.log('触发beforeRemove：file:', file)\n    // },\n    handleProgress: function handleProgress(event, file, fileList) {\n      // console.log('event:', event, file, fileList)\n      this.showProgress = true;\n      this.percentage = event.percent;\n\n      if (event.percent === 100) {\n        this.showProgress = false;\n        this.percentage = 0;\n      }\n    },\n    // handlePreview(file) {\n    // },\n    // handleError(err, file, fileList) {\n    //   console.log('handleError：', err, file, fileList)\n    // },\n    // handleChange(file, fileList) {\n    //   console.log('handleChange：', file, fileList)\n    // },\n    // PDF预览\n    closeDialog: function closeDialog() {\n      this.pdfPage = 1;\n    },\n    // PDF改变页数\n    previousPage: function previousPage() {\n      var p = this.pdfPage;\n      p = p > 1 ? p - 1 : this.pageCount;\n      this.pdfPage = p;\n    },\n    nextPage: function nextPage() {\n      var p = this.pdfPage;\n      p = p < this.pageCount ? p + 1 : 1;\n      this.pdfPage = p;\n    },\n    // 根据后台返回的数据流，创建文件url地址\n    GetObjectUrl: function GetObjectUrl(mime, res) {\n      var blob = null;\n\n      if (mime === '.zip') {\n        blob = new Blob([res], {\n          type: 'application/zip'\n        });\n      } else if (mime === '.doc' || mime === '.docx') {\n        blob = new Blob([res], {\n          type: 'application/msword'\n        });\n      } else if (mime === '.ppt' || mime === '.pptx') {\n        blob = new Blob([res], {\n          type: 'application/vnd.ms-powerpoint'\n        });\n      } else if (mime === '.xls' || mime === '.xlsx') {\n        blob = new Blob([res], {\n          type: 'application/vnd.ms-excel'\n        });\n      } else {\n        blob = new Blob([res]);\n      }\n\n      return window.URL.createObjectURL(blob);\n    },\n    // ShowRenameDialog() {\n    //   this.viewVisible2 = true\n    // },\n    getFile: function getFile(file, type) {\n      var _this2 = this;\n\n      // type :0 查看 ，1 下载\n      var imgPrefix = ['.jpg', '.jpeg', '.png', '.gif']; // 图片类型\n\n      var prefix = file.fileName.substring(file.fileName.lastIndexOf('.')).toLowerCase(); // 获取文件后缀\n      // 根据文件类型选择不同的预览方式\n\n      (0, _upfile.getFile)({\n        id: file.id,\n        addFlag: file.addFlag\n      }).then(function (response) {\n        // console.log('返回流类型：', response)\n        // 创建文件地址\n        var blobUrl = _this2.GetObjectUrl(prefix, response);\n\n        if (type === 0) {\n          // 图片的 接收方法\n          if (imgPrefix.includes(prefix)) {\n            _this2.imageUrl = blobUrl;\n            _this2.dialogImageVisible = true;\n          } else if (prefix === '.pdf') {\n            _this2.pdfSrc = _vuePdf.default.createLoadingTask(blobUrl); // this.pdfSrc.promise.then(pdf => {\n            //   console.log('pdf的属性:', pdf)\n            //   this.pageCount = pdf.numPages\n            // }).catch(err => {\n            //   console.error('pdf 加载失败', err)\n            // })\n\n            _this2.viewVisible = true;\n          } else {\n            _this2.$message.info('只支持图片、pdf查看');\n\n            return false;\n          }\n        } else if (type === 1) {\n          // excel ppt word 之类格式的文件，不支持显示，只提供下载\n          var eleLink = document.createElement('a');\n          eleLink.download = file.fileName;\n          eleLink.style.display = 'none';\n          eleLink.href = blobUrl; // 触发点击\n\n          document.body.appendChild(eleLink);\n          eleLink.click(); // 然后移除\n\n          document.body.removeChild(eleLink);\n        } else {\n          _this2.$message.info('类型错误');\n        }\n      }).catch(function () {\n        _this2.$message.error('文件读取错误');\n      });\n    },\n    canPreview: function canPreview(file) {\n      var prefix = ['.jpg', '.jpeg', '.png', '.gif', '.pdf']; // 可预览类型\n\n      return prefix.includes(file.fileName.substring(file.fileName.lastIndexOf('.')).toLowerCase());\n    },\n    filenameClick: function filenameClick(file) {\n      if (this.canPreview(file)) {\n        if (this.isPreview) this.getFile(file, 0);else if (this.isDownload) this.getFile(file, 1);\n      } else {\n        if (this.isDownload) this.getFile(file, 1);\n      }\n    },\n    preview: function preview(file) {\n      if (file.fileName.lastIndexOf('.') <= 0) {\n        this.$message.info('无效的文件');\n        return;\n      }\n\n      this.getFile(file, 0);\n    },\n    download: function download(file) {\n      this.getFile(file, 1);\n    },\n    deleteFile: function deleteFile(file, index) {\n      this.fileList.splice(index, 1);\n    },\n    rename: function rename(file) {\n      this.renameDialog = true;\n      var lastIndex = file.fileName.lastIndexOf('.');\n\n      if (lastIndex <= 0) {\n        this.$message.info('文件名格式错误');\n        return;\n      }\n\n      this.newValue = file.fileName.substring(0, lastIndex);\n      this.extension = file.fileName.substring(lastIndex);\n      this.selectObj = file;\n    },\n    renameSave: function renameSave() {\n      var _this3 = this;\n\n      if (this.newValue === '') {\n        this.$message.info('不能为空');\n        return;\n      }\n\n      var newName = this.newValue + this.extension;\n      var postData = {\n        id: this.selectObj.id,\n        newName: newName,\n        addFlag: this.selectObj.addFlag\n      }; // 修改后端的文件名\n\n      this.buttonLoading = true;\n      (0, _upfile.putFileName)(postData).then(function (response) {\n        _this3.$message.info(response); // 修改前端 的文件名\n\n\n        _this3.selectObj.name = newName;\n        _this3.renameDialog = false; // 关闭\n\n        _this3.buttonLoading = false;\n\n        _this3.$message.info(response.message);\n      });\n    },\n    closeRenameDialog: function closeRenameDialog() {\n      this.renameDialog = false;\n    },\n    getFileIcon: function getFileIcon(fileName) {\n      var prefix = fileName.substring(fileName.lastIndexOf('.')).toLowerCase(); // 获取文件后缀\n\n      var svg = 'form';\n\n      switch (prefix) {\n        case '.jpg':\n        case '.jpeg':\n        case '.png':\n        case '.gif':\n        case '.bmp':\n          // 图片类型\n          svg = 'image';\n          break;\n\n        case '.pdf':\n          svg = 'pdf';\n          break;\n\n        case '.txt':\n          svg = 'txt';\n          break;\n\n        case '.doc':\n        case '.docx':\n          svg = 'word';\n          break;\n\n        case '.ppt':\n        case '.pptx':\n          svg = 'ppt';\n          break;\n\n        case '.xls':\n        case '.xlsx':\n          svg = 'excel';\n          break;\n\n        case '.rar':\n        case '.zip':\n        case '.7z':\n          svg = 'rar';\n          break;\n\n        case '.dwg':\n          svg = 'cad';\n          break;\n\n        default:\n          break;\n      }\n\n      return svg;\n    }\n  }\n};\nexports.default = _default2;",null]}
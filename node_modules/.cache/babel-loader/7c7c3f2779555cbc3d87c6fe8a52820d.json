{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\organization\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\organization\\index.vue","mtime":1635749455660},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _workerOrg = require(\"@/api/ggzx/workerOrg\");\n\nvar _index = require(\"@/utils/index\");\n\nvar _SearchBar = _interopRequireDefault(require(\"@/components/SearchBar\"));\n\nvar _searchData = _interopRequireDefault(require(\"./searchData\"));\n\nvar _workerOrgEdit = _interopRequireDefault(require(\"./workerOrgEdit\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'WorkerOrg',\n  components: {\n    SearchBar: _SearchBar.default,\n    WorkerOrgEdit: _workerOrgEdit.default\n  },\n  data: function data() {\n    return {\n      size: 'mini',\n      searchData: _searchData.default,\n      // 渲染搜索栏数据\n\n      /* 列表数据相关 */\n      table: {\n        list: [],\n        loading: false,\n        total: 0\n      },\n      personTypeList: [],\n      postTypeList: [],\n      dialogTableVisible: false,\n      currentRow: null,\n      comName: 'WorkerOrgEdit'\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.getOptions();\n      vm.fetchData();\n    });\n  },\n  methods: {\n    getOptions: function getOptions() {\n      var _this = this;\n\n      // 初始化数据获取\n      (0, _workerOrg.getDefaultOptions)().then(function (default_options) {\n        var personTypeOptions = default_options.personTypeOptions,\n            postTypeOptions = default_options.postTypeOptions; // 搜索栏数据初始化\n\n        personTypeOptions.forEach(function (ele) {\n          // 人员类别选项数据转换\n          ele.label = ele.name;\n        });\n        postTypeOptions.forEach(function (ele) {\n          // 职务选项数据转换\n          ele.label = ele.name;\n        });\n        _this.personTypeList = personTypeOptions;\n        _this.postTypeList = postTypeOptions;\n        _this.searchData = _this.searchData.map(function (item) {\n          item.options = item.name === 'posts' ? postTypeOptions : item.options;\n          return item;\n        });\n      });\n    },\n\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\n    fetchData: function () {\n      var _fetchData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var postData, response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.table.loading = true;\n                _context.prev = 1;\n                // 获取请求参数\n                postData = this.getSearchData(); // 请求开始\n\n                _context.next = 5;\n                return (0, _workerOrg.getWorkerOrganizationList)((0, _objectSpread2.default)({}, postData));\n\n              case 5:\n                response = _context.sent;\n                // this.table.list = response.data\n                this.table.list = (0, _index.getTree)(0, response.data);\n\n                if (this.table.list.length === 0) {\n                  response.data.forEach(function (e) {\n                    _this2.table.list = (0, _index.getTree)(e.pid, response.data);\n                  });\n                }\n\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                console.log('fetchData:请求列表数据失败，错误信息：', _context.t0);\n\n              case 13:\n                _context.prev = 13;\n                this.table.loading = false;\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10, 13, 16]]);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }(),\n\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\n    getSearchData: function getSearchData() {\n      var lastSearch = {};\n      this.searchData.forEach(function (item) {\n        var value = item.value,\n            transformType = item.transformType,\n            name = item.name;\n\n        if (transformType === 'property-serial') {\n          value.forEach(function (ele, index) {\n            var serial = index + 1;\n            lastSearch[name + serial] = ele;\n          });\n        } else {\n          lastSearch[name] = value;\n        }\n      });\n      return lastSearch;\n    },\n\n    /**\r\n     * @description: 搜索回调\r\n     */\n    handelSearch: function handelSearch() {\n      this.fetchData();\n    },\n    dialogClose: function dialogClose() {\n      this.dialogTableVisible = false;\n      this.fetchData();\n    },\n    handleEdit: function handleEdit(row) {\n      this.currentRow = row;\n      this.dialogTableVisible = true;\n    },\n    handleAdd: function handleAdd() {\n      this.currentRow = null;\n      this.dialogTableVisible = true;\n    },\n    getTypeName: function getTypeName(row) {\n      var v = this.personTypeList.find(function (f) {\n        return f.value === row.personType;\n      });\n\n      if (v) {\n        return v.name;\n      } else {\n        return '';\n      }\n    },\n    getPostName: function getPostName(row) {\n      var v = this.postTypeList.find(function (f) {\n        return f.value === row.postTypeId;\n      });\n\n      if (v) {\n        return v.name;\n      } else {\n        return '';\n      }\n    }\n  }\n};\nexports.default = _default;",null]}
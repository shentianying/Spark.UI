{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Gathering\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Gathering\\edit.vue","mtime":1633684104556},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _Gathering = require(\"@/api/cwgl/zjgl/Gathering.js\");\n\nvar _pikazExcelJs = require(\"pikaz-excel-js\");\n\nvar _validate = require(\"@/utils/validate\");\n\nvar _index = require(\"@/utils/index\");\n\nvar _MyForm = _interopRequireDefault(require(\"@/components/MyForm\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ShouKuanEdit',\n  // 局部注册的组件\n  components: {\n    ExcelImport: _pikazExcelJs.ExcelImport,\n    ExcelExport: _pikazExcelJs.ExcelExport,\n    MyForm: _MyForm.default\n  },\n  // 组件状态值\n  data: function data() {\n    var _this = this;\n\n    var date = function () {\n      // 防抖\n      var timer = null;\n      return function (rule, value, callback) {\n        var index = rule.field.split('.')[1];\n        var key = rule.field.split('.')[2];\n        var row = _this.skForm.acceptanceList[index];\n\n        if (new Date(row.ticketDate) > new Date(row.expiration)) {\n          if (key === 'expiration') {\n            if (timer) {\n              clearTimeout(timer);\n              timer = null;\n            }\n\n            timer = setTimeout(function () {\n              _this.$message.error('开票日期不能晚于到期日期');\n\n              timer = null;\n            }, 200);\n          }\n\n          return callback(new Error('开票日期不能晚于到期日期'));\n        }\n\n        callback();\n      };\n    }();\n\n    var money = function () {\n      var timer = null;\n      return function (rule, value, callback) {\n        var cb = function cb(e) {\n          if (e instanceof Error) {\n            if (timer) {\n              clearTimeout(timer);\n              timer = null;\n            }\n\n            console.log(e.message);\n            timer = setTimeout(function () {\n              _this.$message.error(e.message);\n\n              timer = null;\n            }, 200);\n            callback(e);\n          } else {\n            callback();\n          }\n        };\n\n        _validate.validate.max_amount(rule, value, cb);\n      };\n    }();\n\n    return {\n      size: 'mini',\n      // 整体大小\n      type: '',\n      // edit：编辑 add:新增\n      isCanUpdate: true,\n      // 是否可编辑,备注银行除外\n      skForm: {\n        id: 'add',\n        gatheringDate: '',\n        acceptanceList: [],\n        number: '',\n        // 收款编号\n        orgId: '',\n        // 部门\n        gatheringType: '',\n        // 收款类型\n        capitalType: '',\n        // 资金类型\n        date1: '',\n        // 收款日期\n        personId: '',\n        // 经手人ID\n        personName: '',\n        // 经手人\n        amount: '',\n        // 金额\n        bank: '',\n        // 银行\n        remark: '',\n        // 备注\n        state: -1\n      },\n      defaultParams: {\n        expandTrigger: 'hover',\n        label: 'name',\n        value: 'value',\n        children: 'childs'\n      },\n      sheet: [{\n        // title: '材料计划导入模板',\n        tHeader: ['票号', '开票日期', '到期日期', '金额', '出票人', '付款人', '收款人', '付款行', '备注'],\n        table: [],\n        keys: ['ticketNumber', 'ticketDate', 'expiration', 'amount', 'drawer', 'payer', 'payee', 'bank', 'remark'],\n        sheetName: '材料明细'\n      }],\n      sklxData: [],\n      zjlxData: [],\n      // 验证规则\n      rules: {\n        text: [{\n          required: true,\n          message: '请输入',\n          trigger: 'change'\n        }],\n        date: [{\n          required: true,\n          message: '请选择日期',\n          trigger: 'change'\n        }, {\n          validator: date,\n          trigger: 'change'\n        }],\n        money: [{\n          required: true,\n          message: '请输入金额',\n          trigger: 'change'\n        }, {\n          validator: money,\n          trigger: 'change'\n        }],\n        orgId: [{\n          required: true,\n          message: '请选择部门',\n          trigger: 'change'\n        }],\n        gatheringType: [{\n          required: true,\n          message: '请选择收款类型',\n          trigger: 'change'\n        }],\n        capitalType: [{\n          required: true,\n          message: '请选择资金类型',\n          trigger: 'change'\n        }],\n        gatheringDate: [{\n          required: true,\n          message: '请选择日期',\n          trigger: 'change'\n        }],\n        personId: [{\n          required: true,\n          message: '请选择经手人',\n          trigger: 'change'\n        }],\n        amount: [{\n          required: true,\n          message: '请输入金额',\n          trigger: 'change'\n        }, {\n          validator: _validate.validate.money,\n          message: '金额格式不正确'\n        }, {\n          validator: _validate.validate.max_amount,\n          message: '超过所能存储的最大金额'\n        }]\n      }\n    };\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      var newId = vm.$route.query.id;\n      var oldId = vm.skForm.id;\n\n      if (newId && newId !== oldId) {\n        // 说明是打开另一个单子的编辑页面\n        vm.skForm.id = newId;\n        vm.getskForm();\n        vm.active = 1;\n      } else if (!newId && oldId) {\n        var _vm$$refs$ruleForm;\n\n        // 说明是打开一个新建页面\n        Object.assign(vm.skForm, {\n          state: 0,\n          acceptanceList: [],\n          id: ''\n        });\n        vm.isCanUpdate = true;\n        (_vm$$refs$ruleForm = vm.$refs['ruleForm']) === null || _vm$$refs$ruleForm === void 0 ? void 0 : _vm$$refs$ruleForm.resetFields();\n        vm.getOptions();\n      }\n    });\n  },\n  computed: {\n    isChendui: function isChendui() {\n      var capitalType = this.skForm.capitalType;\n      return capitalType === 2 || capitalType === 3;\n    },\n\n    /**\r\n     * 处理form表单的数据\r\n     */\n    formNodeData: function formNodeData() {\n      var isCanUpdate = this.isCanUpdate,\n          sklxData = this.sklxData;\n      return [{\n        label: '编码:',\n        keyword: 'number',\n        props: {\n          disabled: true,\n          placeholder: '系统自动生成'\n        }\n      }, {\n        label: '部门:',\n        keyword: 'orgId',\n        component: 'OrgSelect',\n        props: {\n          dataMode: 1,\n          collapseTags: true,\n          showAllLevels: false,\n          filterable: true,\n          expandTrigger: 'hover',\n          placeholder: '请选择部门',\n          checkStrictly: true,\n          disabled: !isCanUpdate\n        }\n      }, {\n        label: '收款类型:',\n        keyword: 'gatheringType',\n        component: 'Select',\n        props: {\n          disabled: !isCanUpdate,\n          placeholder: '请选择',\n          options: sklxData.map(function (v) {\n            return {\n              label: v.name,\n              value: v.value\n            };\n          })\n        }\n      }, {\n        label: '资金类型:',\n        keyword: 'capitalType',\n        component: 'CapitalSelect',\n        props: {\n          disabled: !isCanUpdate,\n          multiple: false,\n          showAllLevels: false\n        }\n      }, {\n        label: '收款日期:',\n        keyword: 'gatheringDate',\n        component: 'el-date-picker',\n        props: {\n          disabled: !isCanUpdate,\n          type: 'date',\n          placeholder: '选择日期',\n          valueFormat: 'yyyy-MM-dd'\n        }\n      }, {\n        label: '经手人:',\n        keyword: 'personId',\n        component: 'PersonSelect',\n        props: {\n          disabled: !isCanUpdate,\n          multiple: false\n        }\n      }, {\n        label: '金额:',\n        keyword: 'amount'\n      }, {\n        label: '收款银行:',\n        keyword: 'bank'\n      }, {\n        label: '备注:',\n        keyword: 'remark',\n        monopolize: true,\n        props: {\n          type: 'textarea'\n        }\n      }];\n    }\n  },\n  watch: {\n    'skForm.acceptanceList': {\n      handler: function handler(val) {\n        if (this.isChendui) {\n          var amount = 0;\n\n          if (Array.isArray(val)) {\n            val.forEach(function (item) {\n              amount += Number(item.amount);\n            });\n          }\n\n          this.skForm.amount = amount;\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  // 组件方法\n  methods: {\n    invalidGathering: function () {\n      var _invalidGathering = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 作废之前弹窗确定一下\n                this.$confirm('作废以后将无法编辑，是否确定作废？', '提示', {\n                  type: 'warning'\n                }).then(function () {\n                  return (0, _Gathering.InvalidGathering)(_this2.skForm.id);\n                }).then(function (res) {\n                  _this2.$message.success(res.message);\n\n                  _this2.utils.closeAndRefresh(_this2.$route.query.refreshRouterName);\n                }).catch(function (err) {\n                  console.log(err); // this.$message.error(err.errorMsg || '操作失败')\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function invalidGathering() {\n        return _invalidGathering.apply(this, arguments);\n      }\n\n      return invalidGathering;\n    }(),\n    onSuccess: function onSuccess(d, file) {\n      var _this3 = this;\n\n      var data = d[0].data; // const postData = []\n\n      console.log('数据为空的字段data中不会有该字段:', data); // if (data.length) return // 为空返回\n\n      var errorMessage = '';\n      var isEmpyt = data.every(function (e) {\n        // 非空判断\n        if (!e.付款人) {\n          errorMessage += '第' + e.__rowNum__ + '行，付款人不能为空；';\n        }\n\n        if (!e.付款行) {\n          errorMessage += '第' + e.__rowNum__ + '行，付款行不能为空；';\n        }\n\n        if (!e.出票人) {\n          errorMessage += '第' + e.__rowNum__ + '行，出票人不能为空；';\n        }\n\n        if (!e.收款人) {\n          errorMessage += '第' + e.__rowNum__ + '行，收款人不能为空；';\n        }\n\n        if (!e.金额) {\n          errorMessage += '第' + e.__rowNum__ + '行，金额不能为空；';\n        } else if (!_validate.validateData.money(e.金额.trim()).isSuccess) {\n          errorMessage += '第' + e.__rowNum__ + '行，金额格式不正确；';\n        }\n\n        if (!e.开票日期) {\n          errorMessage += '第' + e.__rowNum__ + '行，开票日期不能为空；';\n        } else {\n          /* const convertDate = formatExcelDate(e.开票日期.trim())\r\n          if (!validateData.date(convertDate).isSuccess) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，开票日期格式错误；'\r\n          } */\n        }\n\n        if (!e.到期日期) {\n          errorMessage += '第' + e.__rowNum__ + '行，到期日期不能为空；';\n        } else {\n          /* const convertDate = formatExcelDate(e.到期日期.trim())\r\n          if (!validateData.date(convertDate).isSuccess) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，到期日期格式错误；'\r\n          } */\n        }\n\n        if (e.开票日期 && e.到期日期 && new Date(e.开票日期.trim()) > new Date(e.到期日期.trim())) {\n          errorMessage += '第' + e.__rowNum__ + '行，开票日期不得晚于到期日期；';\n        }\n\n        return errorMessage.length > 0;\n      }); // 表格检验\n\n      this.loading = true;\n\n      if (isEmpyt) {\n        this.$alert(\"\".concat(errorMessage.replace(/；/g, '；<br />')), {\n          dangerouslyUseHTMLString: true\n        });\n        this.loading = false;\n        return;\n      }\n\n      var dateList = ['ticketDate', 'expiration']; // 时间\n\n      var _iterator = (0, _createForOfIteratorHelper2.default)(data),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          row = _step.value;\n          var sheet = _this3.sheet[0];\n          var tmpRow = {};\n          sheet.keys.forEach(function (key, index) {\n            // 每一行\n            var thName = sheet.tHeader[index]; // 表头名\n\n            tmpRow[key] = row[thName] || (0, _index.cleanText)(index);\n\n            if (dateList.includes(key)) {\n              // 格式化时间\n              console.log(tmpRow[key]);\n              data[key] = (0, _index.formatExcelDate)(tmpRow[key]);\n            }\n          });\n\n          _this3.skForm.acceptanceList.push(tmpRow);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var row;\n\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    // 获取资金类型、收款类型选项\n    getOptions: function () {\n      var _getOptions = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$GetGatheringPa, capitalTypeOptions, gatheringTypeOptions;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _Gathering.GetGatheringPaging)({\n                  currentPage: 1,\n                  pageSize: 1\n                });\n\n              case 2:\n                _yield$GetGatheringPa = _context2.sent;\n                capitalTypeOptions = _yield$GetGatheringPa.capitalTypeOptions;\n                gatheringTypeOptions = _yield$GetGatheringPa.gatheringTypeOptions;\n                this.sklxData = gatheringTypeOptions;\n                this.zjlxData = capitalTypeOptions;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getOptions() {\n        return _getOptions.apply(this, arguments);\n      }\n\n      return getOptions;\n    }(),\n    // 获取收款信息数据\n    getskForm: function getskForm() {\n      var _this4 = this;\n\n      (0, _Gathering.GetPaymentById)(this.skForm.id).then(function (res) {\n        var code = res.code,\n            data = res.data,\n            gatheringTypeOptions = res.gatheringTypeOptions,\n            capitalTypeOptions = res.capitalTypeOptions;\n\n        if (code === 200) {\n          _this4.isCanUpdate = data.isCanUpdate;\n\n          for (var key in _this4.skForm) {\n            if (Object.hasOwnProperty.call(data, key)) {\n              _this4.skForm[key] = data[key];\n            }\n          }\n\n          _this4.sklxData = gatheringTypeOptions;\n          _this4.zjlxData = capitalTypeOptions;\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    handleEdit: function handleEdit(row) {\n      var backups = JSON.stringify(row);\n      Object.assign(row, {\n        isEdit: true,\n        backups: backups\n      });\n    },\n    handleSubmitEdit: function handleSubmitEdit(row) {\n      delete row.isAdd;\n      this.$set(row, 'isEdit', false);\n    },\n\n    /**\r\n     * @description: 列表行内编辑取消修改\r\n     * @param {*} row\r\n     * @param {Number} index\r\n     * @return {*}\r\n     */\n    handleCancelEdit: function handleCancelEdit(row, index) {\n      var backData = JSON.parse(row.backups);\n      var list = this.skForm.acceptanceList;\n\n      if (row.isAdd) {\n        // 此次编辑为新增,取消应删除此行\n        list.splice(index, 1);\n      } else {\n        Object.assign(row, backData);\n      }\n    },\n    // 提交表单\n    submitForm: function submitForm(formName) {\n      var _this5 = this;\n\n      console.log(111);\n      this.$refs[formName].validate( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var AcceptanceList, capitalType, data, res;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!valid) {\n                    _context3.next = 12;\n                    break;\n                  }\n\n                  AcceptanceList = _this5.skForm.acceptanceList;\n                  capitalType = String(_this5.skForm.capitalType);\n                  data = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _this5.skForm), {}, {\n                    AcceptanceList: []\n                  });\n\n                  if (capitalType === '2' || capitalType === '3') {\n                    data.AcceptanceList = AcceptanceList;\n                  }\n\n                  if (data.acceptanceList) {\n                    delete data.acceptanceList;\n                  }\n\n                  if (!data.id) {\n                    delete data.id;\n                  }\n\n                  _context3.next = 9;\n                  return (0, _Gathering.SaveGathering)(data);\n\n                case 9:\n                  res = _context3.sent;\n\n                  _this5.goBack();\n\n                  _this5.$message.success(res.message);\n\n                case 12:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    addRow: function addRow() {\n      // 这里要把字段写全,要不然,取消的时候反向覆盖没有对应字段,不好处理\n      var row = {\n        // isEdit: false,\n        // isAdd: true,\n        ticketNumber: '',\n        ticketDate: '',\n        expiration: '',\n        amount: '',\n        drawer: '',\n        payer: '',\n        payee: '',\n        bank: '',\n        remark: ''\n      }; // this.$set(row, 'backups', JSON.stringify(row))\n      // row.isEdit = true\n\n      this.skForm.acceptanceList.push(row);\n    },\n    deleteRow: function deleteRow(index, rows) {\n      rows.splice(index, 1);\n    },\n\n    /**\r\n     * 取消并返回上一页\r\n     */\n    goBack: function goBack() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    }\n  }\n};\nexports.default = _default;",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\paid\\paidAttitude.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\paid\\paidAttitude.vue","mtime":1634781212949},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _UpFile = _interopRequireDefault(require(\"@/components/UpLoad/UpFile\"));\n\nvar _flowSelect = _interopRequireDefault(require(\"@/components/Flow/flowSelect\"));\n\nvar _flowDisplay = _interopRequireDefault(require(\"@/components/Flow/flowDisplay\"));\n\nvar _flowAttitude = _interopRequireDefault(require(\"@/components/Flow/flowAttitude\"));\n\nvar _paid = require(\"@/api/cggl/paid\");\n\nvar _dictionary = require(\"@/api/xtgl/dictionary\");\n\nvar _AcceptanceList = _interopRequireDefault(require(\"./AcceptanceList\"));\n\nvar _CheckAcceptance = _interopRequireDefault(require(\"./CheckAcceptance\"));\n\nvar _index = _interopRequireDefault(require(\"@/components/OrgSelect/index2\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'PaidAttitude',\n  components: {\n    UpFile: _UpFile.default,\n    FlowSelect: _flowSelect.default,\n    FlowDisplay: _flowDisplay.default,\n    FlowAttitude: _flowAttitude.default,\n    AcceptanceList: _AcceptanceList.default,\n    CheckAcceptance: _CheckAcceptance.default,\n    OrgSelect2: _index.default\n  },\n  props: {\n    obj: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      ruleForm: {\n        id: 0,\n        number: '',\n        orgId: null,\n        fileList: [],\n        quotation: {},\n        supplier: {},\n        contract: [],\n        sumAmount: 0,\n        amount: 0,\n        attitudeAmount: 0\n      },\n      loading: false,\n      activate: true,\n      orgStr: '',\n      active: 0,\n      dialogTableVisible: false,\n      dialogTitle: '保存',\n      dialogWidth: '70%',\n      comName: 'PlanDetailAdd',\n      currentRow: null,\n      list: [],\n      payModes: [],\n      payModeOptions: [],\n      keyPayMode: 0,\n      billFlow: null,\n      isLoad: false,\n      attitudePara: {},\n      loadFlow: false,\n      rules: {},\n      isPaid: false,\n      attitudeAmount: 0,\n      acceptanceList: []\n    };\n  },\n  watch: {},\n  activated: function activated() {},\n  mounted: function mounted() {\n    this.initData();\n  },\n  methods: {\n    initData: function () {\n      var _initData = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 有参数id 就是编辑\n                if (this.$route.query.id) {\n                  if (this.obj && this.obj.id) {\n                    this.id = this.obj.id;\n                  } else {\n                    this.id = this.$route.query.id;\n                  }\n                }\n\n                if (!this.id) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this.loading = true;\n                this.activate = false; // 销毁部门组件\n\n                _context.next = 6;\n                return (0, _paid.getCGPaidById)({\n                  id: this.id\n                }).then(function (response) {\n                  return _this.setData(response);\n                });\n\n              case 6:\n                (0, _dictionary.getDictionarysByTypes)({\n                  types: 'CapitalType'\n                }).then(function (response) {\n                  var data = response.data;\n                  var optionList = [];\n                  data.forEach(function (element) {\n                    element.pid = element.pId;\n                    optionList.push(element);\n                  });\n                  _this.payModeOptions = optionList;\n                  _this.keyPayMode += 1;\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initData() {\n        return _initData.apply(this, arguments);\n      }\n\n      return initData;\n    }(),\n    setData: function setData(response) {\n      var data = response.data,\n          orgStr = response.orgStr,\n          billFlowData = response.billFlowData,\n          sumAmount = response.sumAmount; // 检查当前 状态 是否有特殊操作\n\n      var filterOption = billFlowData.billFlowNode.filter(function (f) {\n        return f.isCurrentState;\n      });\n\n      if ((filterOption || []).length) {\n        if (filterOption[0].option > 0) {\n          // alert('当前节点有特殊操作')\n          var userId = this.$store.state.user.info.uid;\n\n          if (filterOption[0].option === 99 && filterOption[0].personId === userId) {\n            // 特殊操作为支付\n            this.isPaid = true;\n          }\n        }\n      }\n\n      this.ruleForm = data;\n      this.ruleForm.fileList = data.upFile;\n      this.ruleForm.sumAmount = sumAmount;\n      this.attitudeAmount = data.attitudeAmount;\n      this.orgStr = orgStr;\n      this.billFlow = billFlowData;\n      this.attitudePara = {\n        formId: billFlowData.formId,\n        billFlowId: data.billFlowId,\n        planId: data.id\n      };\n      this.isLoad = true; // 填充 明细列表\n\n      this.payModes = data.cgPaidDetails;\n      this.loading = false; // loading 状态关闭\n\n      this.activate = true; // 加载部门组件\n    },\n    closeThePage: function closeThePage() {\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName);\n    },\n    updateFlow: function updateFlow() {\n      this.closeThePage();\n    },\n    openContract: function openContract(id) {\n      this.$router.push({\n        name: 'ContractDetail',\n        query: {\n          id: id,\n          refreshRouterName: this.$route.name\n        },\n        params: {\n          id: id\n        }\n      });\n    },\n    getPayModeName: function getPayModeName(type) {\n      if (type !== null) {\n        var entryType = this.payModeOptions.find(function (f) {\n          return f.value === type;\n        });\n\n        if (entryType !== undefined) {\n          return entryType.name;\n        } else {\n          return '';\n        }\n      } else {\n        return '';\n      }\n    },\n    getSummaries: function getSummaries(param) {\n      var columns = param.columns,\n          data = param.data;\n      var sums = [];\n      columns.forEach(function (column, index) {\n        if (index === 0) {\n          sums[index] = '合计';\n          return;\n        }\n\n        var values = data.map(function (item) {\n          return Number(item[column.property]);\n        });\n\n        if (!values.every(function (value) {\n          return isNaN(value);\n        })) {\n          sums[index] = values.reduce(function (prev, curr) {\n            var value = curr;\n\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0); // sums[index] += ' 元'\n        } else {\n          sums[index] = '';\n        }\n      });\n      sums[2] = Number(sums[2]).toFixed(4);\n      this.ruleForm.attitudeAmount = sums[2];\n      return sums;\n    },\n    save: function save() {\n      var _this2 = this;\n\n      // 保存审批步骤\n      // 1.调用组件中的验证\n      // 2.获取表单参数数据\n      // 3.请求 审批\n      var result = this.$refs.flowAttitude.checkValidate();\n\n      if (result) {\n        var attitudeData = this.$refs.flowAttitude.getPostData();\n        var newObj = JSON.parse(JSON.stringify(this.ruleForm));\n        var paidData = {};\n        paidData.id = newObj.id;\n        paidData.attitudeAmount = newObj.attitudeAmount;\n        paidData.storageAmount = newObj.storageAmount;\n        paidData.dues = newObj.dues;\n        paidData.invoice = newObj.invoice;\n        paidData.capitalType = newObj.capitalType; // 提交数据\n\n        var postData = {\n          attitude: attitudeData,\n          cgPaid: paidData\n        };\n        this.loading = true;\n        (0, _paid.addAttitude)(postData).then(function (res) {\n          if (res.success) {\n            _this2.$message.success('保存成功'); // 如果只填写意见不转下一步 需要子组件更新流程审批信息\n            // if (this.type !== 2) {\n            //   this.list = attitudeList\n            // }\n\n\n            _this2.closeThePage(); // 跳转\n\n          } else {\n            _this2.$message.error(res.message);\n          }\n\n          _this2.loading = false;\n        }).catch(function () {\n          _this2.loading = false;\n        });\n      }\n    },\n    // openAcceptance(row) {\n    //   if (row.payMode === 2 || row.payMode === 3) {\n    //     var total_list = []\n    //     this.acceptanceList.forEach(e => {\n    //       if (e.capitalType === this.getPayModeName(row.payMode)) {\n    //         total_list.push(e)\n    //       }\n    //     })\n    //     var data = {\n    //       list: total_list\n    //     }\n    //     this.currentRow = data\n    //     this.dialogTitle = this.getPayModeName(row.payMode) + '已选择承兑明细'\n    //     this.comName = 'AcceptanceList'\n    //     this.dialogWidth = '60%'\n    //     this.dialogTableVisible = true\n    //   }\n    // },\n    openAcceptance: function openAcceptance(row, type) {\n      this.$router.push({\n        name: 'ChengDuiXinXiDetails',\n        query: {\n          id: row.id,\n          type: type,\n          refreshRouterName: this.$route.name\n        }\n      });\n    },\n    checkAcceptance: function checkAcceptance() {\n      // 选择承兑\n      // if (row.payMode === 2 || row.payMode === 3) {\n      //   var data = {\n      //     id: row.id,\n      //     capitalType: row.payMode,\n      //     list: this.acceptanceList\n      //   }\n      //   this.currentRow = data\n      //   this.dialogTitle = this.getPayModeName(row.payMode) + '选择承兑明细'\n      //   this.comName = 'CheckAcceptance'\n      //   this.dialogWidth = '60%'\n      //   this.dialogTableVisible = true\n      // }\n      var _data = this.ruleForm;\n\n      if (_data.capitalType === 2 || _data.capitalType === 3) {\n        var data = {\n          id: _data.id,\n          capitalType: _data.capitalType,\n          list: this.acceptanceList\n        };\n        this.currentRow = data;\n        this.dialogTitle = this.getPayModeName(_data.capitalType) + '选择承兑明细';\n        this.comName = 'CheckAcceptance';\n        this.dialogWidth = '60%';\n        this.dialogTableVisible = true;\n      }\n    },\n    dialogClose: function dialogClose(data, state) {\n      this.addAcceptance(data, state);\n      this.dialogTableVisible = false;\n    },\n    addAcceptance: function addAcceptance(data, state) {\n      // if (state === 'add') {\n      //   if (data.amount > this.payModes.find(f => f.id === data.id).attitudeAmount) {\n      //     this.$message.error('支付金额不可大于审批金额')\n      //   } else {\n      //     var total_list = []\n      //     this.acceptanceList.forEach(e => {\n      //       if (e.capitalType !== this.getPayModeName(data.capitalType)) {\n      //         total_list.push(e)\n      //       }\n      //     })\n      //     data.list.forEach(e => {\n      //       total_list.push(e)\n      //     })\n      //     this.acceptanceList = total_list\n      //     this.payModes.find(f => f.id === data.id).paid = data.amount\n      //   }\n      // }\n      if (state === 'add') {\n        if (data.amount > this.ruleForm.attitudeAmount) {\n          this.$message.error('支付金额不可大于审批金额');\n        } else {\n          this.acceptanceList = data.list;\n          this.ruleForm.amount = data.amount;\n        }\n      }\n    },\n    wantToPay: function wantToPay() {\n      var _this3 = this;\n\n      // const { flowAttitude } = this.$refs\n      // flowAttitude.$refs['ruleForm'].validate(valid => {\n      //   if (valid) {\n      //     const newObj = JSON.parse(JSON.stringify(flowAttitude.ruleForm))\n      //     newObj.billId = flowAttitude.para.planId\n      //     newObj.formId = flowAttitude.para.formId\n      //     newObj.operation = flowAttitude.data.find(f => f.value === flowAttitude.ruleForm.attitudeType).text\n      //     if (flowAttitude.ruleForm.attitudeType === 3) {\n      //       if (flowAttitude.ruleForm.backGroup === 0) {\n      //         newObj.operation += '制单'\n      //       } else {\n      //         newObj.operation += flowAttitude.billFlowNodeList.find(f => f.value === flowAttitude.ruleForm.backGroup).name\n      //       }\n      //     }\n      //     this.$confirm('是否确定', '提示', {\n      //       confirmButtonText: '确定',\n      //       cancelButtonText: '取消',\n      //       type: 'warning'\n      //     }).then(() => {\n      //       if (flowAttitude.ruleForm.attitudeType !== 3) {\n      //         var newObj2 = JSON.parse(JSON.stringify(this.ruleForm))\n      //         if (newObj2.amount === 0) {\n      //           this.$message.error('支付金额不可为0')\n      //         } else if (this.acceptanceList.length < 1 && (newObj2.capitalType === 2 || newObj2.capitalType === 3)) {\n      //           this.$message.error('请选择承兑列表')\n      //         } else {\n      //           var postData = {}\n      //           postData.id = newObj2.id\n      //           // postData.paid = newObj2.paid\n      //           postData.amount = newObj2.amount\n      //           postData.capitalType = newObj2.capitalType\n      //           var acceptances = []\n      //           this.acceptanceList.forEach(e => {\n      //             var data = {\n      //               id: e.id\n      //             }\n      //             acceptances.push(data)\n      //           })\n      //           postData.acceptanceList = acceptances\n      //           payFor(postData).then(() => {\n      //             this.$refs['flowAttitude'].add(newObj)\n      //           })\n      //         }\n      //       } else {\n      //         this.$refs['flowAttitude'].add(newObj)\n      //       }\n      //     })\n      //   }\n      // })\n      // 保存审批步骤\n      // 1.调用组件中的验证\n      // 2.获取表单参数数据\n      // 3.请求 审批\n      var result = this.$refs.flowAttitude.checkValidate();\n\n      if (result) {\n        var attitudeData = this.$refs.flowAttitude.getPostData();\n        var newObj = JSON.parse(JSON.stringify(this.ruleForm));\n        var paidData = {};\n        paidData.id = newObj.id;\n        paidData.amount = newObj.amount;\n        paidData.capitalType = newObj.capitalType;\n        var acceptances = [];\n        this.acceptanceList.forEach(function (e) {\n          var data = {\n            id: e.id\n          };\n          acceptances.push(data);\n        });\n        paidData.acceptanceList = acceptances; // 提交数据\n\n        var postData = {\n          attitude: attitudeData,\n          cgPaid: paidData\n        };\n        this.loading = true;\n        (0, _paid.payFor)(postData).then(function (res) {\n          if (res.success) {\n            _this3.$message.success('支付成功'); // 如果只填写意见不转下一步 需要子组件更新流程审批信息\n            // if (this.type !== 2) {\n            //   this.list = attitudeList\n            // }\n\n\n            _this3.closeThePage(); // 跳转\n\n          } else {\n            _this3.$message.error(res.message);\n          }\n\n          _this3.loading = false;\n        }).catch(function () {\n          _this3.loading = false;\n        });\n      }\n    } // openSupplier(id) {\n    //   this.$router.push({ name: 'SupplierDetail', query: { id: id, refreshRouterName: this.$route.name }, params: { id: id }})\n    // },\n\n  }\n};\nexports.default = _default;",null]}
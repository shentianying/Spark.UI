{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\TreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\TreeSelect.vue","mtime":1630550253543},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _typeof2 = _interopRequireDefault(require(\"D:/Projects/spark/Spark.UI/node_modules/@babel/runtime/helpers/typeof\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n * !!!!!!请注意el-cascader存在bug，options中的value不能为number类型的0!!!!!!否则点击清空标签时会报错并且不能清空\r\n * 如下:\r\n * options: [{\r\n          value: 0,     //这个不能是number类型的0，可以替换成'0'！！！！！！\r\n          label: '指南',\r\n          children: [{\r\n            value: '1',\r\n            label: '设计原则',\r\n            children: [{\r\n              value: 1,\r\n              label: '一致'\r\n            }]\r\n          }]\r\n *\r\n *\r\n * 由于上述bug，在本组件中会将所有value转换成string类型（通过value.toString()），并且在返回时自动转换其对应类型。\r\n * 基于@components/OrgSelect/index2.vue的修改\r\n * 由于原组件双向绑定方式的问题，导致在其父组件修改prop时不能更新到组件内，故在这里再做修改\r\n */\nvar _default = {\n  name: 'TreeSelect',\n  components: {},\n  model: {\n    prop: 'selectValue',\n    // 指向props的参数名\n    event: 'change' // 事件名称\n\n  },\n  props: {\n    selectValue: {\n      type: [String, Number, Array],\n      default: null\n    },\n    // 获取你选中的值，传出去的v-model的值\n    options: {\n      type: Array,\n      default: null\n    },\n    // 可选项数据源，键名可通过 Props 属性配置\n    // 组件参数\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: {\n      type: Boolean,\n      default: false\n    },\n    // 已选中的选项的Tag，是否折叠显示\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    checkStrictly: {\n      type: Boolean,\n      default: false\n    },\n    // 是否严格的遵守父子节点不互相关联\n    expandTrigger: {\n      type: String,\n      default: 'click'\n    },\n    // click / hover\n    propsValue: {\n      type: String,\n      default: 'value'\n    },\n    // 绑定的字段值\n    propsLabel: {\n      type: String,\n      default: 'name'\n    },\n    // 绑定的文本\n    size: {\n      type: String,\n      default: 'mini'\n    },\n    // 可选值：medium / small / mini\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    // 搜索功能\n    placeholder: {\n      type: String,\n      default: '请选择'\n    },\n    // 输入框占位文本\n    separator: {\n      type: String,\n      default: '/'\n    },\n    // 选项分隔符\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    // 输入框中是否显示选中值的完整路径\n    selectStyle: {\n      type: String,\n      default: 'width:100%'\n    },\n    // 样式\n    // showRootNode: { type: Boolean, default: false }, // 是否显示根节点\n    dataMode: {\n      type: Number,\n      default: 0\n    } // 数据默认显示方式 0：全部显示，1：根据自己的权限显示\n\n  },\n  data: function data() {\n    return {\n      valueType: 'number',\n      props: {\n        expandTrigge: 'click',\n        // 触发方式 click hover\n        multiple: false,\n        // 是否多选\n        checkStrictly: false,\n        // 是否严格的遵守父子节点不互相关联\n        emitPath: true,\n        // 在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置false，则只返回该节点的值\n        lazy: false,\n        //\t是否动态加载子节点，需与 lazyLoad 方法结合使用\n        lazyLoad: function lazyLoad(node, resolve) {\n          resolve;\n        },\n        // 加载动态数据的方法，仅在 lazy 为 true 时有效 ---- function(node, resolve)，node为当前点击的节点，resolve为数据加载完成的回调(必须调用)\n        value: 'value',\n        // 指定选项标签为选项对象的某个属性值\n        label: 'name',\n        // 指定选项标签为选项对象的某个属性值\n        children: 'childs',\n        // 指定选项的子选项为选项对象的某个属性值\n        disabled: 'disabled',\n        // 指定选项标签为选项对象的某个属性值\n        leaf: 'leaf' // 指定选项的叶子节点的标志位为选项对象的某个属性值\n\n      }\n    };\n  },\n  computed: {\n    myOptions: function myOptions() {\n      var options = JSON.parse(JSON.stringify(this.options));\n      this.transfOptions(options);\n      console.log(options);\n      return options;\n    },\n    modelValue: {\n      get: function get() {\n        return this.findAllNodeParents(this.selectValue, this.myOptions);\n      },\n      set: function set(val) {\n        var _this = this;\n\n        var value = val;\n\n        if (this.multiple) {\n          // 多选\n          value = value.map(function (m) {\n            return _this.valueType === 'number' ? Number(m[m.length - 1]) : m[m.length - 1];\n          });\n          this.$emit('change', value);\n        } else {\n          // 单选\n          value = this.valueType === 'number' ? Number(value[value.length - 1]) : value[value.length - 1];\n          this.$emit('change', value);\n        }\n      }\n    }\n  },\n  created: function created() {\n    this.props.multiple = this.multiple;\n    this.props.checkStrictly = this.checkStrictly;\n    this.props.expandTrigger = this.expandTrigger;\n    this.props.value = this.propsValue;\n    this.props.label = this.propsLabel;\n  },\n  methods: {\n    /**\r\n     * @description: 将optons所有value值转换成string类型\r\n     */\n    transfOptions: function transfOptions(options) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          children = _this$props.children;\n\n      if (Array.isArray(options)) {\n        options.forEach(function (e) {\n          _this2.valueType = (0, _typeof2.default)(e[value]);\n\n          _this2.$set(e, value, e[value].toString());\n\n          if (e[children]) {\n            _this2.transfOptions(e[children]);\n          }\n        });\n      }\n    },\n\n    /**\r\n     * @description: 找到子节点数组的所有父节点\r\n     */\n    findAllNodeParents: function findAllNodeParents(nodes, options) {\n      var _this3 = this;\n\n      if (Array.isArray(nodes)) {\n        return nodes.map(function (node) {\n          return _this3.findNodeParents(node, options);\n        });\n      } else {\n        return this.findNodeParents(nodes, options);\n      }\n    },\n\n    /**\r\n     * @description: 根据子节点找其所有父节点\r\n     * @param {*} arr\r\n     */\n    findNodeParents: function findNodeParents(node, options) {\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          children = _this$props2.children;\n\n      if (Array.isArray(options)) {\n        var len = options.length;\n\n        for (var i = 0; i < len; i++) {\n          var e = options[i];\n\n          if (e[value].toString() === node.toString()) {\n            return [node.toString()];\n          } else if (e[children]) {\n            var data = this.findNodeParents(node, e[children]);\n\n            if (data.length) {\n              data.unshift(e.value);\n              return data;\n            }\n          }\n        }\n      }\n\n      return [];\n    }\n  }\n};\nexports.default = _default;",null]}
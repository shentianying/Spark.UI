{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowAttitude.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowAttitude.vue","mtime":1635749455595},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// 查看流程进度\r\nimport { addAttitude, initAttitude } from '@/api/xtgl/billFlow'\r\nimport UpFile from '@/components/UpLoad/UpFile'\r\nexport default {\r\n  name: 'FlowAttitude',\r\n  components: {\r\n    UpFile\r\n  },\r\n  props: {\r\n    para: { type: Object, default: null },\r\n    show: { type: Boolean, default: false }, // 是否显示表单和撤销\r\n    toVoid: { type: Boolean, default: true }, //  是否显示作废，默认显示\r\n    toBack: { type: Boolean, default: true }, //  是否显示退回到制单，默认显示\r\n    toBeforeState: { type: Boolean, default: true }, // 是否允许退到当前state状态之前（不包括制单）默认可以, false 的话，退回到制单状态也默认不显示\r\n    toContent: { type: Boolean, default: true }, // 显示审批内容文本框\r\n    showStay: { type: Boolean, default: true } // 是否显示\"只填写意见不转下一步\"选项\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        id: 0,\r\n        formId: 0,\r\n        billId: 0,\r\n        title: '',\r\n        content: '',\r\n        fileList: [],\r\n        attitudeType: 1,\r\n        backGroup: null, // 0 制单\r\n        type: 1 // 操作类型\r\n      },\r\n      loading: false,\r\n      list: null,\r\n      billFlowNodeList: null,\r\n      activeName: ['1'],\r\n      upFiles: [],\r\n      comName: 'UpFile',\r\n      fileList: [],\r\n      showBack: true, //  是否显示退回\r\n      attitudeTypeList: [], // 列表\r\n      showRevoke: false, // 显示撤销\r\n      showForm: false, // 显示提交审批表单\r\n      showAll: true, // 显示所有\r\n      rules: {\r\n        content: [{ required: true, message: '请输入', trigger: 'blur' }],\r\n        type: [{ required: true, message: '请选择', trigger: 'change' }]\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    para() {\r\n      this.fetchData()\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    // 显示表单\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      //  如果可退回到制单，backGroup初始值为0，默认 显示制单\r\n      if (this.toBack) {\r\n        this.ruleForm.backGroup = 0\r\n      }\r\n\r\n      const { planId, billFlowId, formId } = this.para\r\n      const postData = {\r\n        billId: planId,\r\n        billFlowId: billFlowId,\r\n        formId: formId,\r\n        toBeforeState: this.toBeforeState\r\n      }\r\n      initAttitude(postData).then(response => {\r\n        const { data, beforeBillFlowNodeList, checkState, isRevoke, attitudeTypeList } = response\r\n        this.list = data\r\n        this.billFlowNodeList = beforeBillFlowNodeList\r\n        this.attitudeTypeList = attitudeTypeList\r\n        if (this.show) {\r\n          // 跟下面一样的道理,这里也应该这样写,如果担心不是boolean型的话可以用Boolean()强转一次,不过暂时看着似乎没必要\r\n          this.showRevoke = isRevoke.item1 // true：可以撤回\r\n          // true：可以审批\r\n          // 需要这样写,一个是这样简洁,第二个是,如果是false的时候需要重新赋值false,否则第二次进入缓存的页面时填报栏的状态还是上次的模样,导致作废的单子也会出现填报界面\r\n          this.showForm = checkState.item1\r\n        }\r\n        if ((this.list || []).length === 0 && !this.show) {\r\n          this.showAll = false\r\n        }\r\n        if (this.billFlowNodeList === null && this.toBack === false) {\r\n          this.showBack = false\r\n        }\r\n      })\r\n    },\r\n    submitForm() {\r\n      if (this.checkValidate()) {\r\n        const postData = this.getPostData()\r\n        this.$confirm('是否确定', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          this.add(postData)\r\n        }).catch(() => { this.loading = false })\r\n      }\r\n    },\r\n    checkValidate() {\r\n      let flag = false\r\n      this.$refs['ruleForm'].validate(valid => {\r\n        if (valid) {\r\n          flag = true\r\n        }\r\n      })\r\n      return flag\r\n    },\r\n    // 获取请求参数\r\n    getPostData() {\r\n      const newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n      newObj.billId = this.para.planId\r\n      newObj.formId = this.para.formId\r\n\r\n      // 退回 的审批动作 字符串 由前端拼接，其他的审批动作，由后端根据attitudeType 后端拼接。\r\n      if (this.ruleForm.attitudeType === 3) {\r\n        newObj.operation = this.attitudeTypeList.find(f => f.value === this.ruleForm.attitudeType).name\r\n        if (this.ruleForm.backGroup === 0) {\r\n          newObj.operation += '制单'\r\n        } else {\r\n          newObj.operation += this.billFlowNodeList.find(f => f.value === this.ruleForm.backGroup).name\r\n        }\r\n      }\r\n      if (!newObj.backGroup) { newObj.backGroup = 0 }\r\n\r\n      return newObj\r\n    },\r\n    add(newObj) {\r\n      this.loading = true\r\n      addAttitude(newObj).then(response => {\r\n        const { attitudeList, message, billFlowState } = response\r\n        // 如果只填写意见不转下一步 需要更新流程\r\n        if (this.attitudeType !== 2) {\r\n          this.list = attitudeList\r\n        }\r\n        this.ruleForm.content = ''\r\n        this.$message(message)\r\n        this.$emit('update', billFlowState) // 更新流程\r\n        this.loading = false\r\n      }).catch(() => { this.loading = false })\r\n    },\r\n    revoke() {\r\n      const postData = {}\r\n      postData.billId = this.para.planId\r\n      postData.formId = this.para.formId\r\n      postData.title = '撤回人'\r\n      postData.content = '撤回单据'\r\n      postData.operation = '撤回'\r\n      postData.attitudeType = -2\r\n      this.add(postData)\r\n    },\r\n    replaceAll(str) {\r\n      return str.replace(/\\n/g, '<br>')\r\n    },\r\n    radioChange() {\r\n      this.ruleForm.content = ''\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\form\\DateRange.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\form\\DateRange.vue","mtime":1632281613203},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  model: { event: 'change', prop: 'value' },\r\n  props: {\r\n    endpPlaceholder: {\r\n      type: String,\r\n      default: '选择'\r\n    },\r\n    startPlaceholder: {\r\n      type: String,\r\n      default: '选择'\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: 'small'\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'daterange'\r\n    },\r\n    value: {\r\n      type: Array,\r\n      default() {\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    start: {\r\n      get: function() {\r\n        return this.value[0]\r\n      },\r\n      set: function(val) {\r\n        // const range = ['datetimerange', 'daterange', 'monthrange']\r\n        // if (this.component === 'DatePicker' && range.includes(this.dateType)) {\r\n        //   val = val || []\r\n        //   const hour_24 = 24 * 60 * 60 * 1000\r\n        //   val[0] = val[0] ? this.utils.parseTime(new Date(val[0])) : val[0]\r\n        //   val[1] = val[1] ? this.utils.parseTime(new Date(val[1].getTime() + hour_24 - 1)) : val[1]\r\n        // }\r\n        this.setDate([val, this.end])\r\n        // this.$emit('change', this.sortTime([val, this.end]))\r\n      }\r\n    },\r\n    end: {\r\n      get: function() {\r\n        return this.value[1]\r\n      },\r\n      set: function(val) {\r\n        this.setDate([this.start, val])\r\n        // this.$emit('change', this.sortTime([this.start, val]))\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setDate(tiemArr) {\r\n      const [t1, t2] = tiemArr\r\n      const time1 = new Date(t1)\r\n      const time2 = new Date(t2)\r\n      // console.log('time1 instanceof Date && time2 instanceof Date', time1, time2, time1 instanceof Date && time2 instanceof Date)\r\n      if ((t1 && time1 instanceof Date) && (t2 && time2 instanceof Date)) {\r\n        if (time1 > time2) {\r\n          tiemArr = [time2, time1]\r\n        }\r\n      }\r\n      if (tiemArr[0] instanceof Date) {\r\n        tiemArr[0] = tiemArr[0].toLocaleDateString().replaceAll('/', '-')\r\n        tiemArr[0] = `${tiemArr[0]} 00:00:00`\r\n      }\r\n      if (tiemArr[1] instanceof Date) {\r\n        tiemArr[1] = tiemArr[1].toLocaleDateString().replaceAll('/', '-')\r\n        tiemArr[1] = `${tiemArr[1]} 23:59:59`\r\n      }\r\n      this.$emit('change', tiemArr)\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\dictionary.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\dictionary.vue","mtime":1635216068844},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getDictionaryPaging } from '@/api/xtgl/dictionary'\r\n// import { getTree } from '@/utils/index'\r\nimport DictionaryEdit from './dictionaryEdit'\r\nexport default {\r\n  name: 'Dictionary',\r\n  components: {\r\n    DictionaryEdit\r\n  },\r\n  data() {\r\n    return {\r\n      list: [],\r\n      listLoading: false,\r\n      dialogTableVisible: false,\r\n      currentRow: null,\r\n      postTypeList: [],\r\n      total: 0,\r\n      currentPage: 1,\r\n      pageSize: this.utils.getPersonalSettings().pageSize,\r\n      searchText: '',\r\n      comName: 'DictionaryEdit'\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      this.listLoading = true\r\n      var postData = {}\r\n      postData.currentPage = this.currentPage\r\n      postData.pageSize = this.pageSize\r\n      postData.type = this.searchText\r\n      getDictionaryPaging(postData).then(response => {\r\n        const { data1, data2, count } = response\r\n        this.list = data1\r\n        this.total = count\r\n        // data2\r\n        if (data2) {\r\n          var newTypeList = [...new Set(data2.map(m => m.type))] // 类型 去重\r\n          newTypeList = newTypeList.map(m => { return { type: m } })\r\n          newTypeList.forEach(e => {\r\n            var findData = data2.find(f => f.type === e.type && f.typeName !== '')\r\n            if (findData) {\r\n              e.typeName = findData.typeName\r\n            } else {\r\n              e.typeName = ''\r\n            }\r\n          })\r\n          this.postTypeList = newTypeList\r\n        }\r\n\r\n        this.listLoading = false\r\n      })\r\n    },\r\n    dialogClose() {\r\n      this.dialogTableVisible = false\r\n      this.fetchData()\r\n    },\r\n    handleDelete() {\r\n    },\r\n    sizeChange(val) {\r\n      this.pageSize = val\r\n      this.fetchData()\r\n    },\r\n    handleEdit(row) {\r\n      this.currentRow = row\r\n      this.dialogTableVisible = true\r\n    },\r\n    handleAdd() {\r\n      this.currentRow = null\r\n      this.dialogTableVisible = true\r\n    },\r\n    goSearch() {\r\n      this.fetchData()\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\form\\CostPlanSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\form\\CostPlanSelect.vue","mtime":1635216068722},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { GetCostPlanPaging } from '@/api/cwgl/CostPlan'\r\nimport selectCostPlan from '@/components/Other/fpgl/selectCostPlan'\r\nexport default {\r\n  name: 'CostPlanSelect',\r\n  components: { selectCostPlan },\r\n  model: { event: 'change', prop: 'value' },\r\n  props: {\r\n    props: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          value: 'id',\r\n          label: 'name'\r\n        }\r\n      }\r\n    },\r\n    propsValue: { type: String, default: '' }, // 与props.value作用相同，但优先于其\r\n    propsLabel: { type: String, default: '' }, // 与props.value作用相同，但优先于其\r\n\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    multiple: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: '选择'\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: 'small'\r\n    },\r\n    value: {\r\n      type: [Array, String, Number],\r\n      default: ''\r\n    },\r\n    maxItem: { type: Number, default: 3 } // 多选最大个数\r\n  },\r\n  data() {\r\n    return {\r\n      plantList: [],\r\n      loading: false\r\n    }\r\n  },\r\n  computed: {\r\n    opLabel() {\r\n      return this.propsLabel || this.props.label\r\n    },\r\n    opValue() {\r\n      return this.propsValue || this.props.value\r\n    },\r\n    inputVal: {\r\n      set(val) {\r\n        this.$emit('change', val)\r\n        let select\r\n        if (this.multiple) {\r\n          select = this.plantList.filter(({ id }) => val.includes(id))\r\n        } else {\r\n          select = this.plantList.filter(({ id }) => id === val)[0]\r\n        }\r\n        this.$emit('select', select)\r\n      },\r\n      get() {\r\n        return this.value\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getCostPlantList()\r\n  },\r\n  methods: {\r\n    getcostPlan(list) {\r\n      list = list || []\r\n      if (this.multiple) {\r\n        this.inputVal = [...this.inputVal, ...list.map(item => item.id)]\r\n      } else {\r\n        this.inputVal = list[0].id\r\n      }\r\n    },\r\n    selectPlan() {\r\n      this.$refs.elSelect.blur()\r\n      this.$refs.planRef.openDialog()\r\n    },\r\n    async getCostPlantList() {\r\n      try {\r\n        this.loading = true\r\n        const res = await GetCostPlanPaging({ currentPage: 1, pageSize: this.utils.getPersonalSettings().pageSize, states: [10000], type: 3 })\r\n        this.plantList = res.data\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    }\r\n    // getRemotePerson(query) {\r\n    //   query = query.trim()\r\n    //   if (query !== '') {\r\n    //     this.loading = true\r\n    //     setTimeout(() => {\r\n    //       getPersonList({name:query}).then(response => {\r\n    //         this.personList = response.data\r\n    //         this.loading = false\r\n    //       })\r\n    //     }, 200)\r\n    //   } else {\r\n    //     this.personList = []\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n",null]}
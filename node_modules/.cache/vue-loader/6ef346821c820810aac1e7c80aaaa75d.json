{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\component\\flow.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\component\\flow.vue","mtime":1624071363336},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nexport default {\r\n  name: 'Flow',\r\n  components: {\r\n  },\r\n  // model: {\r\n  //   prop: 'selectValue', // 指向props的参数名\r\n  //   event: 'change'// 事件名称\r\n  // },\r\n  props: {\r\n    flowNodeList: { type: Array, default: null },\r\n    dropDownData: { type: Object, default: null }\r\n  },\r\n  data() {\r\n    return {\r\n      stateList: []\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    this.dropDownData.formStateList.sort((a, b) => a.value - b.value).forEach((e, i) => {\r\n      if (e.isFlowNode) {\r\n        var tmp = { ...e }\r\n        if (tmp.isCheckup) {\r\n          tmp.stateNode = this.groupBy(this.flowNodeList.filter(f => f.state === e.value), function(item) { return [item.group] })\r\n        }\r\n        this.stateList.push(tmp)\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n    },\r\n    findformFlowOptionList(option) {\r\n      var r = ''\r\n      var o = this.dropDownData.options.find(f => f.value === option)\r\n      if (o) { r = o.name }\r\n      return r\r\n    },\r\n    groupBy(array, f) {\r\n      const groups = {}\r\n      array.forEach(function(o) {\r\n        const group = JSON.stringify(f(o))\r\n        groups[group] = groups[group] || []\r\n        groups[group].push(o)\r\n      })\r\n      return Object.keys(groups).map(function(group) { return groups[group] })\r\n    }\r\n  }\r\n}\r\n",null]}
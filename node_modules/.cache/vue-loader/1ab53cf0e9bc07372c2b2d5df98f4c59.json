{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\byj\\Deposit\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\byj\\Deposit\\index.vue","mtime":1635749455620},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport TableEx from '@/components/TableEx'\r\nimport SearchBar from '@/components/SearchBar'\r\nimport { GetDepositPaging } from '@/api/cwgl/Deposit'\r\nexport default {\r\n  name: 'DepositIndex',\r\n  components: {\r\n    SearchBar,\r\n    TableEx\r\n  },\r\n  data() {\r\n    return {\r\n      alterDisabled: false, // 是否点击变更\r\n      size: 'mini',\r\n      searchData: require('./DepositSearchData').default(), // 渲染搜索栏数据\r\n      lastSearch: null, // 最近一次搜索的数据\r\n      amount: 0, // 统计金额\r\n      filter: {// 过滤数据\r\n        type: 4,\r\n        types: [\r\n          { label: '我发起的', value: 0 },\r\n          { label: '待审批', value: 1 },\r\n          { label: '已审批', value: 2 },\r\n          { label: '变更中', value: 3 },\r\n          { label: '列表', value: 4 }\r\n        ]\r\n      },\r\n      /* 列表数据相关 */\r\n      table: {\r\n        columns: [\r\n          {\r\n            label: '编号', // 表头\r\n            prop: 'number', // 渲染的属性\r\n            class: 'link', // class\r\n            minWidth: '180', // 最小宽度\r\n            click: (row) => this.handleDetails(row)\r\n          },\r\n          {\r\n            label: '部门',\r\n            prop: 'orgName',\r\n            minWidth: '200'\r\n          },\r\n          {\r\n            label: '类型',\r\n            prop: 'depositType',\r\n            minWidth: '120'\r\n          },\r\n          {\r\n            label: '领用人',\r\n            prop: 'personName',\r\n            minWidth: '120'\r\n          },\r\n          {\r\n            align: 'right',\r\n            label: '金额',\r\n            prop: 'applicationAmount',\r\n            format: 'money',\r\n            minWidth: '120'\r\n          },\r\n          {\r\n            label: '客商',\r\n            prop: 'bussinessMan',\r\n            width: '120'\r\n          },\r\n          {\r\n            label: '回收日期',\r\n            format: 'date',\r\n            prop: 'planReturnDate',\r\n            width: '120'\r\n          },\r\n          {\r\n            business: 'state' // 业务部分的快捷使用参考 src\\components\\TableEx\\Column\\businessList.js\r\n          },\r\n          {\r\n            label: '支付',\r\n            prop: 'isPayout',\r\n            width: '120',\r\n            format: (val) => val ? '是' : '否'\r\n          },\r\n          {\r\n            label: '回收',\r\n            prop: 'isReturn',\r\n            width: '120',\r\n            format: (val) => val ? '是' : '否'\r\n          },\r\n          {\r\n            label: '待处理',\r\n            prop: 'pendingPerson',\r\n            width: '150',\r\n            format: (val, format, row, column) => {\r\n              if (row.state === 10) {\r\n                const modifyBillFlow = row.modifyBillFlow\r\n                const personList = []\r\n                if (Array.isArray(modifyBillFlow)) {\r\n                  modifyBillFlow.forEach(el => {\r\n                    el.pendingPerson = []\r\n                    el.pendingPerson.push(el.billFlow.billFlowNode.filter(e => e.isCurrentState === true && e.isChecked === false)[0])\r\n                    el?.pendingPerson.forEach(ele => {\r\n                      personList.push(ele?.person.name)\r\n                    })\r\n                  })\r\n                  return personList.join('、')\r\n                } else {\r\n                  return ''\r\n                }\r\n              } else {\r\n                return Array.isArray(val) ? val.join('、') : val\r\n              }\r\n            }\r\n          },\r\n          {\r\n            business: 'createUser' // 业务部分的快捷使用参考 src\\components\\TableEx\\Column\\businessList.js\r\n          }\r\n        ],\r\n        list: [],\r\n        exLoading: false, // 导出loading\r\n        tbLoading: false, // table loading\r\n        total: 0,\r\n        currentPage: 1,\r\n        pageSize: this.utils.getPersonalSettings().pageSize\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 最后决定使用beforeRouteEnter路由守卫代替activated,和created;\r\n   * 其好处是:无论用哪种方式进入都会触发,并且只触发一次;\r\n   */\r\n  beforeRouteEnter(to, from, next) {\r\n    next(vm => {\r\n      vm.fetchData()\r\n    })\r\n  },\r\n  methods: {\r\n    fetchData(type) { // SearchBar 事件类型 重置:reset  搜索:search\r\n      switch (type) {\r\n        case 'filter':\r\n          this.table.currentPage = 1\r\n          break\r\n        case 'reset':\r\n        case 'search':\r\n          this.table.currentPage = 1\r\n          this.lastSearch = null\r\n          break\r\n      }\r\n      this.table.tbLoading = true\r\n      this.getTable()\r\n        .then(res => this.parseServeDate(res))\r\n        .finally(() => {\r\n          this.table.tbLoading = false\r\n        })\r\n    },\r\n    /**\r\n     * @description:表格导出功能\r\n     */\r\n    async exportExcel() {\r\n      const Excel = this.$refs['TableEx'].initExcel()\r\n      this.getTable(1, this.table.total).then(({ data }) => {\r\n        Excel.format([{ ...Excel.sheet[0], table: data }]).export()\r\n      }).catch(() => {\r\n        this.$message.error('导出失败')\r\n        Excel.cancel()\r\n      })\r\n    },\r\n    /**\r\n     * @description: 点击变更获取变更列表\r\n     */\r\n    alterAtion() {\r\n      this.alterDisabled ? this.filter.type = 4 : this.filter.type = 3\r\n      this.alterDisabled = !this.alterDisabled\r\n      this.fetchData('filter')\r\n    },\r\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\r\n    getTable(currentPage = this.table.currentPage, pageSize = this.table.pageSize) {\r\n      // 获取请求参数\r\n      const postData = this.getSearchData()\r\n      postData.type = this.filter.type\r\n      postData.currentPage = currentPage\r\n      postData.pageSize = pageSize\r\n      // 请求开始\r\n      return GetDepositPaging(postData)\r\n    },\r\n    parseServeDate(res) {\r\n      const {\r\n        data,\r\n        count,\r\n        amount\r\n      } = res\r\n      this.$refs['SearchBar'].setData('states', 'options', data[0]?.billFlow?.form?.formState, 'init')\r\n      // this.searchData[2].options = data[0]?.billFlow?.form?.formState\r\n      // 列表数据初始化\r\n      this.amount = amount\r\n      this.table.list = data\r\n      this.table.total = count\r\n    },\r\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\r\n    getSearchData() {\r\n      if (this.lastSearch === null) {\r\n        this.lastSearch = {}\r\n        this.searchData.forEach(item => {\r\n          const { value, transformType, name } = item\r\n          if (transformType === 'property-serial') {\r\n            value.forEach((ele, index) => {\r\n              const serial = index + 1\r\n              this.lastSearch[name + serial] = ele\r\n            })\r\n          } else {\r\n            this.lastSearch[name] = value\r\n          }\r\n        })\r\n      }\r\n      // 将查询组件里的状态, 支付, 回收选项与是否点击变更按钮关联\r\n      this.searchData.forEach(item => {\r\n        if (item.hasOwnProperty('disabled')) {\r\n          item.disabled = this.alterDisabled\r\n        }\r\n      })\r\n      this.lastSearch.isModify = this.alterDisabled\r\n      return this.lastSearch\r\n    },\r\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\r\n    handleDetails(row, type = 'details') {\r\n      this.$router.push({ name: 'DepositDetails', query: { type, id: row.id, refreshRouterName: this.$route.name }})\r\n    },\r\n    /**\r\n     * @description: table编辑\r\n     * @param {Object} row\r\n     */\r\n    handleEdit(id = '', type) {\r\n      this.$router.push({ name: 'DepositEdit', query: { type, id, refreshRouterName: this.$route.name }})\r\n    }\r\n  }\r\n}\r\n",null]}
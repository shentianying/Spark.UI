{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\PersonSelect2.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\PersonSelect2.vue","mtime":1631261807255},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getPersonList } from '@/api/rsgl/person'\r\nimport SelectPerson from '@/components/Other/selectPerson'\r\nexport default {\r\n  name: 'PersonSelect2',\r\n  components: { SelectPerson },\r\n  model: { event: 'change', prop: 'value' },\r\n  props: {\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    multiple: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: '选择'\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: 'small'\r\n    },\r\n    value: {\r\n      type: [Array, String, Number],\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      personList: [],\r\n      loading: false\r\n    }\r\n  },\r\n  computed: {\r\n    inputVal: {\r\n      set(val) {\r\n        // console.log(val)\r\n        this.$emit('change', val)\r\n      },\r\n      get() {\r\n        return this.value\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getPersonList()\r\n  },\r\n  methods: {\r\n    getPersons(personList) {\r\n      if ((personList || []).length > 0) {\r\n        // this.personList = [...this.personList, ...personList.map(m => { return { id: m.id, name: m.name } })]\r\n        this.$nextTick(() => {\r\n          if (this.multiple) {\r\n            this.inputVal = [...this.inputVal, ...personList.map(item => item.id)]\r\n          } else {\r\n            this.inputVal = personList[0].id\r\n          }\r\n        })\r\n      }\r\n    },\r\n    selectPerson() {\r\n      this.$refs.elSelect.blur()\r\n      this.$refs.personRef.openDialog()\r\n    },\r\n    async getPersonList() {\r\n      try {\r\n        this.loading = true\r\n        const res = await getPersonList()\r\n        this.personList = res.data\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    }\r\n    // getRemotePerson(query) {\r\n    //   query = query.trim()\r\n    //   if (query !== '') {\r\n    //     this.loading = true\r\n    //     setTimeout(() => {\r\n    //       getPersonList({name:query}).then(response => {\r\n    //         this.personList = response.data\r\n    //         this.loading = false\r\n    //       })\r\n    //     }, 200)\r\n    //   } else {\r\n    //     this.personList = []\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\htly\\ProjectSiteSign\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\htly\\ProjectSiteSign\\edit.vue","mtime":1633684104562},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport FlowSelect from '@/components/Flow/flowSelect'\r\nimport MyForm from '@/components/MyForm'\r\nimport { validate } from '@/utils/validate'\r\nimport { getProjectById } from '@/api/xmgl/project.js'\r\nimport { GetBillFlow, GetProjectSiteSignById, InitProjectSiteSign, AddProjectSiteSign, PutProjectSiteSign, DeleteProjectSiteSign, UpdateProjectSiteSign } from '@/api/xmgl/ProjectSiteSign.js'\r\n\r\nexport default {\r\n  name: 'ProjectSiteSignEdit',\r\n  components: {\r\n    FlowSelect,\r\n    MyForm\r\n  },\r\n  data() {\r\n    return {\r\n      size: 'mini',\r\n      inputPlaceholder: '请输入',\r\n      selectPlaceholder: '请选择',\r\n      active: 1, // 提交进度 1: 编辑信息 2: 编辑审批流程\r\n      firstForm: {\r\n        companyId: '', // 公司id\r\n        projectId: '', // 项目id\r\n        id: 0, // 新增为0\r\n        number: '', // 新增时,编号后端生成\r\n        orgId: '', // 部门id\r\n        orgName: '', // 组织机构名称\r\n        name: '', // 签证名称\r\n        reportAmount: '', // 上报值\r\n        approveAmount: '', // 审定值\r\n        costAmount: '', // 成本值\r\n        firstRepresent: '', // 甲方代表\r\n        occurDate: '', // 发生日期\r\n        predictFinishDate: '', // 计划完成日期\r\n        coordinateType: 0, // 是否协助类型\r\n        firstPartyContent: '', // 甲方指令内容\r\n        noTransactReason: '', // 未办理原因\r\n        coordinateContent: '', // 协调配合内容\r\n        remark: '', // 备注\r\n        progressType: 1, // 进度id\r\n        sendDate: '', // 上报日期\r\n        transactDate: '', // 办理日期\r\n        fileList: [], // 附件\r\n        state: 0, // 状态\r\n        billFlow: null // 单据流程\r\n      },\r\n      firstRules: {\r\n        projectId: [\r\n          { required: true, message: '请选择项目', trigger: 'change' }\r\n        ],\r\n        name: [\r\n          { required: true, message: '请输入签证名称', trigger: 'change' }\r\n        ],\r\n        reportAmount: [\r\n          { required: true, message: '请输入上报值', trigger: 'change' },\r\n          { validator: validate.money, message: '金额格式不正确', trigger: 'change' },\r\n          { validator: validate.max_amount, message: '超过所能存储的最大金额', trigger: 'change' }\r\n        ],\r\n        approveAmount: [\r\n          { required: true, message: '请输入审定值', trigger: 'change' },\r\n          { validator: validate.money, message: '金额格式不正确', trigger: 'change' },\r\n          { validator: validate.max_amount, message: '超过所能存储的最大金额', trigger: 'change' }\r\n        ],\r\n        costAmount: [\r\n          { required: true, message: '请输入成本值', trigger: 'change' },\r\n          { validator: validate.money, message: '金额格式不正确', trigger: 'change' },\r\n          { validator: validate.max_amount, message: '超过所能存储的最大金额', trigger: 'change' }\r\n        ],\r\n        firstRepresent: [\r\n          { required: true, message: '请输入甲方代表', trigger: 'change' }\r\n        ],\r\n        occurDate: [\r\n          { required: true, message: '请选择发生日期', trigger: 'change' }\r\n        ],\r\n        predictFinishDate: [\r\n          { required: true, message: '请选择预计完成日期', trigger: 'change' }\r\n        ],\r\n        coordinateType: [\r\n          { required: true, message: '请选择协助类型', trigger: 'change' }\r\n        ],\r\n        progressType: [\r\n          { required: true, message: '请选择进度', trigger: 'change' }\r\n        ],\r\n        sendDate: [],\r\n        transactDate: []\r\n      },\r\n\r\n      filter: {\r\n        orgList: [],\r\n        coordinateTypes: [],\r\n        progressTypes: []\r\n      },\r\n      project: {}\r\n    }\r\n  },\r\n  computed: {\r\n    disabled() {\r\n      return this.firstForm.state === 10000\r\n    },\r\n    title() {\r\n      const { active } = this\r\n      return active === 2 ? '审批流程' : '对外签证'\r\n    },\r\n    /**\r\n     * 处理form表单的数据\r\n     */\r\n    formNodeData() {\r\n      const {\r\n        disabled,\r\n        selectPlaceholder,\r\n        inputPlaceholder,\r\n        filter: {\r\n          coordinateTypes,\r\n          progressTypes\r\n        }\r\n      } = this\r\n      return [\r\n        { label: '编码:', monopolize: true, keyword: 'number', props: { disabled: true, placeholder: '系统自动生成' }},\r\n        { label: '项目:', keyword: 'projectId', component: 'ProjectSelect', props: { disabled, placeholder: selectPlaceholder }},\r\n        { label: '组织机构:', keyword: 'orgName', props: { disabled: true, placeholder: '请选择有项目的部门' }},\r\n        { label: '签证名称:', keyword: 'name', props: { disabled, placeholder: inputPlaceholder }},\r\n        { label: '上报值:', keyword: 'reportAmount', props: { disabled, placeholder: inputPlaceholder }},\r\n        { label: '审定值:', keyword: 'approveAmount', props: { disabled, placeholder: inputPlaceholder }},\r\n        { label: '成本值:', keyword: 'costAmount', props: { disabled, placeholder: inputPlaceholder }},\r\n        { label: '甲方代表:', keyword: 'firstRepresent', props: { disabled, placeholder: inputPlaceholder }},\r\n        { label: '发生日期:', keyword: 'occurDate', component: 'el-date-picker', props: { type: 'date', placeholder: selectPlaceholder, valueFormat: 'yyyy-MM-dd' }},\r\n        { label: '预计完成日期:', keyword: 'predictFinishDate', component: 'el-date-picker', props: { type: 'date', placeholder: selectPlaceholder, valueFormat: 'yyyy-MM-dd' }},\r\n        { label: '是否协助:', keyword: 'coordinateType', component: 'Select', props: { propsLabel: 'name', options: coordinateTypes, placeholder: selectPlaceholder }},\r\n        { label: '甲方指令内容:', keyword: 'firstPartyContent', props: { disabled, placeholder: inputPlaceholder, type: 'textarea' }},\r\n        { label: '未办理原因:', keyword: 'noTransactReason', props: { disabled, placeholder: inputPlaceholder, type: 'textarea' }},\r\n        { label: '协调配合内容:', keyword: 'coordinateContent', props: { disabled, placeholder: inputPlaceholder, type: 'textarea' }},\r\n        { label: '备注:', keyword: 'remark', props: { disabled, placeholder: inputPlaceholder, type: 'textarea' }},\r\n        { label: '进度:', keyword: 'progressType', monopolize: true, component: 'Select', props: { disabled, propsLabel: 'name', options: progressTypes, placeholder: selectPlaceholder }},\r\n        { label: '上报日期:', keyword: 'sendDate', component: 'el-date-picker', props: { type: 'date', placeholder: selectPlaceholder, valueFormat: 'yyyy-MM-dd' }},\r\n        { label: '办理日期:', keyword: 'transactDate', component: 'el-date-picker', props: { type: 'date', placeholder: selectPlaceholder, valueFormat: 'yyyy-MM-dd' }},\r\n        { label: '附件:', monopolize: true, keyword: 'fileList', component: 'UpFile', width: '100%', props: { isUpfile: true, isDelete: true }}\r\n      ]\r\n    }\r\n  },\r\n  watch: {\r\n    'firstForm.progressType': {\r\n      handler(val) {\r\n        const changeRules = {\r\n          sendDate: [],\r\n          transactDate: []\r\n        }\r\n        if (val === 1) {\r\n          changeRules.sendDate = [\r\n            { required: true, message: '进度选项为已发生时，上报日期为必填项', trigger: 'change' }\r\n          ]\r\n        } else if (val === 2) {\r\n          changeRules.transactDate = [\r\n            { required: true, message: '进度选项为已上报时，办理日期为必填项', trigger: 'change' }\r\n          ]\r\n        }\r\n        Object.assign(this.firstRules, changeRules)\r\n        this.$nextTick(() => {\r\n          this.$refs.firstForm.clearValidate()\r\n        })\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  beforeRouteEnter(to, from, next) {\r\n    next(vm => {\r\n      vm.initSelect()\r\n      const newId = vm.$route.query.id\r\n      const oldId = vm.firstForm.id\r\n      const type = vm.$route.query.type\r\n      if (type === 'edit' && newId !== oldId) {\r\n      // 说明是打开另一个单子的编辑页面\r\n        vm.firstForm.id = newId\r\n        vm.initForm()\r\n        vm.initDataById(newId)\r\n        vm.active = 1\r\n      } else {\r\n        if (type === 'add' && oldId) {\r\n          // 说明是打开一个新建页面\r\n          vm.initForm()\r\n          vm.active = 1\r\n        }\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    /**\r\n     * 处理项目选择器选择事件\r\n     */\r\n    handelProjectSelect(val) {\r\n      Object.assign(this.firstForm, {\r\n        orgId: val ? val.orgId : '',\r\n        orgName: val ? val.orgStr : '',\r\n        companyId: val ? val.companyId : ''\r\n      })\r\n    },\r\n    /**\r\n     * 根据id获取项目信息\r\n     */\r\n    getProjectMessage() {\r\n      const req = {\r\n        id: this.firstForm.projectId\r\n      }\r\n      const formatDate = date => date ? this.$moment(date).format('YYYY-MM-DD') : ''\r\n      getProjectById(req).then(({ data }) => {\r\n        this.project = {\r\n          ...data,\r\n          orgName: data.organization.name,\r\n          contractStartDate: formatDate(data.contractStartDate),\r\n          contractFinishDate: formatDate(data.contractFinishDate),\r\n          realStartDate: formatDate(data.realStartDate),\r\n          computeFinishDate: formatDate(data.computeFinishDate)\r\n        }\r\n      })\r\n    },\r\n    initForm() {\r\n      Object.assign(this.$data.firstForm, this.$options.data().firstForm)\r\n      this.project = {}\r\n      this.$nextTick(() => {\r\n        this.$refs.firstForm.resetFields()\r\n      })\r\n    },\r\n    /**\r\n     * @description: 初始化选项框数据\r\n     */\r\n    initSelect() {\r\n      InitProjectSiteSign().then(res => {\r\n        this.filter.coordinateTypes = res.coordinateTypeList\r\n        this.filter.progressTypes = res.progressTypeList\r\n      })\r\n    },\r\n    /**\r\n     * @description: 根据id获取数据并且初始化选项框数据\r\n     */\r\n    initDataById(id) {\r\n      GetProjectSiteSignById({ id }).then(res => {\r\n        const form = this.firstForm\r\n        for (const key in form) {\r\n          if (Object.hasOwnProperty.call(res.data, key)) {\r\n            form[key] = res.data[key] || form[key]\r\n          }\r\n        }\r\n        form.billFlow = res.billFlowData\r\n        form.fileList = res.data.upFile\r\n        this.$set(form, 'orgName', res.data.organization.name)\r\n      })\r\n    },\r\n    getBillFlow() {\r\n      // 获取流程数据\r\n      const { state, billFlow } = this.firstForm\r\n      const req = {\r\n        ...this.firstForm,\r\n        state: state || 0\r\n      }\r\n      if (billFlow) req.billFlowId = billFlow.id\r\n      delete req.billFlow\r\n      delete req.number\r\n      GetBillFlow(req).then(({ data, success, message }) => {\r\n        if (success) {\r\n          this.firstForm.billFlow = data.billFlow\r\n          this.setActive(2)\r\n        } else {\r\n          this.$message.error(message)\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 修改填报进度\r\n     */\r\n    setActive(active) {\r\n      this.active = active\r\n    },\r\n    /**\r\n     * 下一步\r\n     */\r\n    nextStep(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          const { progressType, transactDate, sendDate } = this.firstForm\r\n          if (progressType === 1 && !sendDate) {\r\n            return this.$message.error('进度选项为已发生时，上报日期为必填项')\r\n          } else if (progressType === 2 && !transactDate) {\r\n            return this.$message.error('进度选项为已上报时，办理日期为必填项')\r\n          }\r\n          this.getBillFlow()\r\n        }\r\n      })\r\n    },\r\n    // 作废\r\n    invalidForm() {\r\n      this.$confirm('作废以后将无法编辑，是否确定作废？', '提示', {\r\n        type: 'warning'\r\n      }).then(() => {\r\n        return DeleteProjectSiteSign({ id: this.firstForm.id })\r\n      }).then(() => {\r\n        this.$message.success('操作成功')\r\n        this.back()\r\n      })\r\n    },\r\n    /**\r\n     * 提交表单\r\n     * @param {Number} state 提交类型，0：保存；1：提交;\r\n     */\r\n    submitForm(state) {\r\n      const req = {\r\n        ...this.firstForm,\r\n        state\r\n      }\r\n      delete req.number\r\n      if (this.firstForm.billFlow) {\r\n        // 获取流程组件中的数据\r\n        const billFlow = this.$refs.flowSelect.getBillFlow()\r\n        if (!billFlow) {\r\n          return false\r\n        }\r\n        req.billFlow = billFlow\r\n      } else {\r\n        this.$message.error('流程数据不能为空')\r\n        return\r\n      }\r\n      if (req.progressType !== 2 && req.state === 1) {\r\n        return this.$message.error('进度选项为已上报时，才能提交审批')\r\n      }\r\n      if (req.id) {\r\n        PutProjectSiteSign(req).then(res => {\r\n          // 更新\r\n          this.$message.success('保存成功')\r\n          this.back()\r\n        })\r\n      } else {\r\n        AddProjectSiteSign(req).then(() => {\r\n          // 添加\r\n          this.$message.success('提交成功')\r\n          this.back()\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * 修改\r\n    */\r\n    updateForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          const req = {\r\n            ...this.firstForm\r\n          }\r\n          delete req.number\r\n          delete req.billFlow\r\n          UpdateProjectSiteSign(req).then(res => {\r\n          // 修改\r\n            this.$message.success('修改成功')\r\n            this.back()\r\n          })\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 返回上一页，并关闭当前页\r\n     */\r\n    back() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    }\r\n  }\r\n}\r\n",null]}
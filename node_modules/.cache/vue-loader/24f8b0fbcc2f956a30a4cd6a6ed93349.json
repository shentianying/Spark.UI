{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\dictionaryEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\dictionaryEdit.vue","mtime":1629255194280},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { initDictionary, putDictionary, putDictionaryTypeName, addDictionary } from '@/api/xtgl/dictionary'\r\nimport { getTree } from '@/utils/index'\r\n// import the component\r\nimport Treeselect from '@riophae/vue-treeselect'\r\n// import the styles\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nexport default {\r\n  name: 'DictionaryEdit',\r\n  components: {\r\n    Treeselect\r\n  },\r\n  props: {\r\n    obj: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    postTypeList: {\r\n      type: Array,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        pId: 0,\r\n        sort: 1,\r\n        name: '',\r\n        value: 0,\r\n        type: '',\r\n        typeName: '',\r\n        remark: '',\r\n        companyId: null,\r\n        inUse: true\r\n      },\r\n      // zero: 0,\r\n      userOrg: [],\r\n      treeList: [], // 转化成树形的数据列表\r\n      typeList: [], // 类型下拉数据列表\r\n      sourceData: [], // 没有格式化的数据列表\r\n      newType: '',\r\n      newTypeName: '',\r\n      dialogTableVisible: false,\r\n      dialogTableVisible2: false,\r\n      buttonLoading: false,\r\n      rules: {\r\n        name: [{ required: true, message: '不能为空', trigger: 'blur' }],\r\n        type: [{ required: true, message: '不能为空', trigger: 'change' }],\r\n        pId: [{ required: true, message: '不能为空', trigger: 'change' }]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n    this.initTree()\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          newObj.companyId = Number(newObj.companyId)\r\n          delete newObj.companyName\r\n          this.buttonLoading = true\r\n          if (this.obj) {\r\n            newObj.id = this.obj.id\r\n            putDictionary(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          } else {\r\n            addDictionary(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    initData() {\r\n      this.typeList = this.postTypeList\r\n      // console.log('this.typeList', this.typeList)\r\n      // console.log('this.obj：', this.obj)\r\n      if (this.obj) {\r\n        var newObj = JSON.parse(JSON.stringify(this.obj))\r\n        newObj.companyId = Number(newObj.companyId)\r\n        this.ruleForm = newObj\r\n      }\r\n    },\r\n    async initTree() {\r\n      this.buttonLoading = true\r\n      await initDictionary().then(response => {\r\n        const { data1, data2 } = response\r\n        data1.forEach(ele => {\r\n          ele.label = ele.name\r\n          ele.pid = ele.pId\r\n          delete ele.pId\r\n        })\r\n        this.sourceData = data1\r\n        this.fill(data1)\r\n\r\n        // 绑定公司列表\r\n        var arr2 = []\r\n        arr2.push({ name: '公用', id: 0 })\r\n        data2.forEach(e => {\r\n          arr2.push({ name: e.name, id: e.id })\r\n        })\r\n        this.userOrg = arr2\r\n        this.buttonLoading = false\r\n      })\r\n    },\r\n    fill() {\r\n      const filterData = this.sourceData.filter(f => f.type === this.ruleForm.type)\r\n      if (filterData.length) {\r\n        this.typeName = filterData.typeName\r\n        const result = getTree(0, filterData)\r\n        this.treeList = [{ id: 0, pid: 0, label: '根目录', remark: '', children: result }]\r\n      } else { this.treeList = [{ id: 0, pid: 0, label: '根目录' }] }\r\n    },\r\n    addType() {\r\n      this.typeList.unshift(this.newType) // 添加下拉列表框的类型\r\n      this.ruleForm.type = this.newType //  默认添加的项目被选中\r\n      this.ruleForm.typeName = this.newTypeName\r\n      this.dialogTableVisible = false\r\n      this.fill()\r\n    },\r\n    updateType() {\r\n      this.buttonLoading = true\r\n      putDictionaryTypeName({ type: this.ruleForm.type, typeName: this.ruleForm.typeName }).then(res => {\r\n        this.$message(res.message)\r\n        this.buttonLoading = false\r\n\r\n        this.typeList.forEach(e => {\r\n          if (e.type === this.ruleForm.type) {\r\n            e.typeName = this.ruleForm.typeName\r\n          }\r\n        })\r\n        this.sourceData.forEach(e => {\r\n          if (e.type === this.ruleForm.type) {\r\n            e.typeName = this.ruleForm.typeName\r\n          }\r\n        })\r\n        this.dialogTableVisible2 = false\r\n      }).catch(() => { this.buttonLoading = false })\r\n    }\r\n  }\r\n}\r\n",null]}
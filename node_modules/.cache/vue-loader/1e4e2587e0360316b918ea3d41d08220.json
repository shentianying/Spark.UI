{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\index.vue","mtime":1634781212939},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport MyInput from './MyInput/index.js'\r\nexport default {\r\n  name: 'SearchBar',\r\n  components: {\r\n    MyInput\r\n  },\r\n  model: { event: 'change', prop: 'data' },\r\n  props: {\r\n    data: { type: Array, default() { // 该属性用于遍历表单组件\r\n      return [\r\n        /*  示例\r\n        {\r\n          name:'id',//属性名，当调用handleSearch事件时将返回一个对象该值作为属性名\r\n          value:'1',//属性值，当调用handleSearch事件时将返回一个对象该值作为属性值\r\n          defaultValue: '1', //默认值,当重置时会被设置成该值(废弃)\r\n          component:'Input',//form组件类型,根据该值判断使用什么组件\r\n          isMain:true, //默认显示，否则展开时展示\r\n\r\n          //-------------以下当component为Select时有效---------------//\r\n          multiple:false,\r\n          checkStrictly:true,\r\n          options:[ //用于遍历el-option，Option Attributes具体请参考element ui\r\n            {\r\n              label:'',\r\n              value\r\n            }\r\n          ],\r\n\r\n          //-------------以下当component为DatePicker时有效---------------//\r\n          dateType:'daterange',  //对应DatePicker的type\r\n          valueFormat: 'yyyy-MM-dd HH:mm:ss', //对应DatePicker的value-format\r\n          //-------------以下为Form-Item Attributes具体请参考element ui-------------//\r\n          label:'',\r\n          placeholder:'',\r\n          labelWidth:0px,\r\n          required：false,\r\n          rules:[]\r\n        }\r\n        */\r\n      ]\r\n    } },\r\n    width: { type: String, default: '14vw' }, // 每个组件的宽度\r\n    size: { type: String, default: 'mini' }, // 所有组件大小\r\n    labelWidth: { type: String, default: '68px' }, // 作用与element ui form组件一致，请参考element ui\r\n    search: { type: Function, default: async() => {} }, // 回调函数\r\n    loading: { type: Boolean, default: false }, // 查询按钮的loading(使用sync绑定时会在回调函数search触发前后修改该值)\r\n    showToggle: { type: Boolean, default: true } // 是否显示“展开”和“收起\" 切换按钮\r\n  },\r\n  data() {\r\n    return {\r\n      showMore: false,\r\n      loadingType: 'search'\r\n      // backups: null\r\n    }\r\n  },\r\n  computed: {\r\n    searchData: {\r\n      get() {\r\n        const obj = {}\r\n        const main = []\r\n        const auxiliary = []\r\n        this.data.forEach((item) => {\r\n          const { name, value, isMain } = item\r\n          obj[name] = value\r\n          isMain ? main.push(item) : auxiliary.push(item)\r\n        })\r\n        return { data: this.data, obj, main, auxiliary }\r\n      },\r\n      set(val) {\r\n        this.$emit('change', val.data)\r\n      }\r\n    }\r\n  },\r\n  // created() {\r\n  //   if (this.backups === null) {\r\n  //     this.backups = JSON.parse(JSON.stringify(this.searchData.data))\r\n  //   }\r\n  // },\r\n  methods: {\r\n    /**\r\n     * @description: 重置所有参数并且触发搜索回调\r\n     */\r\n    resetSearchData() {\r\n      this.loadingType = 'reset'\r\n      // const data = this.searchData.data\r\n      // data.forEach((item, index) => {\r\n      //   let val = this.backups[index] ? this.backups[index].value : ''\r\n      //   if (typeof item.defaultValue !== 'undefined') {\r\n      //     val = item.defaultValue\r\n      //   }\r\n      //   this.$set(item, 'value', val)\r\n      // })\r\n      this.$refs['SearchBar'].resetFields()\r\n      this.search('reset', this.getSearchData())\r\n    },\r\n    /**\r\n     * @description: 以对象方式返回所有参数(data数组每一项的label作为key，value作为值)\r\n     * @return {Object} 所有参数\r\n     */\r\n    getSearchData() {\r\n      // const obj = {}\r\n      //   this.data.forEach(({name,value}) => {\r\n      //     obj[name] = value\r\n      //   })\r\n\r\n      return this.searchData.obj\r\n    },\r\n    /**\r\n     * @description: 触发search回调，接受promise\r\n     * @return {*}\r\n     */\r\n    async handleSearch(type) {\r\n      this.loadingType = 'search'\r\n      // this.$emit('update:loading', true)\r\n\r\n      // this.$emit('update:loading', false)\r\n      this.$refs['SearchBar'].validate((valid) => {\r\n        if (valid) {\r\n          this.search(type, this.getSearchData())\r\n        }\r\n      })\r\n    },\r\n    toggleState() {\r\n      this.showMore = !this.showMore\r\n    },\r\n    /**\r\n     * 设置搜索栏的设置项的某个值\r\n     * @param {String} name searchData的name,用来当作唯一标识找到对应项\r\n     * @param {String} key 想要改变项的键名\r\n     * @param {*} data 想要覆盖的值\r\n     * @param {String} model 设置模式-cover:直接覆盖,init:如果目标为空的话才会覆盖\r\n     */\r\n    setData(name, key, data, model = 'cover') {\r\n      const target = this.data.find(v => v.name === name)\r\n      if (!target) throw new Error(`SearchBar setData: 没有找到对应项,请检查name输入是否正确`)\r\n      if (model === 'cover') {\r\n        target[key] = data\r\n      } else if (model === 'init') {\r\n        if ((!target[key] || !target[key].length)) {\r\n          target[key] = data\r\n        }\r\n      } else {\r\n        throw new Error('SearchBar setData: 没有对应的模式,请检查model输入是否正确')\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}
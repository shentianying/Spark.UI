{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\invoice\\invoiceEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\invoice\\invoiceEdit.vue","mtime":1635216068732},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { initiInvoiceEdit, addInvoice, deleteInvoice, getContractListByOrgId, putInvoice, getBillFlow, getInvoiceById, getStorageInDetailListByContractId } from '@/api/cggl/invoice'\r\nimport OrgSelect2 from '@/components/OrgSelect/index2'\r\nimport FlowSelect from '@/components/Flow/flowSelect'\r\nimport UpFile from '@/components/UpLoad/UpFile'\r\nexport default {\r\n  name: 'CGInvoiceEdit',\r\n  components: {\r\n    OrgSelect2,\r\n    FlowSelect,\r\n    UpFile\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        id: 0,\r\n        // name: '',\r\n        type: null,\r\n        invoiceNumber: '', // 发票号码\r\n        invoicingDate: null, // 开票日期\r\n        orgId: null,\r\n        amount: null,\r\n        state: 0,\r\n        remark: '',\r\n        supplierId: null,\r\n        contractId: null,\r\n        invoiceDetail: [],\r\n        fileList: []\r\n      },\r\n      loading: false,\r\n      activate: false,\r\n      active: 0,\r\n\r\n      list: [],\r\n      list2: [],\r\n      contractIdAndsupplierId: '',\r\n      invoiceTypes: [], // 发票类型 字典数据\r\n      contractList: [], // 合同列表\r\n      supplierList: [], // 供应商列表\r\n      multipleSelection: [], // 选中列表\r\n      orgStr: '',\r\n      billFlow: null,\r\n      total: 0,\r\n      dialogTableVisible: false,\r\n      pageTotal: 0,\r\n      currentPage: 1,\r\n      pageSize: this.utils.getPersonalSettings().pageSize,\r\n      spanArr: [],\r\n      rules: {\r\n        orgId: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        type: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        amount: [{ required: true, type: 'number', message: '请输入', trigger: 'blur' }],\r\n        invoiceNumber: [{ required: true, message: '请输入', trigger: 'blur' }],\r\n        contractIdAndsupplierId: [{ required: false, message: '请选择', trigger: ['blur', 'change'] }],\r\n        invoicingDate: [{ type: 'string', required: true, message: '请选择', trigger: ['blur', 'change'] }]\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    'ruleForm.orgId': {\r\n      handler: function(value, oldvalue) {\r\n        // console.log('变化：', value, oldvalue)\r\n        if (!oldvalue) {\r\n          this.$refs['ruleForm'].validateField('orgId', (valid) => {})\r\n        }\r\n        if (value && !oldvalue) {\r\n          this.getContractList(value).then(data => {\r\n            this.contractList = data\r\n          })\r\n        }\r\n        if (value && oldvalue) {\r\n          this.getContractList(value).then(data => {\r\n            if (data.length === 0) {\r\n              this.$message.info('该项目中没有合同信息')\r\n            }\r\n            this.contractList = data\r\n            this.clearData()\r\n          })\r\n        }\r\n      }, deep: true\r\n    }\r\n  },\r\n  activated() {\r\n    if (this.$route.params.id) {\r\n      // this.ruleForm.orgId = null // 刷新 org 列表\r\n      this.initData()\r\n      this.refreshRouterName = this.$route.params.refreshRouterName\r\n    }\r\n  },\r\n  mounted() {\r\n    initiInvoiceEdit().then(res => {\r\n      const { invoiceTypes } = res\r\n      this.invoiceTypes = invoiceTypes\r\n    })\r\n    if (!this.$route.params.id) {\r\n      this.active = 0\r\n      this.activate = true\r\n    }\r\n  },\r\n  methods: {\r\n    clearData() {\r\n      this.list2 = []\r\n      // 清空供应商 和 合同\r\n      this.supplierList = []\r\n      this.ruleForm.supplierId = null\r\n      this.ruleForm.contractId = null\r\n      this.contractIdAndsupplierId = ''\r\n    },\r\n    initData() {\r\n      // 有参数id 就是编辑\r\n      if (this.$route.query.id) {\r\n        this.ruleForm.id = this.$route.query.id\r\n        this.loading = true\r\n        this.activate = false\r\n        getInvoiceById({ id: this.ruleForm.id }).then(response => this.setData(response))\r\n      }\r\n    },\r\n    setData(response) {\r\n      const { data } = response\r\n      if (data) {\r\n        if (data.state > 0) {\r\n          this.$message.info('单据已在审批阶段，无法制单')\r\n          this.closeThePage()\r\n          return\r\n        }\r\n      }\r\n      // 填充 明细列表\r\n      var invoiceDetails = data.invoiceDetail.map(m => m.storageInDetail)\r\n      this.list2 = invoiceDetails\r\n      this.getSpanArr(this.list2)\r\n      this.sumStorage(this.list2)\r\n\r\n      // 获取 设计下单 数据\r\n      if (data) {\r\n        // 设计下单制单 保存 状态\r\n        if (data.state === 0) {\r\n          this.ruleForm = data\r\n          this.getContractList(data.orgId).then(res => {\r\n            this.contractList = res\r\n          })\r\n          this.ruleForm.fileList = data.upFile\r\n          this.contractIdAndsupplierId = data.contractId + '|' + data.supplierId\r\n        } else {\r\n          // state\r\n          this.loading = false\r\n          this.closeThePage()\r\n        }\r\n      }\r\n      this.loading = false // loading 状态关闭\r\n      this.activate = true // 加载部门组件\r\n\r\n      // console.log('this.ruleForm:', this.ruleForm)\r\n      // console.log('this.data:', data)\r\n      // console.log('this.contractIdAndsupplierId:', this.contractIdAndsupplierId)\r\n    },\r\n    closeThePage() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    },\r\n\r\n    submitForm(state) {\r\n      var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n      // 设计下单状态\r\n      newObj.state = state\r\n\r\n      var invoiceDetail = []\r\n      this.list2.forEach(e => {\r\n        // 从已经保存的数据中查找 入库明细,如果 find后有数据，就是已经存在的数据，否则是 新增的数据\r\n        var findInvoiceDetail = newObj.invoiceDetail.find(f => f.storageInDetailId === e.id)\r\n        let iid = 0\r\n        if (findInvoiceDetail) {\r\n          iid = findInvoiceDetail.idf\r\n        }\r\n        invoiceDetail.push(\r\n          { id: iid,\r\n            invoiceId: newObj.id,\r\n            storageInDetailId: e.id\r\n          }\r\n        )\r\n      })\r\n\r\n      newObj.invoiceDetail = invoiceDetail\r\n\r\n      // 获取流程组件中的数据\r\n      if (state === 1) {\r\n        // 如果是提交，验证流程人员的完整信息\r\n        const checkBillFlow = this.$refs.flowSelect.checkBillFlow()\r\n        if (!checkBillFlow) {\r\n          this.$message('流程错误，流程中审批人员不能为空')\r\n          return false\r\n        }\r\n      }\r\n      const billFlow = this.$refs.flowSelect.getBillFlow()\r\n      newObj.billFlow = billFlow\r\n\r\n      // console.log('提交的数据：', newObj)\r\n\r\n      // 保存单据\r\n      this.loading = true\r\n      if (this.ruleForm.id) {\r\n        putInvoice(newObj).then(response => {\r\n          if (response.errorMsg) {\r\n          // 验证错误\r\n            this.$alert(`${response.errorMsg.replace(/；/g, '；<br />')}`,\r\n              { dangerouslyUseHTMLString: true })\r\n            return\r\n          }\r\n          this.$message(response.message)\r\n          this.loading = false\r\n          this.closeThePage()\r\n        }).catch(() => { this.loading = false })\r\n      } else {\r\n        addInvoice(newObj).then(response => {\r\n          if (response.errorMsg) {\r\n            // 验证错误\r\n            this.$alert(`${response.errorMsg.replace(/；/g, '；<br />')}`,\r\n              { dangerouslyUseHTMLString: true })\r\n          } else {\r\n            this.$message(response.message)\r\n            this.loading = false\r\n            this.closeThePage()\r\n          }\r\n        }).catch(() => { this.loading = false })\r\n      }\r\n    },\r\n    previous() {\r\n      // 上一步\r\n      this.active = 0\r\n      this.billFlow = null\r\n    },\r\n    cancel() { // 作废\r\n      this.$confirm('作废以后将无法编辑，是否确定作废？', '提示', {\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.loading = true\r\n        deleteInvoice({ id: this.ruleForm.id }).then(response => {\r\n          this.$message(response.message)\r\n          this.loading = false\r\n          this.closeThePage()\r\n        })\r\n      }).catch(() => {})\r\n    },\r\n\r\n    getDynamicFlow() {\r\n      this.$refs['ruleForm'].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          if ((this.list2 || []).length <= 0) {\r\n            this.$alert('请选择入库明细单')\r\n            return false\r\n          }\r\n          if (this.ruleForm.amount < this.total) {\r\n            this.$alert('开票金额必须大于已选金额')\r\n            return false\r\n          }\r\n          this.loading = true\r\n          getBillFlow(newObj).then(response => {\r\n            this.loading = false\r\n            if (response.success) {\r\n              this.billFlow = response.data.billFlow\r\n              this.active = 1\r\n            } else {\r\n              this.$message(response.message)\r\n            }\r\n          }).catch(() => { this.loading = false })\r\n        }\r\n      })\r\n    },\r\n    // 选择\r\n    selectStorage(scope) {\r\n      if (scope.row.invoiceId > 0) {\r\n        this.$alert('已开过发票，请不要重复开')\r\n        return false\r\n      }\r\n      const storageInDetail = this.list.find(f => f.id === scope.row.id)\r\n      this.list.splice(scope.$index, 1)\r\n\r\n      if (this.list2.some(s => s.id === scope.row.id)) {\r\n        this.$alert('已存在，不能重复添加')\r\n        return\r\n      } else {\r\n        this.list2.push(storageInDetail)\r\n      }\r\n      this.sumStorage(this.list2)\r\n    },\r\n    // 移除\r\n    removeStorage(scope) {\r\n      // const storageInDetail = this.list2.find(f => f.id === scope.row.id)\r\n      this.list2.splice(scope.$index, 1)\r\n      // this.list.push(storageInDetail)\r\n      // 计算总金额\r\n      this.sumStorage(this.list2)\r\n    },\r\n    selectContract(value) {\r\n      var contractId = Number(value.split('|')[0])\r\n      var supplierId = Number(value.split('|')[1])\r\n      // this.supplierList = []\r\n      // var contract = this.contractList.find(f => f.contractId === contractId && f.supplierId === supplierId)\r\n\r\n      // this.supplierList.push({ id: contract.supplierId, name: contract.supplierName })\r\n      this.ruleForm.contractId = contractId\r\n      this.ruleForm.supplierId = supplierId\r\n      // // 清空选中列表\r\n      this.list2 = []\r\n    },\r\n    getStorageInDetailList() {\r\n      const postData = {}\r\n      postData.contractId = this.ruleForm.contractId\r\n      postData.supplierId = this.ruleForm.supplierId\r\n      postData.currentPage = this.currentPage\r\n      postData.pageSize = this.pageSize\r\n      if (this.ruleForm.id > 0) {\r\n        postData.invoiceId = this.ruleForm.id\r\n      }\r\n      this.loading = true\r\n      return new Promise((resolve, reject) => {\r\n        getStorageInDetailListByContractId(postData).then(res => {\r\n          this.loading = false\r\n          const { storageInDetailList, count } = res\r\n          this.list = storageInDetailList\r\n          this.getSpanArr(this.list) // 合并单元格\r\n          this.pageTotal = count\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    sumStorage(arr) {\r\n      // 计算金额\r\n      this.total = 0\r\n      arr.map(m => m.taxInclusiveAmount).forEach(e => {\r\n        this.total += e\r\n      })\r\n    },\r\n    selectStorageDetail() {\r\n      if (!this.ruleForm.orgId) {\r\n        this.$alert('请先选择项目')\r\n        return\r\n      }\r\n      if (!this.ruleForm.contractId) {\r\n        this.$alert('请先选择合同')\r\n        return\r\n      }\r\n      // 清空弹出选择的值\r\n      // this.ruleForm.contractId = null\r\n      this.list = []\r\n      this.dialogTableVisible = true\r\n      // this.contractId = value\r\n      this.getStorageInDetailList().then(r => {\r\n        this.list2.forEach(row => {\r\n          this.$refs.multipleTable.toggleRowSelection(this.list.find(f => f.id === row.id))\r\n        })\r\n      })\r\n\r\n      // getContractListByOrgId({ orgId: this.ruleForm.orgId }).then(res => {\r\n      //   const { data } = res\r\n      //   this.contractList = data\r\n      //   this.dialogTableVisible = true\r\n      // })\r\n    },\r\n    sizeChange(val) {\r\n      this.pageSize = val\r\n      this.getStorageInDetailList().then(r => {\r\n        this.list2.forEach(row => {\r\n          this.$refs.multipleTable.toggleRowSelection(this.list.find(f => f.id === row.id))\r\n        })\r\n      })\r\n    },\r\n    handleSelectionChange(val) {\r\n      this.multipleSelection = val\r\n      this.sumStorage(this.multipleSelection)\r\n    },\r\n    sureSelected() {\r\n      // 弹窗关闭前\r\n      this.list2 = this.multipleSelection\r\n\r\n      this.getSpanArr(this.list2)\r\n      // this.multipleSelection = []\r\n      this.$refs.multipleTable.clearSelection()\r\n      this.sumStorage(this.list2)\r\n      this.dialogTableVisible = false\r\n    },\r\n    getSpanArr(data) {\r\n      // data就是我们从后台拿到的数据\r\n      this.spanArr = []\r\n      for (var i = 0; i < data.length; i++) {\r\n        if (i === 0) {\r\n          this.spanArr.push(1)\r\n          this.pos = 0\r\n        } else {\r\n          // 判断当前元素与上一个元素是否相同\r\n          if (data[i].Number === data[i - 1].Number) {\r\n            this.spanArr[this.pos] += 1\r\n            this.spanArr.push(0)\r\n          } else {\r\n            this.spanArr.push(1)\r\n            this.pos = i\r\n          }\r\n        }\r\n        // console.log(this.spanArr)\r\n      }\r\n    },\r\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\r\n      // if (columnIndex === 0 || columnIndex === 1) {\r\n      if (columnIndex === 1) {\r\n        const _row = this.spanArr[rowIndex]\r\n        const _col = _row > 0 ? 1 : 0\r\n        // console.log(`rowspan:${_row} colspan:${_col}`)\r\n        return {\r\n          // [0,0] 表示这一行不显示， [2,1]表示行的合并数\r\n          rowspan: _row,\r\n          colspan: _col\r\n        }\r\n      }\r\n    },\r\n    objectSpanMethod2({ row, column, rowIndex, columnIndex }) {\r\n      // if (columnIndex === 0 || columnIndex === 1) {\r\n      if (columnIndex === 0) {\r\n        const _row = this.spanArr[rowIndex]\r\n        const _col = _row > 0 ? 1 : 0\r\n        // console.log(`rowspan:${_row} colspan:${_col}`)\r\n        return {\r\n          // [0,0] 表示这一行不显示， [2,1]表示行的合并数\r\n          rowspan: _row,\r\n          colspan: _col\r\n        }\r\n      }\r\n    },\r\n    getContractList(orgId) {\r\n      return new Promise((resolve, reject) => {\r\n        getContractListByOrgId({ orgId: orgId }).then(res => {\r\n          const { data } = res\r\n          resolve(data)\r\n        })\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n",null]}
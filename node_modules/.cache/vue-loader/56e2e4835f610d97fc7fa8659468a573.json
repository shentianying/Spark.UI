{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\organization\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\organization\\index.vue","mtime":1635749455660},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getWorkerOrganizationList, getDefaultOptions } from '@/api/ggzx/workerOrg'\r\nimport { getTree } from '@/utils/index'\r\nimport SearchBar from '@/components/SearchBar'\r\nimport searchData from './searchData'\r\nimport WorkerOrgEdit from './workerOrgEdit'\r\nexport default {\r\n  name: 'WorkerOrg',\r\n  components: {\r\n    SearchBar,\r\n    WorkerOrgEdit\r\n  },\r\n  data() {\r\n    return {\r\n      size: 'mini',\r\n      searchData: searchData, // 渲染搜索栏数据\r\n      /* 列表数据相关 */\r\n      table: {\r\n        list: [],\r\n        loading: false,\r\n        total: 0\r\n      },\r\n      personTypeList: [],\r\n      postTypeList: [],\r\n      dialogTableVisible: false,\r\n      currentRow: null,\r\n      comName: 'WorkerOrgEdit'\r\n    }\r\n  },\r\n  beforeRouteEnter(to, from, next) {\r\n    next(vm => {\r\n      vm.getOptions()\r\n      vm.fetchData()\r\n    })\r\n  },\r\n  methods: {\r\n    getOptions() {\r\n      // 初始化数据获取\r\n      getDefaultOptions().then(default_options => {\r\n        const { personTypeOptions, postTypeOptions } = default_options\r\n        // 搜索栏数据初始化\r\n        personTypeOptions.forEach(ele => {\r\n          // 人员类别选项数据转换\r\n          ele.label = ele.name\r\n        })\r\n        postTypeOptions.forEach(ele => {\r\n          // 职务选项数据转换\r\n          ele.label = ele.name\r\n        })\r\n        this.personTypeList = personTypeOptions\r\n        this.postTypeList = postTypeOptions\r\n        this.searchData = this.searchData.map(item => {\r\n          item.options =\r\n            item.name === 'posts' ? postTypeOptions : item.options\r\n          return item\r\n        })\r\n      })\r\n    },\r\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\r\n    async fetchData() {\r\n      this.table.loading = true\r\n      try {\r\n        // 获取请求参数\r\n        const postData = this.getSearchData()\r\n        // 请求开始\r\n        const response = await getWorkerOrganizationList({\r\n          ...postData\r\n        })\r\n        // this.table.list = response.data\r\n        this.table.list = getTree(0, response.data)\r\n        if (this.table.list.length === 0) {\r\n          response.data.forEach(e => {\r\n            this.table.list = getTree(e.pid, response.data)\r\n          })\r\n        }\r\n      } catch (e) {\r\n        console.log('fetchData:请求列表数据失败，错误信息：', e)\r\n      } finally {\r\n        this.table.loading = false\r\n      }\r\n    },\r\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\r\n    getSearchData() {\r\n      const lastSearch = {}\r\n      this.searchData.forEach(item => {\r\n        const { value, transformType, name } = item\r\n        if (transformType === 'property-serial') {\r\n          value.forEach((ele, index) => {\r\n            const serial = index + 1\r\n            lastSearch[name + serial] = ele\r\n          })\r\n        } else {\r\n          lastSearch[name] = value\r\n        }\r\n      })\r\n      return lastSearch\r\n    },\r\n    /**\r\n     * @description: 搜索回调\r\n     */\r\n    handelSearch() {\r\n      this.fetchData()\r\n    },\r\n    dialogClose() {\r\n      this.dialogTableVisible = false\r\n      this.fetchData()\r\n    },\r\n    handleEdit(row) {\r\n      this.currentRow = row\r\n      this.dialogTableVisible = true\r\n    },\r\n    handleAdd() {\r\n      this.currentRow = null\r\n      this.dialogTableVisible = true\r\n    },\r\n    getTypeName(row) {\r\n      var v = this.personTypeList.find(f => f.value === row.personType)\r\n      if (v) {\r\n        return v.name\r\n      } else {\r\n        return ''\r\n      }\r\n    },\r\n    getPostName(row) {\r\n      var v = this.postTypeList.find(f => f.value === row.postTypeId)\r\n      if (v) {\r\n        return v.name\r\n      } else {\r\n        return ''\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}
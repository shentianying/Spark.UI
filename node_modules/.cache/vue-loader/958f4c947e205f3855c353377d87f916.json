{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\TableExColumn.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\TableExColumn.vue","mtime":1631525282202},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/**\r\n  * @column\r\n               {\r\n                  label: '部门', // 表头\r\n                  prop: 'number', // 渲染的属性\r\n                  // 输出前对数据进行转换处理。支持字符串或者函数\r\n\r\n                  formatPopper(val, format, row, column)  提示的格式化方式默认使用format。\r\n                  formatExport(val, format, row, column)  表格导出使用的格式化方式默认使用format。\r\n                  format(val,format, row, column)         自定义转换函数。处理好的数据直接return（接受字符串或者自定义函数）\r\n\r\n                  format:'date',  金额万分位:money;  日期:date  目前只接受两种\r\n\r\n                  class: 'link', // 自定义类名\r\n                  popoverType: 'createUserName', // 制单人:createUserName; 不设置时只有文本被折叠时展示(popover内容是所有内容包括被折叠部分)\r\n                  lineClamp: 1, // 超出多少行隐藏,默认1行隐藏               这里决定多少行被折叠\r\n                  click(row) {}, //  单击事件。当前行作为参数，处理好的数据直接return\r\n\r\n                  // 下面是el-table-column参数，具体请查看element文档\r\n                  align: 'center', // 对齐方式\r\n                  width: '130', // 宽度\r\n                  minWidth: '10' // 最小宽度\r\n                }\r\n  */\r\n\r\nimport { getValueByPath, formatText } from './util'\r\n\r\nexport default {\r\n  props: {\r\n    popperClass: {\r\n      type: String,\r\n      default: 'popper-cont'\r\n    },\r\n    column: {\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n    }\r\n  },\r\n  watch: {\r\n    'scope.row'(val) {\r\n\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    click(row) {\r\n      const ck = this.column.click\r\n      if (typeof ck === 'function') {\r\n        ck(row, this.column)\r\n      }\r\n    },\r\n    isCustom(column) {\r\n      return typeof column.formatPopper === 'function'\r\n    },\r\n    formatPopper(row, column) {\r\n      const cb = column.formatPopper\r\n      if (typeof cb === 'function') {\r\n        const { format, prop } = column\r\n        const val = getValueByPath(row, prop)\r\n        return cb(val, format, row, column)\r\n      } else {\r\n        return this.formatCont(row, column)\r\n      }\r\n    },\r\n    formatCont(row, column) {\r\n      const { format, prop } = column\r\n      const val = getValueByPath(row, prop)\r\n      return formatText(val, format, row, column)\r\n    },\r\n    getValueByPath(...arg) {\r\n      return getValueByPath(...arg)\r\n    },\r\n    formatText(...arg) {\r\n      return formatText(...arg)\r\n    }\r\n\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\TableEx\\index.vue","mtime":1635749455612},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/**\r\n * @method\r\n *          initExcel         initExcel(list)   返回Excel对象 {sheet, export}\r\n *                            sheet：的tHeader、keys通过遍历column.label、column.prop而来,所以提供column很重要\r\n *                            export(sheet): export是function，调用即导出，参数则是sheet\r\n *\r\n *\r\n * @props:\r\n *              columns:[]         // 需要渲染的列数据，但这不是必要的，可以使用tbAfter插槽或者默认插槽插入内容\r\n *              list:[]            // 列表数据\r\n *\r\n *\r\n *              exportExcelLoading  // 导出表格状态\r\n *              excelName           // 导出表格名字\r\n *\r\n *              tooltip-effect\t    // tooltip effect属性: dark/light 默认:light\r\n *              row-class-name\t   //行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。\r\n *                        \t 参数:Function({row, rowIndex})/String\r\n *\r\n *              actionsWidth:120  // 默认操作栏宽度\r\n *              showActions       // 展示默认操作栏(如当前操作栏不满足需求可用默认插槽或者具名插槽tbAfter插入el-table-column)\r\n *\r\n *\r\n *              currentPage:1      // 当前页数，支持 .sync 修饰符\r\n *              pageSize:10        // 每页显示条目个数，支持 .sync 修饰符\r\n *              total:0            // 总条目\r\n *              size:'mini'        // 组件大小\r\n *              tableLoading:true       // 加载状态\r\n *              showActions:true   // 显示默认操作栏\r\n *              showCount:true     // 显示默认统计栏\r\n *              countCont:''       // 统计栏文字，可插入html(实际通过v-html插入该内容)\r\n *\r\n *              popperClass:''     // popperover自定义类名(popperover只有超出隐藏时才展示)\r\n *\r\n * @slot: 在本组件中提供了以下：\r\n *             如果columns属性不能满足要求可以通过插槽去扩展\r\n *               tbAfter:  在遍历渲染props（el-table-column）之前；使用时请先插入el-table-column，与el-table中使用是一致的\r\n *               默认插槽:  在遍历渲染props（el-table-column）之后；使用时请先插入el-table-column，与el-table中使用是一致的\r\n *               actions:  操作栏插槽，在这里请直接插入按钮不需要el-table-column，如果不需要这列请使用props showActions参数隐藏\r\n *               count:    自定义统计栏插槽\r\n *               countCont 统计栏文字内容\r\n *\r\n *\r\n * @event  本组件提供了以下事件：\r\n *\r\n *               rowDblclick:    当某一行被双击时会触发该事件；参数 row, column, event(参考Element Table Events)\r\n *               currentChange:   当前页改变; 参数 current\r\n *               sizeChange:      当分页大小被改变; 参数 size\r\n *               fetchData:       当页改变或者页大小改变时触发\r\n *\r\n * @column对象\r\n *               {\r\n                  label: '部门', // 表头\r\n                  prop: 'number', // 渲染的属性\r\n                  // 输出前对数据进行转换处理。支持字符串或者函数\r\n\r\n                  formatPopper(val, format, row, column)  提示的格式化方式默认使用format。\r\n                  formatExport(val, format, row, column)  表格导出使用的格式化方式默认使用format。\r\n                  format(val,format, row, column)         自定义转换函数。处理好的数据直接return（接受字符串或者自定义函数）\r\n\r\n                  format:'date',  金额万分位:money;  日期:date  目前只接受两种\r\n\r\n                  class: 'link', // 自定义类名\r\n                  popoverType: 'createUserName', // 制单人:createUserName; 不设置时只有文本被折叠时展示(popover内容是所有内容包括被折叠部分)\r\n                  lineClamp: 1, // 超出多少行隐藏,默认1行隐藏               这里决定多少行被折叠\r\n                  click(row) {}, //  单击事件。当前行作为参数，处理好的数据直接return\r\n\r\n                  // 下面是el-table-column参数，具体请查看element文档\r\n                  align: 'center', // 对齐方式\r\n                  width: '130', // 宽度\r\n                  minWidth: '10' // 最小宽度\r\n                }\r\n */\r\n\r\nimport TableExColumn from './Column/index.js'\r\nimport businessList from './businessList'\r\nimport { formatText } from './util'\r\nimport { ExcelExport } from 'pikaz-excel-js'\r\nexport default {\r\n  name: 'TableEx',\r\n  components: {\r\n    TableExColumn,\r\n    ExcelExport\r\n  },\r\n  props: {\r\n    tooltipEffect: {\r\n      type: String,\r\n      default: 'light'\r\n    },\r\n    excelName: {\r\n      type: String,\r\n      default: '导出列表'\r\n    },\r\n    rowClassName: {\r\n      type: [Function, String],\r\n      default: ''\r\n    },\r\n    actionsWidth: {\r\n      type: Number,\r\n      default: 120\r\n    },\r\n    showActions: {\r\n      // 显示默认操作栏\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    showPagination: {\r\n      // 显示分页器\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    popperClass: {\r\n      // popper自定义类\r\n      type: String,\r\n      default: 'popper-cont'\r\n    },\r\n    showCount: {\r\n      // 显示统计\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    countCont: {\r\n      // 统计栏文字，可插入html\r\n      type: String,\r\n      default: ''\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: 'mini'\r\n    },\r\n    tableLoading: {\r\n      // table Loading状态\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    exportExcelLoading: {\r\n      // Excel Loading状态\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    total: {\r\n      // total\t总条目数\tnumber\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    currentPage: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    pageSize: {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    columns: {\r\n      // 需要渲染的列数据，但这不是必要的，可以使用tbAfter插槽或者默认插槽插入内容\r\n      type: Array,\r\n      default() {\r\n        return [\r\n          // {\r\n          //   label: '部门', // 表头\r\n          //   prop: 'number', // 渲染的属性\r\n          //   // 输出前对数据进行转换处理。支持字符串或者函数\r\n\r\n          //   formatPopper(val, format, row, column)  提示的格式化方式默认使用format。\r\n          //   formatExport(val, format, row, column)  表格导出使用的格式化方式默认使用format。\r\n          //   format(val,format, row, column)         自定义转换函数。处理好的数据直接return（接受字符串或者自定义函数）\r\n\r\n          //   format:'date',  金额万分位:money;  日期:date  目前只接受两种\r\n\r\n          //   class: 'link', // 自定义类名\r\n          //   popoverType: 'createUserName', // 制单人:createUserName; 不设置时只有文本被折叠时展示(popover内容是所有内容包括被折叠部分)\r\n          //   lineClamp: 1, // 超出多少行隐藏,默认1行隐藏               这里决定多少行被折叠\r\n          //   click(row) {}, //  单击事件。当前行作为参数，处理好的数据直接return\r\n          //   // 下面是el-table-column参数，具体请查看element文档\r\n          //   align: 'center', // 对齐方式\r\n          //   width: '130', // 宽度\r\n          //   minWidth: '10' // 最小宽度\r\n          // }\r\n        ]\r\n      }\r\n    },\r\n    list: {\r\n      // 渲染数据\r\n      type: Array,\r\n      default() {\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n\r\n      tmpExcelName: '',\r\n      sheet: []\r\n    }\r\n  },\r\n  computed: {\r\n    bColumns() {\r\n      return this.columns.map((column) => {\r\n        return { ...businessList[column.business], ...column }\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    /**\r\n     * @description:表格导出功能\r\n     */\r\n    initExcel(table = []) {\r\n      this.$emit('update:exportExcelLoading', true)\r\n      const sheet1 = { sheetName: this.excelName, keys: [], tHeader: [], table }\r\n      this.bColumns.forEach(column => {\r\n        sheet1.keys.push(column.prop)\r\n        sheet1.tHeader.push(column.label)\r\n      })\r\n      this.setFname()\r\n      const self = this\r\n      return {\r\n        sheet: [sheet1],\r\n        format(sheet = this.sheet) {\r\n          try {\r\n            self.bColumns.forEach(column => {\r\n              sheet = sheet.map(item => {\r\n                const table = item.table.map(row => {\r\n                  const val = self.formatExport(row, column)\r\n                  return { ...row, [column.prop]: val }\r\n                })\r\n                return { ...item, table }\r\n              })\r\n            })\r\n            this.sheet = sheet\r\n          } catch (error) {\r\n            self.$emit('update:exportExcelLoading', false)\r\n          }\r\n          return this\r\n        },\r\n        cancel() {\r\n          self.$emit('update:exportExcelLoading', false)\r\n        },\r\n        export(sheet) {\r\n          self.sheet = sheet || this.sheet\r\n          self.$refs.excelExport.pikaExportExcel()\r\n          self.$emit('update:exportExcelLoading', false)\r\n          return this\r\n        } }\r\n    },\r\n    // async exportExcel(params) {\r\n    //   this.$emit('update:exportExcelLoading', true)\r\n    //   let sheet1\r\n    //   try {\r\n    //     const table = await params()\r\n    //     sheet1 = { sheetName: this.excelName, keys: [], tHeader: [], table }\r\n    //     this.bColumns.forEach(column => {\r\n    //       sheet1.keys.push(column.prop)\r\n    //       sheet1.tHeader.push(column.label)\r\n    //       sheet1.table = sheet1.table.map(row => {\r\n    //         const val = this.formatExport(row, column)\r\n    //         return { ...row, [column.prop]: val }\r\n    //       })\r\n    //     })\r\n    //   } catch (e) {\r\n    //     console.log('导出错误，错误信息：', e)\r\n    //     this.$message.error('导出错误')\r\n    //     this.$emit('update:exportExcelLoading', false)\r\n    //   }\r\n\r\n    //   const self = this\r\n    //   const Excel = {\r\n    //     sheet: [sheet1],\r\n    //     export(sheet) {\r\n    //       self.sheet = sheet || this.sheet\r\n    //       self.$refs.excelExport.pikaExportExcel()\r\n    //       self.$emit('update:exportExcelLoading', false)\r\n    //     }\r\n    //   }\r\n    //   return Excel\r\n    // },\r\n    /**\r\n     * @description: 设置表格名字\r\n     */\r\n    setFname() {\r\n      let date = this.utils.parseTime(new Date())\r\n      date = date.replace(' ', '_')\r\n      date = date.replace(':', '_')\r\n      this.tmpExcelName = this.excelName + date\r\n    },\r\n    /**\r\n     * @description: excel导出错误处理\r\n     */\r\n    onExcelExportError(err) {\r\n      // this.$message.info('导出失败：' + err)\r\n      self.$emit('update:exportExcelLoading', false)\r\n      this.$emit('onExcelExportError', err)\r\n    },\r\n    formatExport(row, column) {\r\n      const { formatExport, format } = column\r\n      return formatText(formatExport || format, row, column)\r\n    },\r\n    formatCont(row, column) {\r\n      const { format } = column\r\n      return formatText(format, row, column)\r\n    },\r\n    rowDblclick(...args) {\r\n      this.$emit('rowDblclick', ...args)\r\n    },\r\n    rowClick(...args) {\r\n      this.$emit('rowClick', ...args)\r\n    },\r\n    fetchData() {\r\n      this.$emit('fetchData')\r\n    },\r\n    /**\r\n     * @description: 当前页变化\r\n     * @param {Number} val 当前页\r\n     */\r\n    currentChange(current) {\r\n      this.$emit('update:currentPage', current)\r\n      this.$emit('currentChange', current)\r\n      this.fetchData()\r\n    },\r\n    /**\r\n     * @description: 设置分页大小\r\n     * @param {Number} val 页大小\r\n     */\r\n    sizeChange(pageSize) {\r\n      this.$emit('update:currentPage', 1) // 重置当前页\r\n      this.$emit('update:pageSize', pageSize)\r\n      this.$emit('sizeChange', pageSize)\r\n      this.fetchData()\r\n    }\r\n  }\r\n}\r\n",null]}
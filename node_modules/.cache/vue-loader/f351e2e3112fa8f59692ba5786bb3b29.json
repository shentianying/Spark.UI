{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\flowAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\flowAdd.vue","mtime":1634371102584},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { addFlow, putFlow } from '@/api/xtgl/flow'\r\nimport AddFlowNode from './component/addFlowNode'\r\nimport { getObjectValue } from '@/utils/index'\r\nexport default {\r\n  name: 'AddFlow',\r\n  components: {\r\n    AddFlowNode\r\n  },\r\n  props: {\r\n    obj: { type: Object, default: null },\r\n    formObj: { type: Object, default: null },\r\n    dropDownData: { type: Object, default: null },\r\n    isCopy: { type: Boolean, default: false }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        id: 0,\r\n        name: '',\r\n        formId: null,\r\n        // formName: '',\r\n        remark: '',\r\n        inUse: true,\r\n        flowNode: []\r\n      },\r\n      list: [],\r\n      flowStateNode: [],\r\n      buttonLoading: false,\r\n      dialogTableVisible: false,\r\n      currentRow: null,\r\n      state: 0, // 当前状态\r\n      index: 0,\r\n      formStateIndex: 0,\r\n      formStateId: null, // 查找 特殊操作 option用的\r\n      rules: {\r\n        name: [{ required: true, message: '必填', trigger: 'blur' }]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    getObjectValue() {\r\n      return getObjectValue\r\n    }\r\n  },\r\n  mounted() {\r\n    // console.log('formObj:', this.formObj)\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    submitForm() {\r\n      this.$refs['ruleForm'].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          // console.log('newObj:', newObj)\r\n          let flag = [false, '']\r\n          const flowNode = []\r\n          var group1 = 0\r\n          for (const s of this.flowStateNode) { // 表单状态循环\r\n            if (s.isCheckup && s.isFlowNode) {\r\n              s.flowNode.forEach((e, i) => { // 状态下的节点循环\r\n                group1 += 100\r\n                e.forEach((e2, i2) => { // 节点下的 审批人 循环\r\n                  if (i2 === e.length - 1 && i === s.flowNode.length - 1 && e2.maxDays > 0) {\r\n                    flag = [true, `${s.name}-最后一个节点最大审批时间必须等于0，当前是：${e2.maxDays}`]\r\n                  }\r\n                  flowNode.push({\r\n                    id: e2.id,\r\n                    flowId: newObj.id || 0,\r\n                    group: group1,\r\n                    mode: e2.mode,\r\n                    option: e2.option,\r\n                    roleType: e2.roleType,\r\n                    state: e2.state,\r\n                    maxDays: e2.maxDays,\r\n                    roleId: e2.roleId,\r\n                    grade: e2.grade\r\n                  })\r\n                })\r\n              })\r\n            }\r\n          }\r\n          if (flag[0]) {\r\n            this.$alert(flag[1])\r\n            return\r\n          }\r\n          newObj.flowNode = flowNode\r\n          // console.log('newObj:', newObj)\r\n          // 复制 操作\r\n          if (this.obj && this.isCopy) {\r\n            this.buttonLoading = true\r\n            delete newObj.id\r\n            delete newObj.lastEditDate\r\n            delete newObj.lastEditUserId\r\n            delete newObj.lastEditUserName\r\n            delete newObj.createUserName\r\n            delete newObj.createUserId\r\n            delete newObj.createUserName\r\n            newObj.flowNode.forEach(e => {\r\n              delete e.flowId\r\n              delete e.id\r\n            })\r\n            newObj.conditionDescription = ''\r\n            addFlow(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          }\r\n          // console.log('编辑流程请求对象：', newObj)\r\n          // return\r\n          if (this.obj && !this.isCopy) {\r\n            // 修改\r\n            this.buttonLoading = true\r\n            putFlow(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          } else if (!this.obj && !this.isCopy) {\r\n            // 添加\r\n            this.buttonLoading = true\r\n            addFlow(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    initData() {\r\n      const formStateList = [...this.dropDownData.formStateList]\r\n      if (this.obj) {\r\n        const thisObj = JSON.parse(JSON.stringify(this.obj))\r\n        // const formStateList = [...this.dropDownData.formStateList]\r\n        formStateList.forEach(e => {\r\n          if (e.isFlowNode) {\r\n            const fn = thisObj.flowNode.filter(f => f.state === e.value)\r\n            e.flowNode = this.groupBy(fn, function(item) { return [item.group] })\r\n            this.flowStateNode.push(e)\r\n          }\r\n        })\r\n        this.ruleForm = thisObj\r\n\r\n        // 清空\r\n        if (this.isCopy) {\r\n          this.ruleForm.name = ''\r\n          this.ruleForm.remark = ''\r\n        }\r\n      } else {\r\n        this.ruleForm.formId = this.formObj.id\r\n        formStateList.forEach(e => {\r\n          if (e.isFlowNode) {\r\n            e.flowNode = []\r\n            this.flowStateNode.push(e)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    addNode(index2, item1, index1) {\r\n      this.currentRow = null\r\n      this.index = index2\r\n      this.state = item1.value\r\n      this.formStateId = item1.id\r\n      this.formStateIndex = index1\r\n      this.dialogTableVisible = true\r\n    },\r\n    editNode(item1, index1, item2, index2) {\r\n      this.currentRow = item2\r\n      this.index = index2\r\n      this.state = item1.value\r\n      this.formStateId = item1.id\r\n      this.formStateIndex = index1\r\n      this.dialogTableVisible = true\r\n    },\r\n    deleteNode(index1, index2) {\r\n      this.$confirm('确定删除?', '提示', {\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.flowStateNode[index1].flowNode.splice(index2, 1)\r\n      }).catch(() => {})\r\n    },\r\n    dialogAddClose(data) {\r\n      this.dialogTableVisible = false\r\n      if (data) {\r\n        data.forEach(e => {\r\n          e.state = this.state\r\n        })\r\n        this.flowStateNode[this.formStateIndex].flowNode.splice(this.index, 0, data)\r\n      }\r\n    },\r\n    dialogEditClose(data) {\r\n      this.dialogTableVisible = false\r\n      if (data) {\r\n        data.forEach(e => {\r\n          e.state = this.state\r\n        })\r\n        // var a = this.flowStateNode[this.formStateIndex].flowNode\r\n        if (data.length === 0) {\r\n          // 为空就删除\r\n          this.flowStateNode[this.formStateIndex].flowNode.splice(this.index, 1)\r\n        } else {\r\n          // 否则 就替换\r\n          this.flowStateNode[this.formStateIndex].flowNode.splice(this.index, 1, data)\r\n        }\r\n      }\r\n    },\r\n    groupBy(array, f) {\r\n      const groups = {}\r\n      array.forEach(function(o) {\r\n        const group = JSON.stringify(f(o))\r\n        groups[group] = groups[group] || []\r\n        groups[group].push(o)\r\n      })\r\n      return Object.keys(groups).map(function(group) { return groups[group] })\r\n    }\r\n  }\r\n}\r\n",null]}
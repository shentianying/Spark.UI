{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\organization\\workerOrgEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\ggzx\\grgl\\organization\\workerOrgEdit.vue","mtime":1635749455662},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { saveData, getList, getDefaultOptions } from '@/api/ggzx/workerOrg'\r\nimport { getTree } from '@/utils/index'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nimport SelectPerson from '@/components/Other/selectPerson'\r\nimport SelectWorker from '@/components/Other/ggzx/selectWorker'\r\nimport OrgSelect2 from '@/components/OrgSelect/index2'\r\nexport default {\r\n  name: 'WorkerOrgEdit',\r\n  components: {\r\n    // OrgSelect2\r\n    Treeselect,\r\n    SelectPerson,\r\n    SelectWorker,\r\n    OrgSelect2\r\n  },\r\n  props: {\r\n    obj: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        pid: 0,\r\n        id: 0,\r\n        orgId: 0,\r\n        personType: null,\r\n        personId: null,\r\n        postTypeId: null,\r\n        name: '',\r\n        number: '',\r\n        personPostId: null,\r\n        post: {},\r\n        person: {},\r\n        worker: {}\r\n      },\r\n      activate: true,\r\n      treeList: null,\r\n      worker: {},\r\n      buttonLoading: false,\r\n      isLoad: false,\r\n      postTypeOptions: [],\r\n      personTypeOptions: [],\r\n      disabled: false,\r\n      rules: {\r\n        orgId: [{ required: true, message: '请选择项目', trigger: 'blur' }],\r\n        personType: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        postTypeId: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        personPostId: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        // parentPersonId: [\r\n        //   { required: true, message: '请选择', trigger: 'change' }\r\n        // ],\r\n        personId: [\r\n          { required: true, message: '请选择', trigger: 'blur' }\r\n        ]\r\n      },\r\n      personList: [],\r\n      // workerList: [],\r\n      loading: false\r\n    }\r\n  },\r\n  wathch: {\r\n  },\r\n  mounted() {\r\n    this.getOptions()\r\n    this.initData()\r\n    this.initTree()\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          this.buttonLoading = true\r\n          if (this.obj) {\r\n            newObj.id = this.obj.id\r\n          }\r\n          saveData(newObj).then(response => {\r\n            this.$message(response.message)\r\n            this.buttonLoading = true\r\n            this.$emit('dialogClose')\r\n          }).catch(() => { this.buttonLoading = false })\r\n        }\r\n      })\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    },\r\n    initData() {\r\n      if (this.obj) {\r\n        var newObj = JSON.parse(JSON.stringify(this.obj))\r\n        // newObj.inUse = newObj.inUse ? 'true' : 'false'\r\n        this.ruleForm = newObj\r\n        console.log('传过来的数据：', newObj)\r\n      }\r\n    },\r\n    initTree() {\r\n      this.listLoading = true\r\n      this.activate = false // 销毁部门组件\r\n      getList().then(response => {\r\n        response.data.forEach(ele => {\r\n          ele.label = ele.name\r\n          ele.personPostName = ele.post.name\r\n        })\r\n        // this.treeList = response.data\r\n        this.isLoad = true\r\n        // console.log('树形结构：', this.treeList)\r\n        const result = getTree(0, response.data)\r\n        this.treeList = [{ id: 0, pid: 0, label: '一级根目录', children: result }]\r\n        this.listLoading = false\r\n        this.activate = true // 加载部门组件\r\n      })\r\n    },\r\n    async getOptions() {\r\n      const {\r\n        personTypeOptions,\r\n        postTypeOptions\r\n      } = await getDefaultOptions()\r\n      this.personTypeOptions = personTypeOptions\r\n      this.postTypeOptions = postTypeOptions\r\n    },\r\n    /**\r\n     * 设置禁用\r\n     */\r\n    my_normalizer(node) {\r\n      if (node.postTypeId === 1) {\r\n        node.isDisabled = true\r\n      } else {\r\n        node.isDisabled = false\r\n      }\r\n      console.log(node)\r\n      return node\r\n    },\r\n    getPersons(personList) {\r\n      if ((personList || []).length > 0) {\r\n        // this.personList = [...this.personList, ...personList.map(m => { return { id: m.id, name: m.name } })]\r\n        this.$nextTick(() => {\r\n          console.log(personList[0])\r\n          this.ruleForm.person = personList[0]\r\n          this.ruleForm.personId = personList[0].id\r\n          this.ruleForm.name = personList[0].name\r\n          this.ruleForm.number = personList[0].number\r\n          this.ruleForm.post = personList[0].post\r\n          this.ruleForm.personPostId = personList[0].post.id\r\n        })\r\n      }\r\n    },\r\n    checkPerson() {\r\n      this.$refs.personRef.openDialog()\r\n    },\r\n    getWorkers(worker) {\r\n      this.ruleForm.worker = worker\r\n      this.worker = worker\r\n      this.ruleForm.personId = worker.personId\r\n      this.ruleForm.name = worker.name\r\n      this.ruleForm.number = worker.number\r\n      this.ruleForm.post = worker.person.post\r\n      this.ruleForm.personPostId = worker.person.postId\r\n    },\r\n    checkWorker() {\r\n      this.$refs.workerRef.openDialog()\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\project\\projectDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\project\\projectDetail.vue","mtime":1632363723626},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getProjectWithLXById } from '@/api/xmgl/project'\r\nimport UpFile from '@/components/UpLoad/UpFile'\r\nexport default {\r\n  name: 'ProjectDetail',\r\n  components: {\r\n    UpFile\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        orgId: 0,\r\n        managementiState: 0,\r\n        inUse: true,\r\n        organization: {\r\n          name: ''\r\n        },\r\n        zbFileList: [],\r\n        tbFileList: [],\r\n        sghtFileList: [],\r\n        bchtFileList: [],\r\n        psjlFileList: [],\r\n        zbtzsFileList: []\r\n      },\r\n      activeNames: ['info', 'warranty', 'file'],\r\n      engPropertiesName: '',\r\n      managementiStateName: '',\r\n      structureName: '',\r\n      informationSourceName: '',\r\n      taxTypeName: '',\r\n      projectPropertyName: '',\r\n      proPropertiesName: '',\r\n      stateName: '',\r\n      projectId: null,\r\n\r\n      projectLXList: [],\r\n      listLoading: false,\r\n\r\n      activeTab: 'projectInfo',\r\n      tabsInfo: [\r\n        { name: 'projectInfo', selected: false, label: '项目信息' },\r\n        { name: 'constructionPlan', selected: false, label: '施工策划' },\r\n        { name: 'projectPlan', selected: false, label: '项目计划' },\r\n        { name: 'projectProgress', selected: false, label: '项目进展' },\r\n        { name: 'projectExpenses', selected: false, label: '项目支出' },\r\n        { name: 'projectMoney', selected: false, label: '项目资金' },\r\n        { name: 'managePlan', selected: false, label: '经营策划' },\r\n        { name: 'projectCost', selected: false, label: '项目成本' },\r\n        { name: 'htly', selected: false, label: '合同履约' },\r\n        { name: 'projectLaborCost', selected: false, label: '项目人工费统计' }\r\n      ],\r\n\r\n      rules: { }\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n  },\r\n  activated() {\r\n  },\r\n  methods: {\r\n    initData() {\r\n      this.projectId = this.$route.query.id\r\n      if (this.projectId) {\r\n        this.listLoading = true\r\n        getProjectWithLXById({ id: this.projectId }).then((response) => {\r\n          const { data, dictionaries, lxList } = response\r\n          this.ruleForm = data\r\n          this.ruleForm.zbFileList = data.zbUpFile\r\n          this.ruleForm.tbFileList = data.tbUpFile\r\n          this.ruleForm.sghtFileList = data.sghtUpFile\r\n          this.ruleForm.bchtFileList = data.bchtUpFile\r\n          this.ruleForm.psjlFileList = data.psjlUpFile\r\n          this.ruleForm.zbtzsFileList = data.zbtzsUpFile\r\n          this.projectLXList = lxList\r\n          dictionaries.forEach(element => {\r\n            if (element.type === 'engProperties') {\r\n              this.engPropertiesName = element.name\r\n            }\r\n            if (element.type === 'managementiState') {\r\n              this.managementiStateName = element.name\r\n            }\r\n            if (element.type === 'structureType') {\r\n              this.structureName = element.name\r\n            }\r\n            if (element.type === 'informationSource') {\r\n              this.informationSourceName = element.name\r\n            }\r\n            if (element.type === 'taxType') {\r\n              this.taxTypeName = element.name\r\n            }\r\n            if (element.type === 'projectProperty') {\r\n              this.projectPropertyName = element.name\r\n            }\r\n            if (element.type === 'proProperties') {\r\n              this.proPropertiesName = element.name\r\n            }\r\n            if (element.type === 'projectState') {\r\n              this.stateName = element.name\r\n            }\r\n          })\r\n          this.listLoading = false\r\n        })\r\n      }\r\n      // 其他页面跳转至项目详情页时添加tab名，显示对应页\r\n      if (this.$route.query.tabName) {\r\n        this.activeTab = this.$route.query.tabName\r\n      }\r\n    },\r\n    closeThePage() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    },\r\n    // 解决 一次打开 多个选项卡一次性 加载 所有数据的问题\r\n    setSelected(tag) {\r\n      // this.tabsInfo[Number(tag.index)].selected = true  //如果有上面或中间不显示的tab，跳转tab时会不显示，index会重新排序\r\n      this.tabsInfo.find(f => f.name === tag.name).selected = true\r\n    },\r\n    getFormState(row) {\r\n      if (!row.billFlow) { return '流程空' }\r\n      const formState = row.billFlow.form.formState\r\n      this.formState = formState\r\n      const state = row.state\r\n      if (state === -1) return '作废'\r\n      const obj = formState.find(f => f.value === state)\r\n      if (obj) { return obj.name } else { return '状态不详' }\r\n    },\r\n    getPerson(bfn) {\r\n      if (bfn) {\r\n        var arr = bfn.filter(f => f.isCurrentState && !f.isChecked)\r\n        return arr.map(m => m.person.name).join('、')\r\n      }\r\n    },\r\n    viewProjectLX(id) {\r\n      this.$router.push({ name: 'ProjectLXDetail', query: { id: id, refreshRouterName: this.$route.name }, params: { id: id }})\r\n    }\r\n  }\r\n}\r\n",null]}
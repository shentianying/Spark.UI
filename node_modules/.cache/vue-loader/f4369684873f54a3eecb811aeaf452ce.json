{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\storage\\allocation\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\storage\\allocation\\index.vue","mtime":1635216068749},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getAllocationPaging } from '@/api/cggl/allocation'\r\nimport OrgSelect2 from '@/components/OrgSelect/index2'\r\nimport { getPersonList } from '@/api/rsgl/person'\r\nimport SearchForm from '@/components/Other/searchForm'\r\n// import { getDictionarysByTypes } from '@/api/xtgl/dictionary' // 入库类别\r\nexport default {\r\n  name: 'Allocation',\r\n  components: {\r\n    OrgSelect2,\r\n    SearchForm\r\n  },\r\n  data() {\r\n    return {\r\n      list: null,\r\n      listLoading: false,\r\n      dialogTableVisible: false,\r\n      dialogTitle: '保存',\r\n      total: 0,\r\n      currentPage: 1,\r\n      pageSize: this.utils.getPersonalSettings().pageSize,\r\n      formState: null,\r\n      currentRow: null,\r\n      orgList: null,\r\n      search: {\r\n        number: '',\r\n        orgOutIds: [],\r\n        orgInIds: [],\r\n        projectId: null,\r\n        states: [],\r\n        personIds: [],\r\n        categoryName: ''\r\n      },\r\n      entryTypeOptions: [],\r\n      tabPosition: 3, // 0:我发起，1：待审批 2:已审批\r\n      rules: {},\r\n      personList: [],\r\n      loading: false\r\n    }\r\n  },\r\n  computed: {\r\n    getOrgList() {\r\n      return this.$store.state.user.info.orgList\r\n    }\r\n  },\r\n  activated() {\r\n    if (this.$route.params.refresh) {\r\n      this.fetchData()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    searchData(currentPage) {\r\n      this.currentPage = currentPage\r\n      this.fetchData()\r\n    },\r\n    fetchData() {\r\n      this.listLoading = true\r\n      var postData = {}\r\n      postData.currentPage = this.currentPage\r\n      postData.pageSize = this.pageSize\r\n      postData.type = this.tabPosition\r\n      postData.number = this.search.number\r\n      postData.orgOutIds = this.search.orgOutIds\r\n      postData.orgInIds = this.search.orgInIds\r\n      postData.states = this.search.states\r\n      postData.personIds = this.search.personIds\r\n      postData.categoryName = this.search.categoryName\r\n      getAllocationPaging(postData).then(response => {\r\n        const { data, count } = response\r\n        this.list = data\r\n        this.total = count\r\n        this.listLoading = false\r\n      })\r\n      // getDictionarysByTypes({ types: 'entryType' })\r\n      //   .then((response) => {\r\n      //     const { data } = response\r\n      //     data.forEach(element => {\r\n      //       element.pid = element.pId\r\n      //       this.entryTypeOptions.push(element)\r\n      //     })\r\n      //   })\r\n    },\r\n    dialogClose() {\r\n      this.dialogTableVisible = false\r\n      this.fetchData()\r\n    },\r\n    handleAdd() {\r\n      this.$router.push({ name: 'AllocationEdit', query: { refreshRouterName: this.$route.name }, params: { type: 3 }})\r\n    },\r\n    handleEdit(row) {\r\n      this.$router.push({ name: 'AllocationEdit', query: { id: row.id, refreshRouterName: this.$route.name }, params: { id: row.id }})\r\n    },\r\n    attitude(row) {\r\n      this.$router.push({ name: 'AllocationAttitude', query: { id: row.id, refreshRouterName: this.$route.name }, params: { id: row.id }})\r\n    },\r\n    getFormState(row) {\r\n      if (!row.billFlow) { return '流程空' }\r\n      const formState = row.billFlow.form.formState\r\n      this.formState = formState\r\n      const state = row.state\r\n      if (state === -1) return '作废'\r\n      const obj = formState.find(f => f.value === state)\r\n      if (obj) { return obj.name } else { return '状态不详' }\r\n    },\r\n    sizeChange(val) {\r\n      this.pageSize = val\r\n      this.fetchData()\r\n    },\r\n    radioChange(value) {\r\n      // 清空条件\r\n      this.search = {\r\n        number: '',\r\n        orgOutIds: [],\r\n        orgInIds: [],\r\n        projectId: null,\r\n        states: [],\r\n        personIds: [],\r\n        categoryName: ''\r\n      }\r\n      // 填充数据\r\n      this.fetchData()\r\n    },\r\n    getPerson(bf) {\r\n      if (bf) {\r\n        var arr = bf.billFlowNode.filter(f => f.isCurrentState && !f.isChecked)\r\n        return arr.map(m => m.person.name).join('、')\r\n      }\r\n    },\r\n    getTypeName(type) {\r\n      return this.entryTypeOptions.find(f => f.id === type).name\r\n    },\r\n    getRemotePerson(query) {\r\n      query = query.trim()\r\n      if (query !== '') {\r\n        this.loading = true\r\n        setTimeout(() => {\r\n          getPersonList().then(response => {\r\n            this.personList = response.data\r\n            this.loading = false\r\n          })\r\n        }, 200)\r\n      } else {\r\n        this.personList = []\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}
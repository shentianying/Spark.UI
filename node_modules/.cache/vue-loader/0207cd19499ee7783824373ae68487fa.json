{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Other\\fpgl\\selectSubcontractPeople.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Other\\fpgl\\selectSubcontractPeople.vue","mtime":1635749455602},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getCurrentCompanyOrgList } from '@/api/xtgl/organization'\r\nimport { GetSubcontractPeopleList } from '@/api/fbgl/subcontractPeople'\r\nimport { getTree } from '@/utils'\r\nimport Select from '@/components/SearchBar/form/Select'\r\n/**\r\n * @description: 本组件提供双向绑定功能，绑定值为id 或 id数组\r\n * @event getCheckedItem 保存时触发的事件 参数为选中项(选项中包括但不限于id)\r\n * @event getAllOptions  初始化列表时触发,获取所有选项(选项中包括但不限于id)\r\n * @function getSelection 该方法可获取所有选中项(选项中包括但不限于id)\r\n */\r\nexport default {\r\n  name: 'SelectSubcontractor',\r\n  components: {\r\n  },\r\n  model: {\r\n    event: 'change',\r\n    prop: 'value'\r\n  },\r\n  props: {\r\n    value: { type: [Array, String, Number], default() { return [] } },\r\n    dialogWidth: { type: String, default: '70%' }, // 弹出层的宽度\r\n    multiple: { type: Boolean, default: true }, // 默认多选\r\n    maxItem: { type: Number, default: 3 }, // 多选最大个数\r\n    tableColumn: { // 表格渲染的列\r\n      type: Array,\r\n      default() {\r\n        return [\r\n          { prop: 'idNumber', label: '编号', minWidth: '150' },\r\n          { prop: 'name', label: '名称', minWidth: '90' },\r\n          { prop: 'orgName', label: '所在单位', minWidth: '120' }\r\n          // { prop: 'position', label: '职位', minWidth: '90' }\r\n        ]\r\n      }\r\n    },\r\n    selectRules: { // multiple为true时调用multiple验证,反之single,回调参数为this\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          single: [\r\n            { validator: ({ selectionItem }) => selectionItem.length > 0, message: '单选只能选一个哦' }\r\n          ],\r\n          multiple: [\r\n            { validator: ({ maxItem }) => maxItem < 2, message: '多选模式，maxItem参数必须大于2' },\r\n            {\r\n              validator: ({ selectionItem, maxItem }) => selectionItem.length >= maxItem,\r\n              message: '多选模式，maxItem参数必须大于2'\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    request: { // 请求对象\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          fn: GetSubcontractPeopleList,\r\n          params: [\r\n            { name: 'type', label: '分包类型', component: Select, props: { propsLabel: 'name', options: (res) => res.typeList }},\r\n            { name: 'name', label: '名称', component: 'ElInput' }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      open: false,\r\n      treeList: null,\r\n      table: { // 表格数据\r\n        list: [],\r\n        loading: false,\r\n        isInit: false\r\n      },\r\n      res: null,\r\n      saveLoading: false,\r\n      seleArr: [], // 选中的人员数组\r\n      postData: {},\r\n      treeProps: { // el-tree  props属性\r\n        children: 'children',\r\n        label: 'name'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    selectionItem: {\r\n      set(val) {\r\n        this.seleArr = val.map(({ id }) => id)\r\n        const data = this.multiple ? this.seleArr : this.seleArr[0]\r\n        this.$emit('change', data)\r\n      },\r\n      get() {\r\n        let data = this.seleArr\r\n        if (!Array.isArray(this.seleArr)) {\r\n          if (typeof this.seleArr !== 'number' && !this.seleArr) {\r\n            data = []\r\n          } else {\r\n            data = [this.seleArr]\r\n          }\r\n        }\r\n        data = data.map(id => this.table.list.find(f => f.id.toString() === id.toString()) || id)\r\n        return data\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    'request.params': {\r\n      handler(val) {\r\n        val.forEach(({ name }) => {\r\n          this.$set(this.postData, name, '')\r\n        })\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    'value': {\r\n      immediate: true,\r\n      deep: true,\r\n      handler(val) {\r\n        this.seleArr = val\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getTreeList()\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    getProps(props) {\r\n      const data = {}\r\n      for (const key in props) {\r\n        if (Object.hasOwnProperty.call(props, key)) {\r\n          if (typeof props[key] === 'function') {\r\n            data[key] = props[key](this.res)\r\n          } else {\r\n            data[key] = props[key]\r\n          }\r\n        }\r\n      }\r\n      return data\r\n    },\r\n    getSelection() {\r\n      return this.selectionItem\r\n    },\r\n    openDialog() {\r\n      // 清空数据\r\n      this.table.isInit = false\r\n      // this.selectionItem = []\r\n      // this.table.list = []\r\n      // this.searchText = ''\r\n      this.fetchData()\r\n      this.open = true\r\n    },\r\n    getTreeList() {\r\n      this.saveLoading = true\r\n      getCurrentCompanyOrgList().then(res => {\r\n        const { data } = res\r\n        this.treeList = getTree(0, data)\r\n      }).finally(() => { this.saveLoading = false })\r\n    },\r\n    filterNode(value, data) {\r\n      if (!value) return true\r\n      return data.name.indexOf(value) !== -1\r\n    },\r\n    test() { // 增加选项前检验\r\n      const rules = this.multiple ? this.selectRules.multiple : this.selectRules.single\r\n      const errItem = rules.find(({ validator }) => validator(this))\r\n      if (errItem) {\r\n        this.$alert(errItem.message)\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n    add(row) {\r\n      if (!this.test()) {\r\n        return\r\n      }\r\n      this.selectionItem = [...this.selectionItem, row]\r\n      this.save()\r\n    },\r\n    handleNodeClick(data, node) {\r\n      this.fetchData({ orgId: data.id })\r\n      // // 如果是叶子节点，就查找信息\r\n      // if (node.isLeaf) {\r\n      //   this.fetchData({ orgId: data.id })\r\n      // } else {\r\n      //   // this.$alert('选中的必须是最后的节点')\r\n      // }\r\n    },\r\n    tagClose(uid) {\r\n      this.selectionItem = this.selectionItem.filter(f => f.id !== uid)\r\n    },\r\n    fetchData(postData = {}) {\r\n      this.request.fn(postData).then(res => {\r\n        this.res = res\r\n        if (!this.table.isInit) {\r\n          this.table.isInit = true\r\n          this.$emit('getAllOptions', res.data)\r\n        }\r\n        this.table.list = res.data\r\n        this.saveLoading = false\r\n      }).catch(() => { this.saveLoading = false })\r\n    },\r\n    search() {\r\n      this.saveLoading = true\r\n      setTimeout(() => {\r\n        this.fetchData(this.postData)\r\n      }, 700)\r\n    },\r\n    save() {\r\n      this.saveLoading = true\r\n      // 触发父组件的事件\r\n      setTimeout(() => {\r\n        this.$emit('getCheckedItem', this.multiple ? this.selectionItem : this.selectionItem[0])\r\n        this.saveLoading = false\r\n        this.open = false\r\n      }, 300)\r\n    }\r\n  }\r\n}\r\n",null]}
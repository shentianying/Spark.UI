{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\paid\\paidDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\paid\\paidDetail.vue","mtime":1634781212950},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport UpFile from '@/components/UpLoad/UpFile'\r\nimport { getCGPaidDetailById } from '@/api/cggl/paid'\r\nimport { getDictionarysByTypes } from '@/api/xtgl/dictionary'\r\nexport default {\r\n  name: 'PaidDetail',\r\n  components: {\r\n    UpFile\r\n  },\r\n  props: {\r\n    obj: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        id: 0,\r\n        number: '',\r\n        orgId: null,\r\n        fileList: [],\r\n        quotation: {},\r\n        supplier: {},\r\n        contract: [],\r\n        sumAmount: 0\r\n      },\r\n      loading: false,\r\n      activate: true,\r\n      orgStr: '',\r\n      active: 0,\r\n      dialogTableVisible: false,\r\n      dialogTitle: '保存',\r\n      dialogWidth: '70%',\r\n      comName: 'PlanDetailAdd',\r\n      currentRow: null,\r\n      list: [],\r\n      payModes: [],\r\n      payModeOptions: [],\r\n      keyPayMode: 0,\r\n      billFlow: null,\r\n      isLoad: false,\r\n      attitudePara: {},\r\n      loadFlow: false,\r\n      rules: {},\r\n      isPaid: false,\r\n      attitudeAmount: 0,\r\n      acceptanceList: []\r\n    }\r\n  },\r\n  watch: {\r\n  },\r\n  activated() {\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    async initData() {\r\n      // 有参数id 就是编辑\r\n      if (this.$route.query.id) {\r\n        if (this.obj && this.obj.id) {\r\n          this.id = this.obj.id\r\n        } else {\r\n          this.id = this.$route.query.id\r\n        }\r\n      }\r\n      if (this.id) {\r\n        this.loading = true\r\n        this.activate = false // 销毁部门组件\r\n        await getCGPaidDetailById({ id: this.id }).then(response => this.setData(response))\r\n      }\r\n      getDictionarysByTypes({ types: 'CapitalType' })\r\n        .then((response) => {\r\n          const { data } = response\r\n          data.forEach(element => {\r\n            element.pid = element.pId\r\n            this.payModeOptions.push(element)\r\n          })\r\n          this.keyPayMode += 1\r\n        })\r\n    },\r\n    setData(response) {\r\n      const { data, orgStr, sumAmount } = response\r\n      this.ruleForm = data\r\n      this.ruleForm.fileList = data.upFile\r\n      this.ruleForm.sumAmount = sumAmount\r\n      this.attitudeAmount = data.attitudeAmount\r\n      this.orgStr = orgStr\r\n      this.isLoad = true\r\n      // 填充 明细列表\r\n      this.payModes = data.cgPaidDetails\r\n      this.loading = false // loading 状态关闭\r\n      this.activate = true // 加载部门组件\r\n    },\r\n    closeThePage() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    },\r\n    updateFlow() {\r\n      this.closeThePage()\r\n    },\r\n    openContract(id) {\r\n      this.$router.push({ name: 'ContractDetail', query: { id: id, refreshRouterName: this.$route.name }, params: { id: id }})\r\n    },\r\n    getPayModeName(type) {\r\n      if (type !== null) {\r\n        var entryType = this.payModeOptions.find(f => f.value === type)\r\n        if (entryType !== undefined) {\r\n          return entryType.name\r\n        } else {\r\n          return ''\r\n        }\r\n      } else {\r\n        return ''\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\gckgl\\output\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xmgl\\gckgl\\output\\index.vue","mtime":1635749455698},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getProjectOutputPaging } from '@/api/xmgl/projectOutput'\r\nimport SearchBar from '@/components/SearchBar'\r\nimport searchData from './searchData'\r\nimport { ExcelExport } from 'pikaz-excel-js'\r\n\r\nexport default {\r\n  name: 'ProjectOutput',\r\n  components: {\r\n    SearchBar,\r\n    ExcelExport\r\n  },\r\n  data() {\r\n    return {\r\n      tabPosition: 0,\r\n      size: 'mini', // 整体大小 medium / small / mini\r\n      searchData: searchData, // 渲染搜索栏数据\r\n      internalOutput: 0, // 统计对内产值\r\n      externalOutput: 0, // 统计对外产值\r\n      receivable: 0, // 统计应收款\r\n      stateList: [], // 单据状态\r\n\r\n      filename: '工程产值应收款列表',\r\n      exLoading: false,\r\n      sheet: [],\r\n\r\n      /* 列表数据相关 */\r\n      table: {\r\n        list: [],\r\n        loading: false,\r\n        total: 0,\r\n        currentPage: 1,\r\n        pageSize: this.utils.getPersonalSettings().pageSize\r\n      }\r\n    }\r\n  },\r\n  activated() {\r\n    console.info('actived')\r\n    this.fetchData()\r\n  },\r\n  created() {\r\n    console.info('created')\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n\r\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\r\n    async fetchData() {\r\n      this.table.loading = true\r\n      try {\r\n        // 获取请求参数\r\n        const postData = this.getSearchData()\r\n        postData.currentPage = this.table.currentPage\r\n        postData.pageSize = this.table.pageSize\r\n        postData.type = this.tabPosition\r\n        console.log('fetchData:请求数据', postData)\r\n\r\n        // 请求开始\r\n        const response = await getProjectOutputPaging(postData)\r\n        const {\r\n          data,\r\n          count,\r\n          projectStateList,\r\n          internalOutput,\r\n          externalOutput,\r\n          receivable\r\n        } = response\r\n\r\n        this.internalOutput = internalOutput\r\n        this.externalOutput = externalOutput\r\n        this.receivable = receivable\r\n        // 搜索栏数据初始化\r\n        projectStateList.forEach(ele => {\r\n          // 项目状态选项数据转换\r\n          ele.label = ele.name\r\n        })\r\n\r\n        if (count > 0) {\r\n          data.forEach(ele => {\r\n            if (ele.billFlow != null) {\r\n              this.stateList = ele.billFlow.form.formState\r\n            }\r\n          })\r\n          this.stateList.forEach(ele => { ele.label = ele.name }) // 数据转换\r\n        }\r\n\r\n        this.searchData = this.searchData.map(item => {\r\n          item.options = item.name === 'projectState' ? projectStateList : item.options\r\n          item.options = item.name === 'states' ? this.stateList : item.options\r\n          return item\r\n        })\r\n\r\n        // 列表数据初始化\r\n        this.table.list = data\r\n        this.table.total = count\r\n      } catch (e) {\r\n        console.log('fetchData:请求列表数据失败，错误信息：', e)\r\n      } finally {\r\n        this.table.loading = false\r\n      }\r\n    },\r\n    /**\r\n     * @description: 设置表格名字\r\n     */\r\n    setFname() {\r\n      let date = this.utils.parseTime(new Date())\r\n      date = date.replace(' ', '_')\r\n      date = date.replace(':', '_')\r\n      this.filename = this.filename + date\r\n    },\r\n    /**\r\n     * @description:表格导出功能\r\n     */\r\n    async exportExcel() {\r\n      try {\r\n        this.exLoading = true\r\n        const postData = this.getSearchData()\r\n        postData.currentPage = this.table.currentPage\r\n        postData.pageSize = this.table.total\r\n        const { data } = await getProjectOutputPaging(postData)\r\n\r\n        const table = data.map(item => {\r\n          return { ...item,\r\n            state: item.state === 0 ? '制单' : item.state === 1 ? '审批' : item.state === 10000 ? '完成' : '作废' }\r\n        })\r\n        this.sheet = [{\r\n          sheetName: '工程产值应收款列表',\r\n          keys: [\r\n            'number',\r\n            'orgName',\r\n            'projectName',\r\n            'firstPartyName',\r\n            'outputYear',\r\n            'outputMonth',\r\n            'managerName',\r\n            'internalOutput',\r\n            'externalOutput',\r\n            'receivable',\r\n            'remark',\r\n            'state',\r\n            'createUserName',\r\n            'createDate'\r\n          ],\r\n          tHeader: [\r\n            '编号',\r\n            '地区',\r\n            '项目',\r\n            '甲方名称',\r\n            '年份',\r\n            '月份',\r\n            '项目经理',\r\n            '对内产值',\r\n            '对外产值',\r\n            '应收',\r\n            '备注',\r\n            '状态',\r\n            '制单人',\r\n            '制单日期'\r\n          ],\r\n          table\r\n        }]\r\n        this.setFname()\r\n        this.$refs.excelExport.pikaExportExcel()\r\n      } catch (e) {\r\n        console.log(e)\r\n        this.onError('获取表格数据失败！')\r\n      } finally {\r\n        this.exLoading = false\r\n      }\r\n    },\r\n    /**\r\n     * @description: excel导出错误处理\r\n     */\r\n    onError(err) {\r\n      this.$message.info('导出失败：' + err)\r\n    },\r\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\r\n    getSearchData() {\r\n      const data = {}\r\n      console.log(this.searchData)\r\n      this.searchData.forEach(item => {\r\n        const val = item.value\r\n        if (item.name === 'yearmonth') {\r\n          data.outputYear = val[0]\r\n          data.outputMonth = val[1]\r\n        } else if (item.name === 'year') {\r\n          data.year = new Date(val).getFullYear()\r\n        } else {\r\n          data[item.name] = item.value\r\n        }\r\n      })\r\n      return data\r\n    },\r\n    /**\r\n     * @description: type栏数据转换\r\n     * @param {Number} value\r\n     */\r\n    radioChange(value) {\r\n      // 清空和切换条件\r\n      this.searchData = searchData\r\n      // 填充数据\r\n      this.fetchData()\r\n    },\r\n    /**\r\n     * @description: 设置分页大小\r\n     * @param {Number} val\r\n     */\r\n    sizeChange(val) {\r\n      this.table.pageSize = val\r\n      this.fetchData()\r\n    },\r\n    /**\r\n     * @description: 搜索回调\r\n     */\r\n    async handelSearch() {\r\n      await this.fetchData()\r\n    },\r\n    /**\r\n     * @description: 单据状态\r\n     * @param {Object} row\r\n     */\r\n    getFormState(row) {\r\n      if (!row.billFlow) { return '流程空' }\r\n      const formState = row.billFlow.form.formState\r\n      this.formState = formState\r\n      const state = row.state\r\n      const obj = formState.find(f => f.value === state)\r\n      if (obj) { return obj.name } else { return '状态不详' }\r\n    },\r\n    getType(state) {\r\n      var type = 'primary'\r\n      switch (state) {\r\n        case 0:type = 'info'\r\n          break\r\n        case 1:type = 'warning'\r\n          break\r\n        case 1000:type = 'primary'\r\n          break\r\n        case 10000:type = 'success'\r\n          break\r\n        case -1:type = 'danger'\r\n          break\r\n      }\r\n      return type\r\n    },\r\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\r\n    handleDetails(row) {\r\n      this.$router.push({ name: 'ProjectOutputDetail', query: { id: row.id, refreshRouterName: this.$route.name }, params: { id: row.id }})\r\n    },\r\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\r\n    handleAttitude(row) {\r\n      this.$router.push({ name: 'ProjectOutputAttitude', query: { id: row.id, refreshRouterName: this.$route.name }, params: { id: row.id }})\r\n    },\r\n    /**\r\n     * @description: table编辑\r\n     * @param {Object} row\r\n     */\r\n    handleEdit(id = '', type) {\r\n      this.$router.push({ name: 'ProjectOutputEdit', query: { type, id, refreshRouterName: this.$route.name }, params: { id: id, type: 3 }})\r\n    }\r\n  }\r\n}\r\n",null]}
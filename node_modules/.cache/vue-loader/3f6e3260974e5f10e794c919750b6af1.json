{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\ywgl\\khgl\\customerEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\ywgl\\khgl\\customerEdit.vue","mtime":1635986885915},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getCustomerById, putCustomer, addCustomer } from '@/api/ywgl/customer'\r\nimport { getDictionarysByTypes } from '@/api/xtgl/dictionary'\r\nimport UpFile from '@/components/UpLoad/UpFile'\r\nexport default {\r\n  name: 'CustomerEdit',\r\n  components: {\r\n    UpFile\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        name: '',\r\n        customerType: null,\r\n        companyId: this.$store.state.user.selectOrgId,\r\n        legalPerson: '',\r\n        linkMan: '',\r\n        linkManTel: '',\r\n        linkManPosition: '',\r\n        linkManChiefArea: '',\r\n        capitalSource: '',\r\n        capital: 0,\r\n        companyPhone: '',\r\n        address: '',\r\n        email: '',\r\n        mainBusiness: '',\r\n        remark: '',\r\n        inUse: true,\r\n        upFile: [],\r\n        fileList: []\r\n      },\r\n      customerTypeList: [], // 客户类别列表\r\n      buttonLoading: false,\r\n      refreshRouterName: '',\r\n      rules: {\r\n        name: [{ required: true, message: '不能为空', trigger: 'blur' }],\r\n        legalPerson: [{ required: true, message: '不能为空', trigger: 'blur' }],\r\n        linkMan: [{ required: true, message: '不能为空', trigger: 'blur' }],\r\n        linkManTel: [{ required: true, message: '不能为空', trigger: 'blur' }],\r\n        customerType: [{ required: true, message: '不能为空', trigger: ['blur', 'change'] }]\r\n      }\r\n    }\r\n  },\r\n  activated() {\r\n    if (this.$route.query.id) {\r\n      this.fetchData()\r\n      this.refreshRouterName = this.$route.params.refreshRouterName\r\n    }\r\n  },\r\n  mounted() {\r\n    getDictionarysByTypes({ types: 'customerType' }).then(response => {\r\n      const { data } = response\r\n      // 1.客户类型下拉列表\r\n      this.customerTypeList = data\r\n    })\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          var postData = JSON.parse(JSON.stringify(this.ruleForm))\r\n          console.log(postData)\r\n          let tempIds = []\r\n          if (postData.upFile.length) {\r\n            tempIds = postData.upFile.map(m => {\r\n              return { id: m.id, addFlag: m.addFlag }\r\n            })\r\n          }\r\n          postData.fileList = tempIds\r\n          if (this.$route.query.id) {\r\n            this.buttonLoading = true\r\n            putCustomer(postData)\r\n              .then((response) => {\r\n                this.$message(response.message)\r\n                this.buttonLoading = false\r\n                this.closeThePage()\r\n              }).catch(() => { this.buttonLoading = false })\r\n          } else {\r\n            this.buttonLoading = true\r\n            addCustomer(postData)\r\n              .then((response) => {\r\n                this.$message(response.message)\r\n                this.buttonLoading = false\r\n                this.closeThePage()\r\n              })\r\n              .catch(() => {\r\n                this.buttonLoading = false\r\n              })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    async fetchData() {\r\n      if (this.$route.query.id !== 0) {\r\n        await getCustomerById({ id: this.$route.query.id }).then((response) => {\r\n          const { data } = response\r\n          this.ruleForm = data\r\n        })\r\n      }\r\n    },\r\n    closeThePage() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    }\r\n  }\r\n}\r\n",null]}
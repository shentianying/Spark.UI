{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\shouKuan\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\shouKuan\\edit.vue","mtime":1630029466056},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport { SaveGathering, GetPaymentById, GetGatheringPaging, InvalidGathering } from '@/api/cwgl/zjgl/zjsk.js'\r\nimport { ExcelExport, ExcelImport } from 'pikaz-excel-js'\r\nimport { validateData } from '@/utils/validate'\r\nimport { formatExcelDate, cleanText } from '@/utils/index'\r\nimport { getPersonList } from '@/api/rsgl/person'\r\nimport TreeSelect from '@/components/SearchBar/OrgSelect'\r\nexport default {\r\n  name: 'ShouKuanEdit',\r\n  // 局部注册的组件\r\n  components: {\r\n    ExcelImport,\r\n    ExcelExport,\r\n    TreeSelect\r\n  },\r\n  filters: {\r\n    /**\r\n     * @description: 时间过滤器\r\n     * @param {Date} val\r\n     * @return {String} 年-月-日\r\n     */\r\n    date(val) {\r\n      return new Date(val).toLocaleDateString().replaceAll('/', '-')\r\n    }\r\n  },\r\n  // 组件状态值\r\n  data() {\r\n    return {\r\n      size: 'mini', // 整体大小\r\n      personList: [], // 经手人组\r\n\r\n      skForm: {\r\n        id: '',\r\n        gatheringDate: '',\r\n        acceptanceList: [],\r\n        number: '', // 收款编号\r\n        orgId: '', // 部门\r\n        gatheringType: '', // 收款类型\r\n        capitalType: '', // 资金类型\r\n        date1: '', // 收款日期\r\n        personId: '', // 经手人ID\r\n        personName: '', // 经手人\r\n        amount: '', // 金额\r\n        bank: '', // 银行\r\n        remark: '' // 备注\r\n      },\r\n      sheet: [{\r\n        // title: '材料计划导入模板',\r\n        tHeader: ['票号', '开票时间', '到期日期', '金额', '出票人', '付款人', '收款人', '付款行', '备注'],\r\n        table: [],\r\n        keys: ['string', 'datetime', 'datetime', 'decimal', 'string', 'string', 'string', 'string', 'string'],\r\n        sheetName: '材料明细'\r\n      }],\r\n      sklxData: [],\r\n      zjlxData: [],\r\n      // 验证规则\r\n      rules: {\r\n        orgId: [{ required: true, message: '请选择部门', trigger: 'blur' }],\r\n        gatheringType: [{ required: true, message: '请选择收款类型', trigger: 'change' }],\r\n        capitalType: [{ required: true, message: '请选择资金类型', trigger: 'change' }],\r\n        gatheringDate: [{ type: 'date', required: true, message: '请选择日期', trigger: 'blur' }],\r\n        personId: [{ required: true, message: '请选择经手人', trigger: 'blur' }],\r\n        amount: [{ required: true, message: '请输入金额', trigger: 'blur' }]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.skForm.id = this.$route.params.id\r\n    this.getPersonList()\r\n    if (this.skForm.id) {\r\n      this.getskForm()\r\n    } else {\r\n      this.getOptions()\r\n    }\r\n  },\r\n  // 组件方法\r\n  methods: {\r\n    async invalidGathering() {\r\n      InvalidGathering(this.skForm.id).then((res) => {\r\n        this.$message.success(res.message)\r\n      }).catch(err => {\r\n        console.log(err)\r\n        // this.$message.error(err.errorMsg || '操作失败')\r\n      })\r\n    },\r\n    onSuccess(d, file) {\r\n      var data = d[0].data\r\n      console.log('数据为空的字段data中不会有该字段:', data)\r\n      if (data.length) {\r\n        const postData = []\r\n        var errorMessage = ''\r\n        for (var e of data) {\r\n          if (!e.材料名称) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，材料名称不能为空；'\r\n          }\r\n          if (!e.主数量) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，主数量不能为空；'\r\n          } else {\r\n            if (!validateData.dbl(e.主数量.trim()).isSuccess) {\r\n              errorMessage += '第' + e.__rowNum__ + '行，主数量必须是数字；'\r\n            }\r\n          }\r\n          // 辅单位不为空，辅数量不能为空\r\n          if (e.辅单位) {\r\n            if (!e.辅数量) {\r\n              errorMessage += '第' + e.__rowNum__ + '行，辅单位不为空，辅数量不能为空；'\r\n            } else {\r\n              if (!validateData.dbl(e.辅数量.trim()).isSuccess) {\r\n                errorMessage += '第' + e.__rowNum__ + '行，辅数量必须是数字；'\r\n              }\r\n            }\r\n          }\r\n          if (!e.进场日期) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，进场日期不能为空；'\r\n          } else {\r\n            const convertDate = formatExcelDate(e.进场日期.trim())\r\n            // console.log('数字格式化后的日期：', convertDate)\r\n            if (!validateData.date(convertDate).isSuccess) {\r\n              errorMessage += '第' + e.__rowNum__ + '行，进场日期格式错误；'\r\n            }\r\n          }\r\n          this.loading = true\r\n          if (errorMessage.length > 0) {\r\n            this.$alert(`${errorMessage.replace(/；/g, '；<br />')}`,\r\n              { dangerouslyUseHTMLString: true })\r\n            this.loading = false\r\n            return\r\n          }\r\n\r\n          var obj1 = {}\r\n          var obj2 = {}\r\n          var detailCols = ['ApplicationQuantity', 'ApplicationQuantity2', 'EntryDate', 'Remark']\r\n          this.sheet[0].keys.forEach((v, i) => {\r\n            var value = e[this.sheet[0].tHeader[i]]\r\n            // 清除空格 回车 换行符\r\n            if (value) { value = cleanText(value) } else { value = '' }\r\n            // console.log('v:' + v + ';value:' + value)\r\n            if (v === 'EntryDate') { value = formatExcelDate(e.进场日期) }\r\n            if (detailCols.includes(v)) { obj1[v] = value } else { obj2[v] = value }\r\n          })\r\n          obj1['Material'] = obj2\r\n          postData.push(obj1)\r\n        }\r\n        // console.log('postData:', postData)\r\n        // 把数据推送到后端进行验证\r\n\r\n        // console.log('responseData:', response.data)\r\n        if (postData) {\r\n          // 拼接成数组对象\r\n          for (var item1 of postData) {\r\n            const obj2 = {\r\n              categoryId: item1.material.categoryId,\r\n              category: { id: item1.material.categoryId, name: item1.material.categoryName },\r\n              // unit: item1.material.unit,\r\n              unit2: item1.material.unit2,\r\n              brand: item1.material.brand,\r\n              model: item1.material.model,\r\n              spec: item1.material.spec,\r\n              thickness: item1.material.thickness,\r\n              texture: item1.material.texture,\r\n              surfaceTreatment: item1.material.surfaceTreatment,\r\n              designNumber: item1.material.designNumber,\r\n              applicationQuantity: item1.applicationQuantity,\r\n              applicationQuantity2: item1.applicationQuantity2,\r\n              quantity: item1.applicationQuantity,\r\n              quantity2: item1.applicationQuantity2,\r\n              entryDate: item1.entryDate,\r\n              remark: item1.remark\r\n              // fileList: []\r\n            }\r\n            this.addMaterial(obj2, 'add')\r\n          }\r\n          this.setColumnShow()\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * @description: 获取经手人列表\r\n     */\r\n    getPersonList() {\r\n      getPersonList().then(response => {\r\n        this.personList = response.data\r\n      })\r\n    },\r\n    // 获取资金类型、收款类型选项\r\n    async getOptions() {\r\n      const { capitalTypeOptions, gatheringTypeOptions } = await GetGatheringPaging({ currentPage: 1, pageSize: 1 })\r\n      this.sklxData = gatheringTypeOptions\r\n      this.zjlxData = capitalTypeOptions\r\n    },\r\n    // 获取收款信息数据\r\n    getskForm() {\r\n      GetPaymentById(this.skForm.id)\r\n        .then(res => {\r\n          const {\r\n            code,\r\n            data,\r\n            gatheringTypeOptions,\r\n            capitalTypeOptions\r\n          } = res\r\n          if (code === 200) {\r\n            for (const key in this.skForm) {\r\n              if (Object.hasOwnProperty.call(this.skForm, key)) {\r\n                this.skForm[key] = data[key]\r\n              }\r\n            }\r\n\r\n            if (Array.isArray(this.skForm.acceptanceList)) {\r\n              this.skForm.acceptanceList.forEach(ele => {\r\n                this.$set(ele, 'isEdit', false)\r\n                this.$set(ele, 'backups', JSON.stringify(ele))\r\n              })\r\n            }\r\n            this.sklxData = gatheringTypeOptions\r\n            this.zjlxData = capitalTypeOptions\r\n          }\r\n        }).catch(err => {\r\n          console.log(err)\r\n          // this.$message.error(err.errorMsg)\r\n        })\r\n    },\r\n    /**\r\n     * 序号+0\r\n     * @params:{number||string}\r\n     * @return：index\r\n     */\r\n    indexMethod(index) {\r\n      index = String(index + 1)\r\n      const length = index.length\r\n      if (index.length < 2) {\r\n        for (let i = 0; i < 2 - length; i++) {\r\n          index = '0' + index\r\n        }\r\n        return index\r\n      } else {\r\n        return index\r\n      }\r\n    },\r\n    handleEdit(row) {\r\n      this.$set(row, 'isEdit', true)\r\n    },\r\n    handleSubmitEdit(row) {\r\n      this.$set(row, 'isEdit', false)\r\n    },\r\n    /**\r\n     * @description: 列表行内编辑取消修改\r\n     * @param {*} row\r\n     * @return {*}\r\n     */\r\n    handleCancelEdit(row) {\r\n      Object.assign(row, JSON.parse(row.backups))\r\n    },\r\n    async submitForm() {\r\n      const AcceptanceList = this.skForm.acceptanceList.map(item => {\r\n        const tmp = { ...item }\r\n        delete tmp.isEdit\r\n        delete tmp.backups\r\n        return tmp\r\n      })\r\n      const data = { ...this.skForm, AcceptanceList }\r\n      delete data.acceptanceList\r\n      const res = await SaveGathering(data)\r\n      this.$message.success(res.message)\r\n    },\r\n    cancelForm(formName) {\r\n      // this.$router({name:\"\"})\r\n      this.$refs[formName].resetFields()\r\n    },\r\n    addRow() {\r\n      const row = { isEdit: false }\r\n      this.$set(row, 'backups', JSON.stringify(row))\r\n      row.isEdit = true\r\n      this.skForm.acceptanceList.push(row)\r\n    },\r\n    deleteRow(index, rows) {\r\n      rows.splice(index, 1)\r\n    }\r\n  }\r\n}\r\n",null]}
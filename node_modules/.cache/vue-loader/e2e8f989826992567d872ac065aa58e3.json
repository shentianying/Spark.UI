{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\jhgl\\planDetailAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\jhgl\\planDetailAdd.vue","mtime":1627105574176},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import { getMaterialCategoryByIsMain, getAllMaterialCategory, getMaterialCategoryPropertyByCategoryId } from '@/api/cggl/material'\r\nimport { getMaterialCategoryByIsMain, getMaterialCategoryPropertyByCategoryId } from '@/api/cggl/material'\r\n// import UpFile from '@/components/UpLoad/UpFile'\r\nimport { getTree } from '@/utils/index'\r\nimport { validate } from '@/utils/validate'\r\nexport default {\r\n  name: 'PlanDetailAdd',\r\n  components: {\r\n    // UpFile\r\n  },\r\n  props: {\r\n    obj: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        categoryId: null,\r\n        category: null,\r\n        // unit: '',\r\n        unit2: '',\r\n        brand: '',\r\n        model: '',\r\n        spec: '',\r\n        thickness: '',\r\n        texture: '',\r\n        surfaceTreatment: '',\r\n        designNumber: '',\r\n\r\n        applicationQuantity: null,\r\n        applicationQuantity2: null,\r\n        quantity: null,\r\n        quantity2: null,\r\n        entryDate: null,\r\n        remark: ''\r\n\r\n        // confirmTime: null,\r\n        // processOrgId: null,\r\n        // processUser: null,\r\n        // enteredQuantity: null\r\n      },\r\n      buttonLoading: false,\r\n      comName: '',\r\n      list: null,\r\n      categoryList: null,\r\n      categoryPropertyList: null,\r\n      oldrProperty: {},\r\n      options: null,\r\n      rules: {\r\n        categoryId: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        // applicationQuantity: [{ type: 'string', required: true, message: '必须是数字类型', trigger: 'blur' }],\r\n        applicationQuantity: [{ validator: validate.logic, logic: value => value > 0, required: true, trigger: 'blur' }],\r\n        applicationQuantity2: [{ validator: validate.logic, logic: value => value > 0, required: true, trigger: 'blur' }],\r\n        entryDate: [{ type: 'string', required: true, message: '请输入', trigger: ['blur', 'change'] }]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    getEndCategoryId() { // 获取categoryId数 组中最后一个 id\r\n      return this.ruleForm.categoryId[this.ruleForm.categoryId.length - 1]\r\n    }\r\n  },\r\n  watch: {\r\n    'ruleForm.unit2': {\r\n      handler: function(value) {\r\n        if (value === '') { this.rules.applicationQuantity2[0].required = false } else { this.rules.applicationQuantity2[0].required = true }\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          // 获取级联数组中的最后一个id,就是当前选中的最末级的分类id\r\n          var computerCategoryId = newObj.categoryId[newObj.categoryId.length - 1]\r\n          newObj.category = this.categoryList.find(f => f.id === computerCategoryId)\r\n          newObj.categoryId = computerCategoryId\r\n          newObj.quantity = newObj.applicationQuantity\r\n          newObj.quantity2 = newObj.applicationQuantity2\r\n          // newObj.unit = newObj\r\n          if (newObj.category.level !== 3) {\r\n            this.$message.error('选择的材料必须是三级分类')\r\n            return false\r\n          }\r\n          // console.log('修改计划明细后返回的值:', newObj)\r\n          if (this.obj) {\r\n            this.$emit('dialogClose', newObj, 'update')\r\n          } else {\r\n            this.$emit('dialogClose', newObj, 'add')\r\n          }\r\n        }\r\n      })\r\n    },\r\n    initData() {\r\n      const promise = this.getCategory()\r\n      if (this.obj) {\r\n        promise.then(() => {\r\n          var newObj = JSON.parse(JSON.stringify(this.obj))\r\n          console.log('initData=>this.obj:', this.obj)\r\n          console.log('initData=>newObj:', newObj)\r\n          this.ruleForm = newObj\r\n          // 拼接id成三级数组，来匹配 选材料 级联菜单\r\n          var categoryIdArray = []\r\n          var secondCategoryId = this.categoryList.find(f => f.id === this.ruleForm.categoryId).pid\r\n          var firstCategoryId = this.categoryList.find(f => f.id === secondCategoryId).pid\r\n          categoryIdArray.push(firstCategoryId)\r\n          categoryIdArray.push(secondCategoryId)\r\n          categoryIdArray.push(this.ruleForm.categoryId)\r\n          this.ruleForm.categoryId = categoryIdArray\r\n          this.getCategoryInfo()\r\n        })\r\n      }\r\n    },\r\n    getCategoryInfo() {\r\n      // 材料级联，最后一个id 才是选中的id\r\n      var computerCategoryId = this.ruleForm.categoryId[this.ruleForm.categoryId.length - 1]\r\n      getMaterialCategoryPropertyByCategoryId({ categoryId: computerCategoryId }).then(response => {\r\n        const { data } = response\r\n        // categoryId v-model 改变了，还要改变的category对象\r\n        var categoryObject = this.categoryList.find(f => f.id === computerCategoryId)\r\n        // console.log('categoryObject:', categoryObject)\r\n        this.ruleForm.category = { id: categoryObject.id,\r\n          name: categoryObject.name,\r\n          unit: categoryObject.unit,\r\n          isMain: categoryObject.isMain }\r\n        // 上次选择的数据\r\n        // this.oldrProperty.unit = this.ruleForm.unit\r\n        this.oldrProperty.unit2 = this.ruleForm.unit2\r\n        this.oldrProperty.brand = this.ruleForm.brand\r\n        this.oldrProperty.model = this.ruleForm.model\r\n        this.oldrProperty.spec = this.ruleForm.spec\r\n        this.oldrProperty.thickness = this.ruleForm.thickness\r\n        this.oldrProperty.texture = this.ruleForm.texture\r\n        this.oldrProperty.surfaceTreatment = this.ruleForm.surfaceTreatment\r\n        this.oldrProperty.designNumber = this.ruleForm.designNumber\r\n        // 清空数据\r\n        // this.ruleForm.unit = ''\r\n        this.ruleForm.unit2 = ''\r\n        this.ruleForm.brand = ''\r\n        this.ruleForm.model = ''\r\n        this.ruleForm.spec = ''\r\n        this.ruleForm.thickness = ''\r\n        this.ruleForm.texture = ''\r\n        this.ruleForm.surfaceTreatment = ''\r\n        this.ruleForm.designNumber = ''\r\n        // 遍历获得选中分类的分类属性\r\n        for (var row of data) {\r\n          var oldvalue = this.oldrProperty[row.property.materialField]\r\n          // 分类属性中的选项的名称 是否等于 上次选择的分类属性的名称\r\n          this.ruleForm[row.property.materialField] = oldvalue\r\n\r\n          if (row.mcpItem.length === 1) {\r\n            this.ruleForm[row.property.materialField] = row.mcpItem[0].name\r\n          }\r\n        }\r\n        // 绑定属性\r\n        this.categoryPropertyList = data\r\n      }).catch(() => { })\r\n    },\r\n    getCategory(query) {\r\n      const pro1 = new Promise((resolve, reject) => {\r\n        getMaterialCategoryByIsMain({ name: query, isMain: false }).then(response => {\r\n          const { data } = response\r\n          data.forEach(e => {\r\n            e.pid = e.pId\r\n            e.label = e.name\r\n            e.value = e.id\r\n            delete e.pId\r\n          })\r\n          this.categoryList = data\r\n          this.options = getTree(0, data)\r\n          resolve()\r\n        }).catch(() => { reject() })\r\n      })\r\n      return pro1\r\n    },\r\n    filterNode(data, value) {\r\n      // console.log('data:', data)\r\n      // [keyword1,keyword2] => label,number\r\n      const { label, number } = data.data\r\n      if (!value) return true\r\n      const splitValue = value.split(' ')\r\n      const arr = []\r\n      for (var item of splitValue) {\r\n        // arr.push(label.indexOf(item) !== -1)\r\n        const isLabel = label.indexOf(item) !== -1\r\n        const isNumber = number.indexOf(item) !== -1\r\n        if (isLabel || isNumber) { arr.push(true) } else arr.push(false)\r\n      }\r\n      var ok = true\r\n      arr.forEach(e => {\r\n        if (!e) ok = false\r\n      })\r\n      return ok\r\n    }\r\n\r\n  }\r\n}\r\n",null]}
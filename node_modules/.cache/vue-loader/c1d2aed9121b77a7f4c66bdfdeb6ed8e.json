{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\fpgl\\InvoiceReimburse\\details.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\fpgl\\InvoiceReimburse\\details.vue","mtime":1635749455628},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { GetInvoiceReimburseAttitudeById, GetInvoiceReimburseDetailById, PayFor, CheckInvoiceReimburse } from '@/api/cwgl/InvoiceReimburse.js'\r\nimport TableEx from '@/components/TableEx'\r\nimport FlowDisplay from '@/components/Flow/flowDisplay'\r\nimport { validate } from '@/utils/validate'\r\nimport { formatMoney } from '@/utils'\r\nimport FlowAttitude from '@/components/Flow/flowAttitude'\r\nimport Detailsedit from '@/components/Detailsedit'\r\nimport CapitalSelect from '@/components/SearchBar/form/CapitalSelect'\r\nexport default {\r\n  name: 'DepositDetails',\r\n  components: {\r\n    FlowDisplay,\r\n    FlowAttitude,\r\n    Detailsedit,\r\n    TableEx,\r\n    CapitalSelect\r\n  },\r\n  data() {\r\n    return {\r\n      type: 'InvoiceReimburseDetails', // 审核:approval 详情:details 支付:pay 变更:alteration 回收:recycle\r\n      size: 'mini',\r\n      // 过滤器\r\n      filter: {\r\n        stateOptions: []\r\n      },\r\n\r\n      /* 列表数据相关 */\r\n      invoiceTable: { // 变更列表\r\n        columns: [\r\n          {\r\n            label: '序号', // 表头\r\n            minWidth: '50', // 最小宽度\r\n            type: 'index'\r\n          },\r\n          {\r\n            label: '发票类别', // 表头\r\n            prop: 'invoiceCategoryName', // 渲染的属性\r\n            minWidth: '80' // 最小宽度\r\n          },\r\n          {\r\n            label: '发票代码',\r\n            prop: 'invoiceCode',\r\n            minWidth: '100'\r\n          },\r\n          {\r\n            label: '票号',\r\n            prop: 'invoiceNum',\r\n            minWidth: '120'\r\n          },\r\n          {\r\n            align: 'right',\r\n            label: '申请金额(含税)',\r\n            format: 'money',\r\n            prop: 'applicationAmount',\r\n            minWidth: '120'\r\n          },\r\n          {\r\n            label: '税率',\r\n            prop: 'tax',\r\n            format: (val) => `${val * 100}%`,\r\n            minWidth: '80'\r\n          },\r\n          {\r\n            align: 'right',\r\n            format: 'money',\r\n            label: '税额',\r\n            prop: 'taxAmount',\r\n            minWidth: '80'\r\n          },\r\n          {\r\n            align: 'right',\r\n            label: '金额(不含税)',\r\n            format: 'money',\r\n            prop: 'excludeTaxAmount',\r\n            minWidth: '120'\r\n          },\r\n          {\r\n            // align: 'right',\r\n            // label: '批准金额',\r\n            // format: 'money',\r\n            // prop: 'amount',\r\n            // minWidth: '120'\r\n            render: (h) => {\r\n              return (<el-table-column\r\n                class='TableExColumn'\r\n                label='批准金额'\r\n                min-width='120'\r\n                align='right'\r\n                scopedSlots={{\r\n                  default: ({ row }) => {\r\n                    const { size } = this\r\n                    if (this.state === 1) {\r\n                      return (\r\n                        <el-input\r\n                          value={row.amount}\r\n                          placeholder='请输入，流程中可编辑'\r\n                          size={size}\r\n                          onInput={(val) => {\r\n                            console.log(val)\r\n                            this.$set(row, 'amount', val.replace(/[^\\d.]/g, ''))\r\n                          }}\r\n                        />\r\n                      )\r\n                    } else {\r\n                      return formatMoney(row.amount, 2, 0)\r\n                    }\r\n                  }\r\n                }}\r\n              />)\r\n            }\r\n          },\r\n          {\r\n            label: '备注',\r\n            prop: 'remark',\r\n            minWidth: '120'\r\n          }\r\n        ],\r\n        list: [],\r\n        loading: false\r\n      },\r\n      payForm: { // 支付表单\r\n        id: 0,\r\n        bank: '',\r\n        account: '',\r\n        imprestAmount: '',\r\n        balance: '',\r\n        capitalType: '1'\r\n      },\r\n      payRules: {\r\n        text: [{ required: true, message: '请输入内容', trigger: 'change' }],\r\n        amount: [\r\n          { required: true, message: '请输入金额', trigger: 'change' },\r\n          { validator: validate.money, message: '金额格式不正确', trigger: 'change' },\r\n          { validator: validate.max_amount, message: '超过所能存储的最大金额', trigger: 'change' }\r\n        ]\r\n      },\r\n\r\n      saveLoading: false,\r\n      payLoading: false,\r\n      myDetails: null, // 详情数据\r\n      billFlowData: null, // 流程信息\r\n      attitudePara: null // 审批信息\r\n    }\r\n  },\r\n  computed: {\r\n    state() {\r\n      return this.myDetails?.data?.state\r\n    },\r\n    /**\r\n     * 详情各字段计算\r\n     */\r\n    infoList() {\r\n      const {\r\n        myDetails: {\r\n\r\n          data: {\r\n            orgStr,\r\n            costPlanNumber,\r\n            reimburseTypeName,\r\n            account,\r\n            // NCAccountSetName,\r\n            accountName,\r\n            capitalType,\r\n            balance,\r\n            bank,\r\n            imprestAmount,\r\n            number,\r\n            invoiceType,\r\n            invoiceDate,\r\n            invoiceCategory,\r\n            entertainmentPlanNumber,\r\n            entertainmentPlanId,\r\n\r\n            summary,\r\n            costPlanId,\r\n            personName,\r\n            IsBussinessFee,\r\n            personNumber,\r\n            applicationAmount,\r\n            payoutUserName,\r\n            payoutDate,\r\n            remark,\r\n            upFile,\r\n            invoiceUpFile,\r\n            createUserName,\r\n            createDate,\r\n            lastEditUserName,\r\n            lastEditDate,\r\n\r\n            submitUserName,\r\n            submitDate,\r\n            state\r\n          }\r\n\r\n        }\r\n      } = this\r\n\r\n      // 数据格式化\r\n      const m = (val) => this.utils.formatMoney(val, 2, 4)\r\n      const d = (dataStr) => dataStr ? this.$moment(dataStr).format('YYYY-MM-DD') : dataStr\r\n      // const a = this.utils.amountInWords\r\n\r\n      // 制单部分信息\r\n      const info = [\r\n        { label: '开户行', value: bank },\r\n        { label: '账户', value: account },\r\n        { label: '冲备用金金额', value: imprestAmount },\r\n        { label: '支付方式', value: capitalType },\r\n        { label: '付款金额', value: balance, monopolize: true },\r\n        { label: '制单人', value: createUserName },\r\n        { label: '制单时间', value: createDate },\r\n        { label: '提交人', value: submitUserName },\r\n        { label: '提交时间', value: submitDate },\r\n        { label: '支付人', value: payoutUserName },\r\n        { label: '支付时间', value: payoutDate },\r\n        { label: '更新人', value: lastEditUserName },\r\n        { label: '更新时间', value: lastEditDate },\r\n        { label: '状态', value: this.filter.stateOptions.find(item => item.value === state).name }\r\n      ]\r\n\r\n      return [\r\n        { label: '报销类型', value: reimburseTypeName },\r\n        { label: '编号', value: number },\r\n        { label: '部门', value: orgStr },\r\n        // { label: '账套', value: NCAccountSetName },\r\n        { label: '账套', value: accountName },\r\n        { label: '发票类型', value: invoiceType },\r\n        { label: '发票日期', value: d(invoiceDate) },\r\n        { label: '发票类别', value: invoiceCategory },\r\n        { label: '费用计划号',\r\n          value: costPlanNumber || entertainmentPlanNumber,\r\n          class: 'link',\r\n          click: () => this.toCostPlanDetails(\r\n            costPlanId || entertainmentPlanId,\r\n            costPlanId ? 'costPlan' : 'entertainmentPlan')\r\n        },\r\n        { label: '工号', value: personNumber },\r\n        { label: '姓名', value: personName },\r\n        { label: '项目营销费用', value: IsBussinessFee ? '是' : '否' },\r\n        { label: '金额', value: m(applicationAmount) },\r\n        { label: '事由', value: summary },\r\n        { label: '备注', value: remark },\r\n        { label: '发票附件', value: invoiceUpFile || [], component: 'UpFile' },\r\n        { label: '其他附件', value: upFile || [], component: 'UpFile' },\r\n\r\n        // { label: '金额大写', value: a(applicationAmount) },\r\n        // { label: '批准金额', value: m(amount) },\r\n        // { label: '金额大写', value: a(amount) },\r\n        // { label: '客商', value: bussinessMan },\r\n\r\n        ...((state === 10000) || (this.type === 'recycle') ? info : [])\r\n      ]\r\n    },\r\n    amount() {\r\n      let count = 0\r\n      this.invoiceTable.list.forEach(item => {\r\n        count += Number(item.amount) || 0\r\n      })\r\n      return count\r\n    }\r\n  },\r\n  beforeRouteEnter(to, from, next) {\r\n    next(vm => {\r\n      vm.initData()\r\n    })\r\n  },\r\n  methods: {\r\n    toCostPlanDetails(id, type) {\r\n      this.$router.push({\r\n        name: type === 'costPlan' ? 'CostPlanDetails' : 'EntertainmentPlanDetails',\r\n        query: { type: '', id, refreshRouterName: this.$route.name }\r\n      })\r\n    },\r\n    // 作废\r\n    saveFlow() {\r\n      this.$confirm('是否确定保存？', '提示', {\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const attitude = this.$refs.flowAttitude.getPostData()\r\n\r\n        if (attitude.attitudeType === 1 || attitude.attitudeType === 2) {\r\n          let errCount = 0\r\n          this.invoiceTable.list.forEach(({ amount }) => {\r\n            if (/[^\\d.]/g.test(amount) && amount !== 0) errCount++\r\n          })\r\n          if (errCount) {\r\n            return this.$message.error('请填写批准金额')\r\n          }\r\n          if (Number(this.amount) > this.myDetails.data.applicationAmount) {\r\n            return this.$message.error('批准金额不能大于申请金额')\r\n          }\r\n        }\r\n\r\n        this.saveLoading = true\r\n        const postData = {\r\n          attitude,\r\n          id: this.myDetails.data.id,\r\n          amount: this.amount,\r\n          invoiceReimburseDetails: this.invoiceTable.list\r\n        }\r\n        CheckInvoiceReimburse(postData).then(res => {\r\n          if (res.code === 200) {\r\n            this.$message.success(res.message)\r\n            this.goBack() // 跳转\r\n          } else {\r\n            this.$message.error(res.message)\r\n          }\r\n        }).finally(() => {\r\n          this.saveLoading = false\r\n        })\r\n      })\r\n    },\r\n    wantToPay2() {\r\n      if (this.payForm.balance > this.myDetails.data.amount) {\r\n        return this.$message.error('付款金额不能大于批准金额')\r\n      }\r\n      const { imprestAmount, balance } = this.payForm\r\n      if (this.myDetails.data.amount !== (Number(imprestAmount) + Number(balance))) {\r\n        return this.$message.error('冲备用金金额、付款金额之和必须与批准金额一致')\r\n      }\r\n      this.$refs['payForm'].validate((valid) => {\r\n        if (valid) {\r\n          this.$confirm('确定要支付吗?', '提示', {\r\n            type: 'warning'\r\n          }).then(() => {\r\n            this.payLoading = true\r\n            const { data: { id }} = this.myDetails\r\n            const attitudeData = this.$refs.flowAttitude.getPostData()\r\n            PayFor({ ...this.payForm, attitude: attitudeData, id }).then(res => {\r\n              if (res.code === 200) {\r\n                this.$message.success(res.message)\r\n                this.goBack() // 跳转\r\n              } else {\r\n                this.$message.error(res.message)\r\n              }\r\n            }).finally(() => {\r\n              this.payLoading = false\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * @description: 初始化数据\r\n     */\r\n    initData() {\r\n      const { id, type } = this.$route.query\r\n      this.type = type\r\n      this.myId = id\r\n      this.fetchData()\r\n    },\r\n    /**\r\n     * 提交审批意见以后的回调函数\r\n     */\r\n    updateFlow() {\r\n      // 直接返回\r\n      this.goBack()\r\n    },\r\n    /**\r\n     * 获取详情信息\r\n     */\r\n    async fetchData() {\r\n      if (!this.myId) return\r\n      GetInvoiceReimburseDetailById({ id: this.myId }).then(res => {\r\n        this.billFlowData = res.billFlowData\r\n        this.invoiceTable.list = res.data.invoiceReimburseDetails\r\n        this.filter.stateOptions = res.billFlowData?.form?.formState || []\r\n        this.myDetails = res\r\n\r\n        this.attitudePara = { formId: res.billFlowData.formId, billFlowId: res.billFlowData.id, planId: res.data.id }\r\n        this.$nextTick(() => {\r\n          this.$refs['flowAttitude'].ruleForm.content = res.data.state === 1000 ? '已支付' : ''\r\n        })\r\n      })\r\n      GetInvoiceReimburseAttitudeById({ id: this.myId }).then(res => {\r\n        this.payForm = {\r\n          ...this.payForm,\r\n          account: res.data.account,\r\n          bank: res.data.bank,\r\n          capitalType: res.capitalType || this.payForm.capitalType,\r\n          imprestAmount: res.data.imprestAmount,\r\n          balance: res.data.balance\r\n\r\n        }\r\n      }).catch(e => {\r\n        console.log('fetchData:请求列表数据失败，错误信息：', e)\r\n      })\r\n    },\r\n    goBack() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\price\\priceListAttitude.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cggl\\price\\priceListAttitude.vue","mtime":1624494301507},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getPriceAttitudeById, getBillFlow, priceListAttitude, putPriceListState } from '@/api/cggl/priceList'\r\nimport { getDictionarysByTypes } from '@/api/xtgl/dictionary'\r\nimport { getSupplierInfo } from '@/api/cggl/supplier'\r\nimport OrgSelect2 from '@/components/OrgSelect/index2'\r\nimport FlowAttitude from '@/components/Flow/flowAttitude'\r\nimport FlowSelect from '@/components/Flow/flowSelect'\r\nimport FlowDisplay from '@/components/Flow/flowDisplay'\r\nexport default {\r\n  name: 'PriceListAttitude',\r\n  components: {\r\n    OrgSelect2,\r\n    FlowAttitude,\r\n    FlowSelect,\r\n    FlowDisplay\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        orgId: null\r\n      },\r\n      loading: false,\r\n      showbuttons: false,\r\n      activate: false,\r\n      dialogTableVisible: false,\r\n      dialogTitle: '保存',\r\n      dialogWidth: '70%',\r\n      currentRow: null,\r\n      list: [],\r\n      list2: [],\r\n      // 发票种类\r\n      receiptTypes: [],\r\n      // 卸车费归属\r\n      otherPricePays: [],\r\n      fileList: [],\r\n      // 供应商\r\n      suppliers: [],\r\n      planTypeList: null,\r\n      columnShow: { unit2: true,\r\n        brand: true,\r\n        model: true,\r\n        spec: true,\r\n        thickness: true,\r\n        texture: true,\r\n        surfaceTreatment: true,\r\n        designNumber: true\r\n      },\r\n      // 流程\r\n      loadFlow: false,\r\n      billFlow: null,\r\n      attitudePara: null,\r\n      active: 0,\r\n      rules: {\r\n        // orgId: [{ required: true, message: '请选择', trigger: 'change' }],\r\n        supplierId: [{ required: true, message: '请选择', trigger: 'blur' }]\r\n      },\r\n      isLoad: false\r\n    }\r\n  },\r\n  computed: {\r\n    getOrgList() {\r\n      return this.$store.state.user.info.orgList\r\n    }\r\n  },\r\n  watch: {\r\n  },\r\n  activated() {\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    async initData() {\r\n      // 供应商  name id\r\n      getSupplierInfo().then((response) => {\r\n        this.suppliers = response.data\r\n      })\r\n      getPriceAttitudeById({ id: this.$route.query.id }).then((response) => {\r\n        this.setData(response)\r\n      })\r\n      this.setColumnShow()\r\n      getDictionarysByTypes({ types: 'receiptTypes,otherPricePays' }).then((response) => {\r\n        const { data } = response\r\n        data.forEach(element => {\r\n          element.pid = element.pId\r\n          if (element.type === 'receiptTypes') {\r\n            this.receiptTypes.push(element)\r\n          }\r\n          if (element.type === 'otherPricePays') {\r\n            this.otherPricePays.push(element)\r\n          }\r\n        })\r\n        this.keyreceiptType += 1\r\n        this.keyotherPricePay += 1\r\n      })\r\n    },\r\n    setData(response) {\r\n      const { data, billFlowData } = response\r\n      // 检查当前 状态 是否有特殊操作，有就跳转\r\n      var filterOption = billFlowData.billFlowNode.filter(f => f.isCurrentState)\r\n      if ((filterOption || []).length) {\r\n        if (filterOption[0].option > 0) {\r\n          // alert('当前节点有特殊操作')\r\n        }\r\n      }\r\n      // 列表\r\n      var pom = []\r\n      data.details.forEach(e => {\r\n        pom.push({\r\n          id: e.id,\r\n          categoryId: e.material.categoryId,\r\n          category: { id: e.material.categoryId, name: e.material.materialCategory.name },\r\n          materialId: e.materialId,\r\n          unit: e.material.unit,\r\n          unit2: e.material.unit2,\r\n          brand: e.material.brand,\r\n          model: e.material.model,\r\n          spec: e.material.spec,\r\n          thickness: e.material.thickness,\r\n          texture: e.material.texture,\r\n          surfaceTreatment: e.material.surfaceTreatment,\r\n          designNumber: e.material.designNumber,\r\n          applicationQuantity: e.applicationQuantity,\r\n          applicationQuantity2: e.applicationQuantity2,\r\n          quantity: e.quantity,\r\n          quantity2: e.quantity2,\r\n          entryDate: e.entryDate,\r\n          remark: e.remark\r\n        })\r\n      })\r\n      // 填充参数\r\n      this.ruleForm = data\r\n      // 填充 明细列表\r\n      this.list = pom\r\n      this.list2 = data.suppliers\r\n      this.setColumnShow()\r\n      this.loading = false // loading 状态关闭\r\n      this.showbuttons = true // 初始化完成，显示上面的按钮\r\n      this.activate = true // 加载部门组件\r\n      if (data.query.state > 0) {\r\n        this.active = 3 // 审批\r\n        this.isLoad = true\r\n      }\r\n      this.billFlow = billFlowData\r\n      this.attitudePara = { formId: billFlowData.formId, billFlowId: data.query.billFlowId, planId: data.query.id }\r\n    },\r\n    setColumnShow() { // 设置列的显示。列中，都没有值，就隐藏\r\n      var modelunit2 = false\r\n      var modelbrand = false\r\n      var modelmodel = false\r\n      var modelspec = false\r\n      var modelthickness = false\r\n      var modeltexture = false\r\n      var modelsurfaceTreatment = false\r\n      var modeldesignNumber = false\r\n      for (var row of this.list) {\r\n        if (row.unit2) { modelunit2 = true }\r\n        if (row.brand) { modelbrand = true }\r\n        if (row.model) { modelmodel = true }\r\n        if (row.spec) { modelspec = true }\r\n        if (row.thickness) { modelthickness = true }\r\n        if (row.texture) { modeltexture = true }\r\n        if (row.surfaceTreatment) { modelsurfaceTreatment = true }\r\n        if (row.designNumber) { modeldesignNumber = true }\r\n      }\r\n      this.columnShow['unit2'] = modelunit2\r\n      this.columnShow['brand'] = modelbrand\r\n      this.columnShow['model'] = modelmodel\r\n      this.columnShow['spec'] = modelspec\r\n      this.columnShow['thickness'] = modelthickness\r\n      this.columnShow['texture'] = modeltexture\r\n      this.columnShow['surfaceTreatment'] = modelsurfaceTreatment\r\n      this.columnShow['designNumber'] = modeldesignNumber\r\n    },\r\n    getPrice(detail, materialId) {\r\n      const pri = detail.find(f => f.materialId === materialId)\r\n      return pri.price\r\n    },\r\n    getAmount(detail, materialId) {\r\n      const pri = detail.find(f => f.materialId === materialId)\r\n      return pri.amount\r\n    },\r\n    getSummaries(param) {\r\n      const { columns } = param\r\n      const sums = []\r\n      columns.forEach((index) => {\r\n        if (index === 0) {\r\n          sums[index] = '合计'\r\n          return\r\n        }\r\n        var i = 4\r\n        this.ruleForm.suppliers.forEach(e => {\r\n          i = i + 2\r\n          var sumAmount = 0\r\n          e.priceSupplierDetails.forEach(p => {\r\n            sumAmount += p.amount\r\n          })\r\n          if (index === i) {\r\n            sums[index] = sumAmount\r\n          }\r\n        })\r\n        // const values = data.map(item => Number(item[column.property]));\r\n        // if (!values.every(value => isNaN(value))) {\r\n        //   sums[index] = values.reduce((prev, curr) => {\r\n        //     const value = Number(curr)\r\n        //     if (!isNaN(value)) {\r\n        //       return prev + curr\r\n        //     } else {\r\n        //       return prev\r\n        //     }\r\n        //   }, 0)\r\n        //   sums[index] += ' 元'\r\n        // } else {\r\n        //   sums[index] = 'N/A'\r\n        // }\r\n      })\r\n      return sums\r\n    },\r\n    getValue(values, name) {\r\n      const pri = values.find(f => f.name === name)\r\n      return pri.value\r\n    },\r\n    getreceiptType(id) {\r\n      const type = this.receiptTypes.find(f => f.id === id)\r\n      if (type) {\r\n        return type.name\r\n      } else {\r\n        return ''\r\n      }\r\n    },\r\n    getotherPricePay(id) {\r\n      const type = this.otherPricePays.find(f => f.id === id)\r\n      if (type) {\r\n        return type.name\r\n      } else {\r\n        return ''\r\n      }\r\n    },\r\n    // 根据表单获取流程\r\n    getDynamicFlow() {\r\n      this.$refs['ruleForm'].validate(valid => {\r\n        if (valid) {\r\n          this.loading = true\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          var postData = {\r\n            id: newObj.query.id,\r\n            supplierIds: newObj.supplierId.join(','),\r\n            orgId: newObj.query.orgId\r\n          }\r\n          getBillFlow(postData).then(response => {\r\n            this.loading = false\r\n            if (response.success) {\r\n              this.billFlow = response.data.billFlow\r\n              this.active = 1\r\n            } else {\r\n              this.$message(response.message)\r\n            }\r\n          }).catch(() => { this.loading = false })\r\n        }\r\n      })\r\n    },\r\n    submitForm(state) {\r\n      this.$refs['ruleForm'].validate(valid => {\r\n        if (valid) {\r\n          this.loading = true\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          var postData = {\r\n            id: newObj.query.id,\r\n            supplierIds: newObj.supplierId.join(','),\r\n            state: state\r\n          }\r\n          const billFlow = this.$refs.flowSelect.getBillFlow()\r\n          console.log('获取的billFlow:', billFlow)\r\n          postData.billFlow = billFlow\r\n\r\n          priceListAttitude(postData).then(response => {\r\n            if (response.errorMsg) {\r\n              // 验证错误\r\n              this.$alert(`${response.errorMsg.replace(/；/g, '；<br />')}`,\r\n                { dangerouslyUseHTMLString: true })\r\n            } else {\r\n              this.$message(response.message)\r\n              this.loading = false\r\n              this.closeThePage()\r\n            }\r\n          }).catch(() => { this.loading = false })\r\n        }\r\n      })\r\n    },\r\n    closeThePage() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    },\r\n    updateFlow(data) {\r\n      // 修改计划单据state状态\r\n      this.loading = true\r\n      this.billFlow = null\r\n      putPriceListState({ id: data.billId, state: data.state }).then(response => {\r\n        this.loading = false\r\n        // 重新加载 流程\r\n        // this.billFlow = data\r\n        this.closeThePage()\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Acceptance\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Acceptance\\index.vue","mtime":1635216068774},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport TableEx from '@/components/TableEx'\r\nimport { GetAcceptDetailPaging } from '@/api/cwgl/zjgl/Acceptance.js'\r\nimport SearchBar from '@/components/SearchBar'\r\n// import searchData from './searchData'\r\nexport default {\r\n  name: 'ChengDuiXinXiIndex',\r\n  components: {\r\n    SearchBar,\r\n    TableEx\r\n  },\r\n  data() {\r\n    return {\r\n      size: 'mini', // 整体大小 medium / small / mini\r\n      searchData: require('./searchData').default(), // 渲染搜索栏数据\r\n      lastSearch: null, // 最近一次搜索的数据\r\n      /* 列表数据相关 */\r\n      table: {\r\n        columns: [\r\n          {\r\n            label: '票号', // 表头\r\n            prop: 'ticketNumber', // 渲染的属性\r\n            class: 'link', // class\r\n            width: '130', // 宽度\r\n            click: (row) => this.handleDetails(row)\r\n          },\r\n          {\r\n            label: '收款部门',\r\n            prop: 'orgName',\r\n            width: '130'\r\n          },\r\n          {\r\n            label: '类型',\r\n            prop: 'capitalType',\r\n            width: '100'\r\n          },\r\n          {\r\n            label: '开票日期',\r\n            prop: 'ticketDate',\r\n            format: 'date',\r\n            width: '100'\r\n          },\r\n          {\r\n            label: '到期日期',\r\n            prop: 'expiration',\r\n            format: 'date',\r\n            width: '100'\r\n          },\r\n          {\r\n            label: '付款人',\r\n            prop: 'payer',\r\n            width: '100'\r\n          },\r\n          {\r\n            label: '收款银行',\r\n            prop: 'bank',\r\n            width: '100'\r\n          },\r\n          {\r\n            label: '金额',\r\n            align: 'right',\r\n            prop: 'amount',\r\n            format: 'money',\r\n            width: '100'\r\n          },\r\n          {\r\n            label: '备注',\r\n            prop: 'remark',\r\n            minWidth: '150'\r\n          },\r\n          {\r\n            label: '状态',\r\n            prop: 'stateName',\r\n            minWidth: '100',\r\n            formatExport: (val) => val, // 表格导出使用的格式化方式默认使用format。\r\n            format: (val, format, row, column) => {\r\n              return (`\r\n                <div class=\"state\">\r\n                  <div class=\"circle ${row.state === 1 ? 'success' : ''}\" ></div>\r\n                  ${val}\r\n                </div>\r\n              `)\r\n            }\r\n          }\r\n        ],\r\n        list: [],\r\n        exLoading: false, // 导出loading\r\n        tbLoading: false, // table loading\r\n        total: 0,\r\n        currentPage: 1,\r\n        pageSize: this.utils.getPersonalSettings().pageSize\r\n      }\r\n    }\r\n  },\r\n  beforeRouteEnter(to, from, next) {\r\n    next(vm => {\r\n      vm.fetchData()\r\n    })\r\n  },\r\n  methods: {\r\n    /**\r\n     * @description: 权限判断\r\n     */\r\n    promise(expiration, state, row) {\r\n      // 本地时间>到期时间 并且 state是未支付状态\r\n      if (new Date() > new Date(expiration) && state === 0) {\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n    parseServeDate(res) {\r\n      const { data, count, stateOptions, capitalTypeOptions } = res\r\n      // 搜索栏数据初始化\r\n      stateOptions.forEach(ele => { ele.label = ele.name }) // 资金形式选项数据转换\r\n      capitalTypeOptions.forEach(ele => { ele.label = ele.name }) // 收款类型选项数据转换\r\n      this.searchData = this.searchData.map((item) => {\r\n        item.options = item.name === 'states' ? stateOptions : item.options\r\n        item.options = item.name === 'capitalTypes' ? capitalTypeOptions : item.options\r\n        return item\r\n      })\r\n\r\n      // 列表数据初始化\r\n      this.table.list = data\r\n      this.table.total = count\r\n    },\r\n    /**\r\n     * @description: 获取列表数据、搜索数据\r\n     * @return {*}\r\n     */\r\n    getTable(currentPage = this.table.currentPage, pageSize = this.table.pageSize) {\r\n      const postData = this.getSearchData()\r\n      console.log(postData)\r\n      postData.currentPage = currentPage\r\n      postData.pageSize = pageSize\r\n      console.log('fetchData:请求数据', postData)\r\n      return GetAcceptDetailPaging(postData)\r\n    },\r\n    fetchData(type) { // SearchBar 事件类型 重置:reset  搜索:search\r\n      switch (type) {\r\n        case 'filter':\r\n          this.table.currentPage = 1\r\n          break\r\n        case 'reset':\r\n        case 'search':\r\n          this.table.currentPage = 1\r\n          this.lastSearch = null\r\n          break\r\n      }\r\n      this.table.tbLoading = true\r\n      this.getTable()\r\n        .then(res => this.parseServeDate(res))\r\n        .finally(() => {\r\n          this.table.tbLoading = false\r\n        })\r\n    },\r\n    /**\r\n     * @description: 搜索栏数据转换\r\n     * @return {Object} request数据\r\n     */\r\n    getSearchData() {\r\n      if (this.lastSearch === null) {\r\n        this.lastSearch = {}\r\n        this.searchData.forEach(item => {\r\n          const { value, transformType, name } = item\r\n          if (transformType === 'property-serial') {\r\n            value.forEach((ele, index) => {\r\n              const serial = index + 1\r\n              this.lastSearch[name + serial] = ele\r\n            })\r\n          } else {\r\n            this.lastSearch[name] = value\r\n          }\r\n        })\r\n      }\r\n      return this.lastSearch\r\n    },\r\n    /**\r\n     * @description:表格导出功能\r\n     */\r\n    async exportExcel() {\r\n      const Excel = this.$refs['TableEx'].initExcel()\r\n      this.getTable(1, this.table.total).then(({ data }) => {\r\n        Excel.format([{ ...Excel.sheet[0], table: data }]).export()\r\n      }).catch(() => {\r\n        this.$message.error('导出失败')\r\n        Excel.cancel()\r\n      })\r\n    },\r\n    /**\r\n     * @description: 路由到详情页\r\n     * @param {*} row\r\n     */\r\n    handleDetails(row, type) {\r\n      this.$router.push({ name: 'ChengDuiXinXiDetails', query: { id: row.id, type, refreshRouterName: this.$route.name }})\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\OrgSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\OrgSelect.vue","mtime":1631261807254},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/**\r\n * 基于@components/OrgSelect/index2.vue的修改\r\n * 由于原组件双向绑定方式的问题，导致在其父组件修改prop时不能更新到组件内，故在这里再做修改\r\n */\r\nimport { getCurrentUserOrg } from '@/api/xtgl/role'\r\nimport { toTree, getTree, findPNode } from '@/utils/index'\r\n\r\nexport default {\r\n  name: 'TreeselectComponent',\r\n  components: {\r\n  },\r\n  model: {\r\n    prop: 'selectValue', // 指向props的参数名\r\n    event: 'change'// 事件名称\r\n  },\r\n  props: {\r\n    selectValue: { type: [String, Number, Array], default: null }, // 获取你选中的值，传出去的v-model的值\r\n    // 组件参数\r\n    disabled: { type: Boolean, default: false },\r\n    clearable: { type: Boolean, default: true },\r\n    collapseTags: { type: Boolean, default: false }, // 已选中的选项的Tag，是否折叠显示\r\n    multiple: { type: Boolean, default: false },\r\n    checkStrictly: { type: Boolean, default: false }, // 是否严格的遵守父子节点不互相关联\r\n    expandTrigger: { type: String, default: 'click' }, // click / hover\r\n    propsValue: { type: String, default: 'id' }, // 绑定的字段值\r\n    propsLabel: { type: String, default: 'name' }, // 绑定的文本\r\n    size: { type: String, default: 'mini' }, // 可选值：medium / small / mini\r\n    filterable: { type: Boolean, default: false }, // 搜索功能\r\n    placeholder: { type: String, default: '请选择' }, // 输入框占位文本\r\n    separator: { type: String, default: '/' }, // 选项分隔符\r\n    showAllLevels: { type: Boolean, default: true }, // 输入框中是否显示选中值的完整路径\r\n    options: { type: Array, default: null }, // 可选项数据源，键名可通过 Props 属性配置\r\n    selectStyle: { type: String, default: '' }, // 样式\r\n    // showRootNode: { type: Boolean, default: false }, // 是否显示根节点\r\n    dataMode: { type: Number, default: 0 } // 数据默认显示方式 0：全部显示，1：根据自己的权限显示\r\n  },\r\n  data() {\r\n    return {\r\n      test: [],\r\n      list: [],\r\n      props: {\r\n        expandTrigge: 'click', // 触发方式 click hover\r\n        multiple: false, // 是否多选\r\n        checkStrictly: false, // 是否严格的遵守父子节点不互相关联\r\n        emitPath: true, // 在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置false，则只返回该节点的值\r\n        lazy: false, //\t是否动态加载子节点，需与 lazyLoad 方法结合使用\r\n        lazyLoad: (node, resolve) => { resolve }, // 加载动态数据的方法，仅在 lazy 为 true 时有效 ---- function(node, resolve)，node为当前点击的节点，resolve为数据加载完成的回调(必须调用)\r\n        value: 'id', // 指定选项标签为选项对象的某个属性值\r\n        label: 'name', // 指定选项标签为选项对象的某个属性值\r\n        children: 'children', // 指定选项的子选项为选项对象的某个属性值\r\n        disabled: 'disabled', // 指定选项标签为选项对象的某个属性值\r\n        leaf: 'leaf' // 指定选项的叶子节点的标志位为选项对象的某个属性值\r\n      },\r\n      orgList: [],\r\n      rootNode: [{ id: 0, pid: 0, name: '根节点', value: 0 }] // 根节点\r\n    }\r\n  },\r\n  computed: {\r\n    modelValue: {\r\n      get() {\r\n        // console.log(this.filterParentNodes(this.selectValue))\r\n        return this.filterParentNodes(this.selectValue)\r\n      },\r\n      set(val) {\r\n        const value = val || []\r\n        if (this.multiple) {\r\n          // 多选\r\n          this.$emit('change', value.map(m => { return m[m.length - 1] }))\r\n        } else {\r\n          // 单选\r\n          this.$emit('change', value[value.length - 1])\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.props.multiple = this.multiple\r\n    this.props.checkStrictly = this.checkStrictly\r\n    this.props.expandTrigger = this.expandTrigger\r\n    this.props.value = this.propsValue\r\n    this.props.label = this.propsLabel\r\n  },\r\n  mounted() {\r\n    if (this.options) {\r\n      this.orgList = this.options\r\n      this.list = getTree(0, [...this.orgList])\r\n    } else {\r\n      this.fetchData()\r\n    }\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      getCurrentUserOrg().then(response => {\r\n        const { data, currentOrgList } = response\r\n        this.orgList = currentOrgList // 当前公司的所有组织机构list\r\n        if (!data) return\r\n        if (this.dataMode === 0) {\r\n          const newList = currentOrgList.map(v => {\r\n            return {\r\n              ...v,\r\n              disabled: !v.optional\r\n            }\r\n          })\r\n          this.list = toTree(newList)\r\n        } else if (this.dataMode === 1) {\r\n          var org = this.processData([...data], currentOrgList)\r\n          this.list = toTree(org)\r\n        }\r\n      })\r\n    },\r\n    // 根据 arr 找到每项所有对应的所有父节点的数组 =>匹配组件数据格式 如：arr=[19] 返回 [[2, 3, 8, 19]]\r\n    filterParentNodes(arr) {\r\n      if (!this.multiple) { arr = [arr] }\r\n      var result = []\r\n      arr.forEach(e => {\r\n        const idArr = findPNode(this.orgList, e).map(m => { return m.id }).reverse()\r\n        if (this.multiple) {\r\n          if (idArr.length > 0) { result.push(idArr) }\r\n        } else { result = idArr }\r\n      })\r\n      return result\r\n    },\r\n    // toTree(data) {\r\n    //   const result = []\r\n    //   if (!Array.isArray(data)) {\r\n    //     return result\r\n    //   }\r\n    //   data.forEach(item => {\r\n    //     delete item.children\r\n    //   })\r\n    //   const map = {}\r\n    //   data.forEach(item => {\r\n    //     map[item.id] = item\r\n    //   })\r\n    //   data.forEach(item => {\r\n    //     const parent = map[item.pid]\r\n    //     if (parent) {\r\n    //       (parent.children || (parent.children = [])).push(item)\r\n    //     } else {\r\n    //       result.push(item)\r\n    //     }\r\n    //   })\r\n    //   return result\r\n    // },\r\n    getChildrenNodes(data, arr) {\r\n      if (data.children) {\r\n        data.children.forEach(element => {\r\n          arr.push(element.id)\r\n          if (element.children) {\r\n            this.getChildrenNodes(element, arr)\r\n          }\r\n        })\r\n      }\r\n      return arr\r\n    },\r\n    processData(userOrgList, currentOrgList) {\r\n      currentOrgList.forEach(e => {\r\n        e.disabled = !userOrgList.find(f => f.id === e.id && e.optional)\r\n      })\r\n      return currentOrgList\r\n    }\r\n  }\r\n}\r\n",null]}
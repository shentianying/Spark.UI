{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowCenter\\formAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowCenter\\formAdd.vue","mtime":1629417814024},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { putForm, addForm } from '@/api/xtgl/form'\r\nimport { getClassInfo } from '@/api/index'\r\nimport FormFlowFieldAdd from './formFlowFieldAdd'\r\nimport FormStateAdd from './formStateAdd'\r\nimport FormStateOptionAdd from './formStateOptionAdd'\r\nimport OrgSelect2 from '@/components/OrgSelect/index2'\r\nimport { GetAllList } from '@/api/xtgl/page'\r\nexport default {\r\n  name: 'AddPost',\r\n  components: {\r\n    FormFlowFieldAdd,\r\n    OrgSelect2,\r\n    FormStateOptionAdd,\r\n    FormStateAdd\r\n  },\r\n  props: {\r\n    obj: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        name: '',\r\n        value: '',\r\n        needCheckup: true,\r\n        inUse: true,\r\n        pageId: 0,\r\n        formFlowField: [],\r\n        formState: []\r\n      },\r\n      dialogTableVisible: false,\r\n      dialogTitle: '保存',\r\n      comName: '',\r\n      currentRow: null,\r\n      listLoading: false,\r\n      buttonLoading: false,\r\n      treeList: null,\r\n      editRowIndex: 0,\r\n      rowOptionIndex: 0,\r\n      // selectTable: '',\r\n      property: null,\r\n      rules: {\r\n        name: [{ required: true, message: '请输入', trigger: 'blur' }],\r\n        value: [{ required: true, message: '请输入', trigger: 'blur' }]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    getFormValue() {\r\n      return this.formValue1 + '.' + this.formValue2\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          this.buttonLoading = true\r\n          if (this.obj) {\r\n            putForm(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          } else {\r\n            addForm(newObj).then(response => {\r\n              this.$message(response.message)\r\n              this.buttonLoading = false\r\n              this.$emit('dialogClose')\r\n            }).catch(() => { this.buttonLoading = false })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 表单字段\r\n    addFormFlowField() {\r\n      this.comName = 'FormFlowFieldAdd'\r\n      this.currentRow = null\r\n      this.dialogTableVisible = true\r\n    },\r\n    editFormFlowField(scope) {\r\n      this.comName = 'FormFlowFieldAdd'\r\n      this.currentRow = scope.row\r\n      this.editRowIndex = scope.$index\r\n      this.dialogTableVisible = true\r\n    },\r\n    delFormFlowField(scope) {\r\n      this.ruleForm.formFlowField.splice(scope.$index, 1)\r\n    },\r\n    dialogCloseFormFlowField(data, state) {\r\n      if (state === 'add') {\r\n        this.ruleForm.formFlowField.push(data)\r\n      } else if (state === 'update') {\r\n        this.ruleForm.formFlowField.splice(this.editRowIndex, 1, data)\r\n      }\r\n      this.dialogTableVisible = false\r\n    },\r\n    // 表单状态\r\n    addFormState() {\r\n      this.comName = 'FormStateAdd'\r\n      this.currentRow = null\r\n      this.dialogTableVisible = true\r\n    },\r\n    editFormState(scope) {\r\n      this.comName = 'FormStateAdd'\r\n      this.currentRow = scope.row\r\n      this.editRowIndex = scope.$index\r\n      this.dialogTableVisible = true\r\n    },\r\n    delFormState(scope) {\r\n      this.ruleForm.formState.splice(scope.$index, 1)\r\n    },\r\n    dialogCloseFormState(data, state) {\r\n      if (state === 'add') {\r\n        this.ruleForm.formState.push(data)\r\n      } else if (state === 'update') {\r\n        this.ruleForm.formState.splice(this.editRowIndex, 1, data)\r\n      }\r\n      this.dialogTableVisible = false\r\n    },\r\n    addFormStateOption(itemIndex) {\r\n      this.comName = 'FormStateOptionAdd'\r\n      this.currentRow = null\r\n      this.editRowIndex = itemIndex\r\n      this.dialogTableVisible = true\r\n    },\r\n    editFormStateOption(itemIndex, item, optionIndex) {\r\n      this.comName = 'FormStateOptionAdd'\r\n      this.currentRow = item\r\n      this.editRowIndex = itemIndex\r\n      this.rowOptionIndex = optionIndex\r\n      this.dialogTableVisible = true\r\n    },\r\n    delFormStateOption(items, index) {\r\n      items.splice(index, 1)\r\n      // this.ruleForm.formState[this.editRowIndex].formStateOption.splice(index, 1)\r\n    },\r\n    dialogCloseFormStateOption(data, state) {\r\n      if (state === 'add') {\r\n        this.ruleForm.formState[this.editRowIndex].formStateOption.push(data)\r\n      } else if (state === 'update') {\r\n        this.ruleForm.formState[this.editRowIndex].formStateOption.splice(this.rowOptionIndex, 1, data)\r\n      }\r\n      this.dialogTableVisible = false\r\n    },\r\n    initData() {\r\n      this.listLoading = true\r\n      GetAllList().then(response => {\r\n        this.treeList = response.data\r\n        this.listLoading = false\r\n      }).catch(() => { this.listLoading = false })\r\n      if (this.obj) {\r\n        var newObj = JSON.parse(JSON.stringify(this.obj))\r\n        if (newObj.formState.length) {\r\n          newObj.formState = newObj.formState.sort((a, b) => a.value - b.value)\r\n        }\r\n        this.ruleForm = newObj\r\n      } else {\r\n        this.ruleForm.formState = [{ formId: 0, name: '制单', value: 0, formStateOption: [], isCheckup: false, isFlowNode: true, inUse: true },\r\n          { formId: 0, name: '审核', value: 1, formStateOption: [], isCheckup: true, isFlowNode: true, inUse: true },\r\n          { formId: 0, name: '完成', value: 10000, formStateOption: [], isCheckup: false, isFlowNode: true, inUse: true }]\r\n      }\r\n    },\r\n    loadTableField() {\r\n      const _value = this.ruleForm.value.trim()\r\n      if (_value === '') {\r\n        this.$alert('表单值不能为空！')\r\n        return\r\n      }\r\n      var reg = /^[A-Z]+$/\r\n      let strIndex = -1 // 获取第一个大写字母位置\r\n      for (var i = 0; i < _value.length; i++) {\r\n        if (reg.test(_value.charAt(i)) && strIndex === -1) {\r\n          strIndex = i\r\n        }\r\n      }\r\n      if (strIndex === -1) {\r\n        this.$alert('必须有一个大写字母：表单值格式：cgglPlan')\r\n        return\r\n      }\r\n      // 拼接 后台类的 命名空间: cgglPlan => cggl.Plan\r\n      var cnstr = _value.substring(0, strIndex).toUpperCase() + '.' + _value.substring(strIndex)\r\n      this.buttonLoading = true\r\n      setTimeout(() => {\r\n        getClassInfo({ cn: cnstr }).then(response => {\r\n          const { data } = response\r\n          if (data) {\r\n            this.$message('加载成功')\r\n            this.property = data.property\r\n          } else {\r\n            this.property = null\r\n            this.$message('加载失败')\r\n          }\r\n          this.buttonLoading = false\r\n        }).catch(() => { this.buttonLoading = false })\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n}\r\n",null]}
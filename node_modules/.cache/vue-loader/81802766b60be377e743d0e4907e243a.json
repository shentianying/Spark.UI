{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\conditionAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowDesign\\conditionAdd.vue","mtime":1624071363336},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { addFlowCondition, getFlowCondition } from '@/api/xtgl/flow'\r\nimport ConditionItemAdd from './component/conditionItemAdd'\r\n// import OrgSelect2 from '@/components/OrgSelect/index2'\r\nexport default {\r\n  name: 'ConditionAdd',\r\n  components: {\r\n    ConditionItemAdd\r\n    // OrgSelect2\r\n  },\r\n  props: {\r\n    dropDownData: { type: Object, default: null },\r\n    obj: { type: Object, default: null }\r\n  },\r\n  data() {\r\n    return {\r\n      list: [\r\n        {\r\n          header: { flowId: 0,\r\n            code: 1,\r\n            pCode: 0,\r\n            formFlowFieldId: 0,\r\n            formFlowField: { field: '', fieldName: '', fieldType: '', dicType: '' },\r\n            operator: '&&',\r\n            operatorList: null,\r\n            dicList: null,\r\n            isload: true,\r\n            value: '',\r\n            isLeaf: false },\r\n          item: [\r\n            { flowId: 0,\r\n              code: 2,\r\n              pCode: 1,\r\n              formFlowFieldId: null,\r\n              formFlowField: { field: '', fieldName: '', fieldType: '', dicType: '' },\r\n              operator: '',\r\n              operatorList: null,\r\n              dicList: null,\r\n              isload: true,\r\n              value: '',\r\n              isLeaf: true }\r\n          ],\r\n          children: []\r\n        }\r\n      ],\r\n      buttonLoading: false,\r\n      code: 0,\r\n      dropDownData1: null,\r\n      conditionStr: '',\r\n      orgIds: 8,\r\n      copeFlowId: null,\r\n      flowList: [],\r\n      operArr: { '&&': '并且', '||': '或者' }\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    this.dropDownData1 = JSON.parse(JSON.stringify(this.dropDownData))\r\n    // console.log('conditionAdd:', this.dropDownData.dictionary)\r\n    this.flowList = this.dropDownData1.flowList.filter(f => f.id !== this.obj.id)\r\n    this.getFlowConditionList(this.obj.id)\r\n  },\r\n  methods: {\r\n    Save() {\r\n      // console.log('获取流程条件json:', this.list)\r\n      var list0 = JSON.parse(JSON.stringify(this.list))\r\n      this.conditionStr = this.getStrCondition(list0, '')\r\n      var newList = this.toList(list0, 0) // 树形转换成list\r\n\r\n      for (const item of newList) {\r\n        if (item.operator === '') {\r\n          this.$message('条件符号不能为空')\r\n          return\r\n        }\r\n        if (item.isLeaf) {\r\n          if (item.formFlowFieldId === 0 || item.formFlowFieldId === null) {\r\n            this.$message('条件字段不能为空')\r\n            return\r\n          }\r\n          if (item.value === '') {\r\n            this.$message('条件值不能为空')\r\n            return\r\n          }\r\n        }\r\n      }\r\n      this.buttonLoading = true\r\n      addFlowCondition({ id: this.obj.id, conditionDescription: this.conditionStr, flowCondition: newList }).then(response => {\r\n        this.$message(response.message)\r\n        this.buttonLoading = false\r\n        this.$emit('dialogClose')\r\n      }).catch(() => { this.buttonLoading = false })\r\n    },\r\n    getFlowConditionList(id) {\r\n      // 初始化\r\n      getFlowCondition({ flowId: id }).then(response => {\r\n        const { data } = response\r\n        if (data.length > 0) {\r\n          data.forEach(e => {\r\n            e.operatorList = null\r\n            e.formFlowField = null\r\n            e.isload = true\r\n            if (e.isLeaf) {\r\n              e.formFlowField = this.dropDownData1.formfieldList.find(f => f.id === e.formFlowFieldId)\r\n              e.operatorList = this.dropDownData1.fieldTypeList.find(f => f.type === e.formFlowField.fieldType).operator\r\n              if (e.formFlowField.fieldType === 'dictionary') {\r\n                e.dicList = this.dropDownData1.dictionary.filter(f => f.type === e.formFlowField.dicType)\r\n                e.dicList.forEach(e => {\r\n                // e.label = e.name\r\n                  e.pid = e.pId\r\n                  e.id = e.value\r\n                })\r\n                e.value = e.value.split(',').map(item => { return +item })\r\n              }\r\n              if (e.formFlowField.fieldType === 'organization') {\r\n                e.dicList = this.dropDownData1.organization\r\n                e.value = e.value.split(',').map(item => { return +item })\r\n              }\r\n            }\r\n          })\r\n          this.list = this.getTree(0, data)\r\n        }\r\n      })\r\n    },\r\n    getTree(pCode, data) {\r\n      var itemArr = []\r\n      for (var i = 0; i < data.length; i++) {\r\n        var node = data[i]\r\n        if (node.pCode === pCode && node.isLeaf === false) {\r\n          var c = this.getTree(node.code, data)\r\n          var newNode = {\r\n            header: node,\r\n            item: data.filter(f => f.pCode === node.code && f.isLeaf),\r\n            children: c\r\n          }\r\n          itemArr.push(newNode)\r\n        }\r\n      }\r\n      return itemArr\r\n    },\r\n    toList(arr, index) {\r\n      var list = []\r\n      for (const a of arr) {\r\n        var header = a.header\r\n        header.flowId = this.obj.id\r\n        var item = a.item\r\n        index = index + 1\r\n        header.code = index\r\n\r\n        if (header.isLeaf === false) { this.code = index }\r\n        header.formFlowFieldId = header.formFlowFieldId || 0\r\n        delete header.operatorList\r\n        delete header.formFlowField\r\n        delete header.dicList\r\n        delete header.isload\r\n        delete header.id\r\n        // 子节点循环\r\n        item.forEach((e, i) => {\r\n          e.pCode = this.code\r\n          index = index + 1\r\n          e.code = index\r\n          e.flowId = this.obj.id\r\n\r\n          e.formFlowFieldId = e.formFlowFieldId || 0\r\n          if (e.formFlowField.fieldType === 'dictionary' || e.formFlowField.fieldType === 'organization') {\r\n            // 类型是字典或者组织机构就把数组转成字符串\r\n            if (Array.isArray(e.value)) { e.value = e.value.join(',') } // 如果value 是数组，转成字符串\r\n          }\r\n          delete e.operatorList\r\n          delete e.formFlowField\r\n          delete e.dicList\r\n          delete e.isload\r\n          delete e.id\r\n          index = e.code\r\n        })\r\n        list = [...list, header, ...item] // 合并\r\n        if (a.children.length > 0) {\r\n          list = [...list, ...this.toList(a.children, index)]\r\n        }\r\n      }\r\n      return list\r\n    },\r\n    // 拼接查询条件描述\r\n    getStrCondition(arr, operator) {\r\n      var strCondition = ''\r\n      var i = 0\r\n      for (const a of arr) {\r\n        if (i > 0) {\r\n          strCondition += ' ' + this.operArr[operator] + ' '\r\n        }\r\n        i++\r\n        var tmpStr = ''\r\n        var j = 0\r\n        a.item.forEach((e, _) => {\r\n          if (j > 0) {\r\n            tmpStr += ' ' + this.operArr[a.header.operator] + ' '\r\n          }\r\n          var value = e.value\r\n          if (e.formFlowField.fieldType === 'dictionary') {\r\n            value = this.dropDownData1.dictionary.filter(f => f.type === e.formFlowField.dicType && e.value.indexOf(f.value) >= 0).map(m => m.name).join('，')\r\n            value = '（' + value + '）'\r\n          }\r\n          if (e.formFlowField.fieldType === 'organization') {\r\n            value = this.dropDownData1.organization.filter(f => e.value.includes(f.id)).map(m => m.name).join('，')\r\n            value = '（' + value + '）'\r\n          }\r\n          tmpStr += e.formFlowField.fieldName + ' ' + e.operator + ' ' + value\r\n          j++\r\n        })\r\n        if (a.children.length > 0) {\r\n          if (j > 0) {\r\n            tmpStr += ' ' + this.operArr[a.header.operator] + ' '\r\n          }\r\n          tmpStr += this.getStrCondition(a.children, a.header.operator)\r\n        }\r\n        if (operator !== '' && a.item.length + a.children.length > 1) {\r\n          tmpStr = '（' + tmpStr + '）'\r\n        }\r\n        strCondition += tmpStr\r\n      }\r\n      return strCondition\r\n    },\r\n    changeFlow(value) {\r\n      // console.log('value:', value)\r\n      this.copeFlowId = value\r\n      this.getFlowConditionList(value)\r\n    }\r\n  }\r\n}\r\n",null]}
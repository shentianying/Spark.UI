{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowCenter\\formFlowFieldAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowCenter\\formFlowFieldAdd.vue","mtime":1624071363333},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getDictionaryGroupType } from '@/api/xtgl/dictionary'\r\nimport { getFieldTypeList } from '@/api/xtgl/flow'\r\nexport default {\r\n  name: 'AddFlowField',\r\n  props: {\r\n    obj: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    property: {\r\n      type: Array,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        formId: 0,\r\n        field: '',\r\n        fieldName: '',\r\n        fieldType: '',\r\n        dicType: '',\r\n        inUse: true\r\n      },\r\n      buttonLoading: false,\r\n      selectField: null,\r\n      typeList: null,\r\n      fieldTypeList: null,\r\n      showDicType: false,\r\n      rules: {\r\n        field: [{ required: true, message: '请输入', trigger: 'blur' }],\r\n        fieldName: [{ required: true, message: '请输入', trigger: 'blur' }],\r\n        fieldType: [{ required: true, message: '请输入', trigger: 'change' }]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          var newObj = JSON.parse(JSON.stringify(this.ruleForm))\r\n          if (this.obj) {\r\n            this.$emit('dialogCloseFormFlowField', newObj, 'update')\r\n          } else {\r\n            this.$emit('dialogCloseFormFlowField', newObj, 'add')\r\n          }\r\n        }\r\n      })\r\n    },\r\n    initData() {\r\n      getDictionaryGroupType().then((result) => {\r\n        this.typeList = result.data\r\n      }).catch(() => { })\r\n\r\n      getFieldTypeList().then(response => {\r\n        this.fieldTypeList = response.data\r\n      })\r\n      if (this.obj) {\r\n        var newObj = JSON.parse(JSON.stringify(this.obj))\r\n        this.ruleForm = newObj\r\n        this.changeFieldType(this.ruleForm.fieldType)\r\n      }\r\n    },\r\n    changeFieldType(value) {\r\n      // 字段类型为dictionary，就显示 字典类型项\r\n      if (value === 'dictionary') { this.showDicType = true } else this.showDicType = false\r\n    },\r\n    selectFieldChange(value) {\r\n      if (value) {\r\n        const obj = this.property.find(f => f.item2 === value)\r\n        this.ruleForm.fieldName = obj.item1 || ''\r\n        this.ruleForm.field = obj.item2\r\n        if (this.fieldTypeList.find(f => f.type === obj.item3)) {\r\n          this.ruleForm.fieldType = obj.item3\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}
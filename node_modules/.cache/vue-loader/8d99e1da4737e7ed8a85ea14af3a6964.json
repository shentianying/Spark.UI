{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Gathering\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\cwgl\\zjgl\\Gathering\\edit.vue","mtime":1633684104556},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n  GetPaymentById,\r\n  GetGatheringPaging,\r\n  SaveGathering,\r\n  InvalidGathering\r\n} from '@/api/cwgl/zjgl/Gathering.js'\r\n\r\nimport { ExcelExport, ExcelImport } from 'pikaz-excel-js'\r\nimport { validateData, validate } from '@/utils/validate'\r\nimport { formatExcelDate, cleanText } from '@/utils/index'\r\nimport MyForm from '@/components/MyForm'\r\n\r\nexport default {\r\n  name: 'ShouKuanEdit',\r\n  // 局部注册的组件\r\n  components: {\r\n    ExcelImport,\r\n    ExcelExport,\r\n    MyForm\r\n  },\r\n  // 组件状态值\r\n  data() {\r\n    const date = (() => { // 防抖\r\n      let timer = null\r\n      return (rule, value, callback) => {\r\n        const index = rule.field.split('.')[1]\r\n        const key = rule.field.split('.')[2]\r\n        const row = this.skForm.acceptanceList[index]\r\n        if (new Date(row.ticketDate) > new Date(row.expiration)) {\r\n          if (key === 'expiration') {\r\n            if (timer) {\r\n              clearTimeout(timer)\r\n              timer = null\r\n            }\r\n            timer = setTimeout(() => {\r\n              this.$message.error('开票日期不能晚于到期日期')\r\n              timer = null\r\n            }, 200)\r\n          }\r\n          return callback(new Error('开票日期不能晚于到期日期'))\r\n        }\r\n        callback()\r\n      }\r\n    })()\r\n    const money = (() => {\r\n      let timer = null\r\n      return (rule, value, callback) => {\r\n        const cb = (e) => {\r\n          if (e instanceof Error) {\r\n            if (timer) {\r\n              clearTimeout(timer)\r\n              timer = null\r\n            }\r\n            console.log(e.message)\r\n            timer = setTimeout(() => {\r\n              this.$message.error(e.message)\r\n              timer = null\r\n            }, 200)\r\n            callback(e)\r\n          } else {\r\n            callback()\r\n          }\r\n        }\r\n        validate.max_amount(rule, value, cb)\r\n      }\r\n    })()\r\n    return {\r\n      size: 'mini', // 整体大小\r\n      type: '', // edit：编辑 add:新增\r\n      isCanUpdate: true, // 是否可编辑,备注银行除外\r\n      skForm: {\r\n        id: 'add',\r\n        gatheringDate: '',\r\n        acceptanceList: [],\r\n        number: '', // 收款编号\r\n        orgId: '', // 部门\r\n        gatheringType: '', // 收款类型\r\n        capitalType: '', // 资金类型\r\n        date1: '', // 收款日期\r\n        personId: '', // 经手人ID\r\n        personName: '', // 经手人\r\n        amount: '', // 金额\r\n        bank: '', // 银行\r\n        remark: '', // 备注\r\n        state: -1\r\n      },\r\n      defaultParams: {\r\n        expandTrigger: 'hover',\r\n        label: 'name',\r\n        value: 'value',\r\n        children: 'childs'\r\n      },\r\n      sheet: [\r\n        {\r\n          // title: '材料计划导入模板',\r\n          tHeader: [\r\n            '票号',\r\n            '开票日期',\r\n            '到期日期',\r\n            '金额',\r\n            '出票人',\r\n            '付款人',\r\n            '收款人',\r\n            '付款行',\r\n            '备注'\r\n          ],\r\n          table: [],\r\n          keys: [\r\n            'ticketNumber',\r\n            'ticketDate',\r\n            'expiration',\r\n            'amount',\r\n            'drawer',\r\n            'payer',\r\n            'payee',\r\n            'bank',\r\n            'remark'\r\n          ],\r\n          sheetName: '材料明细'\r\n        }\r\n      ],\r\n      sklxData: [],\r\n      zjlxData: [],\r\n      // 验证规则\r\n      rules: {\r\n        text: [{ required: true, message: '请输入', trigger: 'change' }],\r\n        date: [{ required: true, message: '请选择日期', trigger: 'change' }, { validator: date, trigger: 'change' }],\r\n        money: [{ required: true, message: '请输入金额', trigger: 'change' }, { validator: money, trigger: 'change' }],\r\n        orgId: [{ required: true, message: '请选择部门', trigger: 'change' }],\r\n        gatheringType: [\r\n          { required: true, message: '请选择收款类型', trigger: 'change' }\r\n        ],\r\n        capitalType: [\r\n          { required: true, message: '请选择资金类型', trigger: 'change' }\r\n        ],\r\n        gatheringDate: [\r\n          { required: true, message: '请选择日期', trigger: 'change' }\r\n        ],\r\n        personId: [\r\n          { required: true, message: '请选择经手人', trigger: 'change' }\r\n        ],\r\n        amount: [\r\n          { required: true, message: '请输入金额', trigger: 'change' },\r\n          { validator: validate.money, message: '金额格式不正确' },\r\n          { validator: validate.max_amount, message: '超过所能存储的最大金额' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  beforeRouteEnter(to, from, next) {\r\n    next(vm => {\r\n      const newId = vm.$route.query.id\r\n      const oldId = vm.skForm.id\r\n      if (newId && newId !== oldId) {\r\n      // 说明是打开另一个单子的编辑页面\r\n        vm.skForm.id = newId\r\n        vm.getskForm()\r\n        vm.active = 1\r\n      } else if (!newId && oldId) {\r\n        // 说明是打开一个新建页面\r\n        Object.assign(vm.skForm, {\r\n          state: 0,\r\n          acceptanceList: [],\r\n          id: ''\r\n        })\r\n        vm.isCanUpdate = true\r\n        vm.$refs['ruleForm']?.resetFields()\r\n        vm.getOptions()\r\n      }\r\n    })\r\n  },\r\n  computed: {\r\n    isChendui() {\r\n      const { capitalType } = this.skForm\r\n      return capitalType === 2 || capitalType === 3\r\n    },\r\n    /**\r\n     * 处理form表单的数据\r\n     */\r\n    formNodeData() {\r\n      const { isCanUpdate, sklxData } = this\r\n      return [\r\n        { label: '编码:', keyword: 'number', props: { disabled: true, placeholder: '系统自动生成' }},\r\n        { label: '部门:', keyword: 'orgId', component: 'OrgSelect', props: { dataMode: 1, collapseTags: true, showAllLevels: false, filterable: true, expandTrigger: 'hover', placeholder: '请选择部门', checkStrictly: true, disabled: !isCanUpdate }},\r\n        { label: '收款类型:', keyword: 'gatheringType', component: 'Select', props: { disabled: !isCanUpdate, placeholder: '请选择', options: sklxData.map(v => { return { label: v.name, value: v.value } }) }},\r\n        { label: '资金类型:', keyword: 'capitalType', component: 'CapitalSelect', props: { disabled: !isCanUpdate, multiple: false, showAllLevels: false }},\r\n        { label: '收款日期:', keyword: 'gatheringDate', component: 'el-date-picker', props: { disabled: !isCanUpdate, type: 'date', placeholder: '选择日期', valueFormat: 'yyyy-MM-dd' }},\r\n        { label: '经手人:', keyword: 'personId', component: 'PersonSelect', props: { disabled: !isCanUpdate, multiple: false }},\r\n        { label: '金额:', keyword: 'amount' },\r\n        { label: '收款银行:', keyword: 'bank' },\r\n        { label: '备注:', keyword: 'remark', monopolize: true, props: { type: 'textarea' }}\r\n      ]\r\n    }\r\n  },\r\n  watch: {\r\n    'skForm.acceptanceList': {\r\n      handler(val) {\r\n        if (this.isChendui) {\r\n          let amount = 0\r\n          if (Array.isArray(val)) {\r\n            val.forEach(item => {\r\n              amount += Number(item.amount)\r\n            })\r\n          }\r\n          this.skForm.amount = amount\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    }\r\n  },\r\n  // 组件方法\r\n  methods: {\r\n    async invalidGathering() {\r\n      // 作废之前弹窗确定一下\r\n      this.$confirm('作废以后将无法编辑，是否确定作废？', '提示', {\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          return InvalidGathering(this.skForm.id)\r\n        })\r\n        .then(res => {\r\n          this.$message.success(res.message)\r\n          this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n          // this.$message.error(err.errorMsg || '操作失败')\r\n        })\r\n    },\r\n    onSuccess(d, file) {\r\n      var data = d[0].data\r\n      // const postData = []\r\n      console.log('数据为空的字段data中不会有该字段:', data)\r\n      // if (data.length) return // 为空返回\r\n\r\n      var errorMessage = ''\r\n      const isEmpyt = data.every(e => {\r\n        // 非空判断\r\n        if (!e.付款人) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，付款人不能为空；'\r\n        }\r\n        if (!e.付款行) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，付款行不能为空；'\r\n        }\r\n        if (!e.出票人) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，出票人不能为空；'\r\n        }\r\n        if (!e.收款人) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，收款人不能为空；'\r\n        }\r\n        if (!e.金额) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，金额不能为空；'\r\n        } else if (!validateData.money(e.金额.trim()).isSuccess) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，金额格式不正确；'\r\n        }\r\n\r\n        if (!e.开票日期) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，开票日期不能为空；'\r\n        } else {\r\n          /* const convertDate = formatExcelDate(e.开票日期.trim())\r\n          if (!validateData.date(convertDate).isSuccess) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，开票日期格式错误；'\r\n          } */\r\n        }\r\n\r\n        if (!e.到期日期) {\r\n          errorMessage += '第' + e.__rowNum__ + '行，到期日期不能为空；'\r\n        } else {\r\n          /* const convertDate = formatExcelDate(e.到期日期.trim())\r\n          if (!validateData.date(convertDate).isSuccess) {\r\n            errorMessage += '第' + e.__rowNum__ + '行，到期日期格式错误；'\r\n          } */\r\n        }\r\n\r\n        if (\r\n          e.开票日期 &&\r\n          e.到期日期 &&\r\n          new Date(e.开票日期.trim()) > new Date(e.到期日期.trim())\r\n        ) {\r\n          errorMessage +=\r\n            '第' + e.__rowNum__ + '行，开票日期不得晚于到期日期；'\r\n        }\r\n        return errorMessage.length > 0\r\n      })\r\n      // 表格检验\r\n      this.loading = true\r\n      if (isEmpyt) {\r\n        this.$alert(`${errorMessage.replace(/；/g, '；<br />')}`, {\r\n          dangerouslyUseHTMLString: true\r\n        })\r\n        this.loading = false\r\n        return\r\n      }\r\n\r\n      const dateList = ['ticketDate', 'expiration'] // 时间\r\n      for (var row of data) {\r\n        const sheet = this.sheet[0]\r\n\r\n        const tmpRow = {}\r\n        sheet.keys.forEach((key, index) => {\r\n          // 每一行\r\n          const thName = sheet.tHeader[index] // 表头名\r\n\r\n          tmpRow[key] = row[thName] || cleanText(index)\r\n\r\n          if (dateList.includes(key)) {\r\n            // 格式化时间\r\n            console.log(tmpRow[key])\r\n            data[key] = formatExcelDate(tmpRow[key])\r\n          }\r\n        })\r\n\r\n        this.skForm.acceptanceList.push(tmpRow)\r\n      }\r\n    },\r\n    // 获取资金类型、收款类型选项\r\n    async getOptions() {\r\n      const {\r\n        capitalTypeOptions,\r\n        gatheringTypeOptions\r\n      } = await GetGatheringPaging({ currentPage: 1, pageSize: 1 })\r\n      this.sklxData = gatheringTypeOptions\r\n      this.zjlxData = capitalTypeOptions\r\n    },\r\n    // 获取收款信息数据\r\n    getskForm() {\r\n      GetPaymentById(this.skForm.id)\r\n        .then(res => {\r\n          const { code, data, gatheringTypeOptions, capitalTypeOptions } = res\r\n          if (code === 200) {\r\n            this.isCanUpdate = data.isCanUpdate\r\n            for (const key in this.skForm) {\r\n              if (Object.hasOwnProperty.call(data, key)) {\r\n                this.skForm[key] = data[key]\r\n              }\r\n            }\r\n            this.sklxData = gatheringTypeOptions\r\n            this.zjlxData = capitalTypeOptions\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n        })\r\n    },\r\n    handleEdit(row) {\r\n      const backups = JSON.stringify(row)\r\n      Object.assign(row, {\r\n        isEdit: true,\r\n        backups\r\n      })\r\n    },\r\n    handleSubmitEdit(row) {\r\n      delete row.isAdd\r\n      this.$set(row, 'isEdit', false)\r\n    },\r\n    /**\r\n     * @description: 列表行内编辑取消修改\r\n     * @param {*} row\r\n     * @param {Number} index\r\n     * @return {*}\r\n     */\r\n    handleCancelEdit(row, index) {\r\n      const backData = JSON.parse(row.backups)\r\n      const list = this.skForm.acceptanceList\r\n      if (row.isAdd) {\r\n        // 此次编辑为新增,取消应删除此行\r\n        list.splice(index, 1)\r\n      } else {\r\n        Object.assign(row, backData)\r\n      }\r\n    },\r\n    // 提交表单\r\n    submitForm(formName) {\r\n      console.log(111)\r\n      this.$refs[formName].validate(async valid => {\r\n        if (valid) {\r\n          const AcceptanceList = this.skForm.acceptanceList\r\n          const capitalType = String(this.skForm.capitalType)\r\n          const data = { ...this.skForm, AcceptanceList: [] }\r\n          if (capitalType === '2' || capitalType === '3') {\r\n            data.AcceptanceList = AcceptanceList\r\n          }\r\n          if (data.acceptanceList) {\r\n            delete data.acceptanceList\r\n          }\r\n          if (!data.id) {\r\n            delete data.id\r\n          }\r\n          const res = await SaveGathering(data)\r\n\r\n          this.goBack()\r\n          this.$message.success(res.message)\r\n        }\r\n      })\r\n    },\r\n    addRow() {\r\n      // 这里要把字段写全,要不然,取消的时候反向覆盖没有对应字段,不好处理\r\n      const row = {\r\n        // isEdit: false,\r\n        // isAdd: true,\r\n        ticketNumber: '',\r\n        ticketDate: '',\r\n        expiration: '',\r\n        amount: '',\r\n        drawer: '',\r\n        payer: '',\r\n        payee: '',\r\n        bank: '',\r\n        remark: ''\r\n      }\r\n      // this.$set(row, 'backups', JSON.stringify(row))\r\n      // row.isEdit = true\r\n      this.skForm.acceptanceList.push(row)\r\n    },\r\n    deleteRow(index, rows) {\r\n      rows.splice(index, 1)\r\n    },\r\n    /**\r\n     * 取消并返回上一页\r\n     */\r\n    goBack() {\r\n      this.utils.closeAndRefresh(this.$route.query.refreshRouterName)\r\n    }\r\n  }\r\n}\r\n",null]}
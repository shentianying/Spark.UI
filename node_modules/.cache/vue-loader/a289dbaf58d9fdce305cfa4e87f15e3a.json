{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\components\\upLoadAvatar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\components\\upLoadAvatar.vue","mtime":1624071363346},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'UpImage', // 上传图片\r\n  data() {\r\n    return {\r\n      uploadImageAction: 'http://aaaa.com/api/EntryForm/UpLoadImage',\r\n      avatar: '',\r\n      avatarTemp: ''\r\n    }\r\n  },\r\n  methods: {\r\n    // 上传文件的方法\r\n    handleRemove(file, fileList) {\r\n      this.fileList = this.fileList.filter(item => item.url !== file.url)\r\n    },\r\n    handlePreview(file) {\r\n      // window.open(file.url);\r\n    },\r\n    handleExceed(files, fileList) {\r\n      this.$message.warning(\r\n        `当前限制选择 3 个文件，本次选择了 ${\r\n          files.length\r\n        } 个文件，共选择了 ${files.length + fileList.length} 个文件`\r\n      )\r\n    },\r\n    beforeRemove(file, fileList) {\r\n      // return this.$confirm(`确定移除 ${file.name}？`);\r\n    },\r\n    // handleError(err, file, fileList) {\r\n    //   this.$message.error('出错了')\r\n    // },\r\n    handleSuccess(response, file, fileList) {\r\n      this.fileList.push({ name: file.name, url: response })\r\n    },\r\n    handleAvatarSuccess(res, file) {\r\n      this.Avatar = URL.createObjectURL(file.raw) // 作显示的\r\n      this.AvatarTemp = res // 保存数据库的值\r\n    },\r\n    beforeFileUpload(file) {\r\n      const isLt2M = file.size / 1024 / 1024 < 10\r\n      if (!isLt2M) {\r\n        this.$message.error('上传文件大小不能超过 10MB!')\r\n      }\r\n      return isLt2M\r\n    },\r\n    beforeAvatarUpload(file) {\r\n      const _this = this\r\n      return new Promise((resolve, reject) => {\r\n        const isLt2M = file.size / 1024 / 1024 < 10 // 判定图片大小是否小于10MB\r\n        if (!isLt2M) {\r\n          this.$message.error('上传头像图片大小不能超过 10MB!')\r\n          reject()\r\n        }\r\n        const image = new Image()\r\n        let resultBlob = ''\r\n        image.src = URL.createObjectURL(file)\r\n        image.onload = () => {\r\n          // 调用方法获取blob格式，方法写在下边\r\n          resultBlob = _this.compressUpload(image, file)\r\n          resolve(resultBlob)\r\n        }\r\n        image.onerror = () => {\r\n          reject()\r\n        }\r\n      })\r\n    },\r\n    compressUpload(image, file) {\r\n      const canvas = document.createElement('canvas')\r\n      const ctx = canvas.getContext('2d')\r\n      // const initSize = image.src.length\r\n      const { width } = image\r\n      const { height } = image\r\n      canvas.width = width\r\n      canvas.height = height\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n      ctx.drawImage(image, 0, 0, width, height)\r\n\r\n      // 进行最小压缩0.1\r\n      const compressData = canvas.toDataURL(file.type || 'image/jpeg', 0.5)\r\n\r\n      // 压缩后调用方法进行base64转Blob，方法写在下边\r\n      const blobImg = this.dataURItoBlob(compressData)\r\n      return blobImg\r\n    },\r\n    dataURItoBlob(data) {\r\n      let byteString\r\n      if (data.split(',')[0].indexOf('base64') >= 0) {\r\n        byteString = atob(data.split(',')[1])\r\n      } else {\r\n        byteString = unescape(data.split(',')[1])\r\n      }\r\n      const mimeString = data\r\n        .split(',')[0]\r\n        .split(':')[1]\r\n        .split(';')[0]\r\n      const ia = new Uint8Array(byteString.length)\r\n      for (let i = 0; i < byteString.length; i += 1) {\r\n        ia[i] = byteString.charCodeAt(i)\r\n      }\r\n      return new Blob([ia], { type: mimeString })\r\n    }\r\n  }\r\n}\r\n",null]}
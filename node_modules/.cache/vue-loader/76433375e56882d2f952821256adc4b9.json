{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Other\\msgInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Other\\msgInfo.vue","mtime":1626082556186},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getMessageByBillFlowId, sendMessage } from '@/api/xtgl/message'\r\n// import SelectPerson from '@/components/Other/selectPerson'\r\nexport default {\r\n  name: '',\r\n  components: {\r\n    // SelectPerson\r\n  },\r\n  props: {\r\n    personArray: { type: Array, default: null }, // 传过来的指定的用户数组 必须包含字段 id,name, 支持自动去重\r\n    billId: { type: Number, default: 0 },\r\n    billFlowId: { type: Number, default: 0 },\r\n    pageId: { type: Number, default: 0 },\r\n    isShow: { type: Boolean, default: true }\r\n  },\r\n  data() {\r\n    return {\r\n      state: 1,\r\n      content: '',\r\n      dialogTableVisible: false,\r\n      loading: false,\r\n      pubMessage: [],\r\n      priMessage: [],\r\n      active1: ['1'],\r\n      personList: [] // 去重后的数据\r\n    }\r\n  },\r\n  computed: {\r\n  },\r\n  watch: {\r\n    content(value) {\r\n      // if () {\r\n      //   this.popoverVisible = true\r\n      //   console.log('存在@符号')\r\n      // }\r\n    }\r\n  },\r\n  created() {\r\n    if ((this.personArray || []).length > 0) {\r\n      // 去重，去自己\r\n      this.personList = this.unique(this.personArray).filter(f => f.id !== this.$store.state.user.info.uid)\r\n    } else { return null }\r\n  },\r\n  mounted() {\r\n    if (this.isShow) {\r\n      this.fetchData()\r\n    }\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      getMessageByBillFlowId({ billFlowId: this.billFlowId }).then(res => {\r\n        const { pubData, priData } = res\r\n        this.pubMessage = pubData\r\n        this.priMessage = priData\r\n      })\r\n    },\r\n    addReminder() {\r\n      this.dialogTableVisible = true\r\n    },\r\n    unique(arr) {\r\n      // 根据唯一标识id来对数组进行去重\r\n      const res = new Map() // 定义常量 res,值为一个Map对象实例\r\n      // 返回arr数组过滤后的结果，结果为一个数组   过滤条件是，如果res中没有某个键，就设置这个键的值为1\r\n      return arr.filter((arr) => !res.has(arr.id) && res.set(arr.id, 1))\r\n    },\r\n    chooseUser(text) {\r\n      this.content += `@${text} `\r\n      this.dialogTableVisible = false\r\n    },\r\n    // getPersons(selectedItems) {\r\n    //   console.log('输出选中的用户：', selectedItems)\r\n    // },\r\n    goSend() {\r\n      if (this.content.trim() === '') {\r\n        this.$alert('内容不能为空')\r\n        return false\r\n      }\r\n\r\n      const reg = /@[\\u4e00-\\u9fa5]{0,}\\s/g // 匹配@符号后面带中文加空格 的字符串\r\n      var arr = this.content.match(reg) // 获取匹配后的结果 数组\r\n      // console.log('匹配的结果arr:', arr)\r\n\r\n      if (arr) {\r\n        // 根据姓名 找到 相对应的 Id 数组\r\n        const idArr = arr.map(m => this.personList.find(f => f.name === m.substring(1).trim()).id)\r\n        // console.log('根据@姓名 找到的 id数组:', idArr)\r\n\r\n        var postData = {}\r\n        postData.content = this.content\r\n        postData.billId = this.billId\r\n        postData.billFlowId = this.billFlowId\r\n        postData.pageId = this.pageId\r\n        // 公开,发送给全部人员\r\n        if (this.state === 1) {\r\n          postData.title = '有一条新的消息'\r\n          postData.type = 3\r\n          const item = []\r\n          this.personList.forEach(e => {\r\n            item.push({ receiverId: e.id })\r\n          })\r\n          postData.messageUser = item\r\n        }\r\n\r\n        // 私密，发送给特定人员\r\n        if (this.state === 0) {\r\n          if ((idArr || []).length === 0) {\r\n            this.$alert('私密必须有人员对象，请@检查格式')\r\n            return\r\n          }\r\n          postData.title = '有人私密@你了'\r\n          postData.content = this.content\r\n          postData.type = 4\r\n          postData.billId = this.billId\r\n          postData.billFlowId = this.billFlowId\r\n          postData.pageId = this.pageId\r\n\r\n          const item = []\r\n          idArr.forEach(e => {\r\n            item.push({ receiverId: e })\r\n          })\r\n          postData.messageUser = item\r\n        }\r\n\r\n        this.loading = true\r\n        sendMessage(postData).then(res => {\r\n          this.$message(res.message)\r\n          // 清空\r\n          this.state = 1\r\n          this.content = ''\r\n\r\n          // 刷新\r\n          this.fetchData()\r\n\r\n          this.loading = false\r\n        }).catch(() => { this.loading = false })\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}
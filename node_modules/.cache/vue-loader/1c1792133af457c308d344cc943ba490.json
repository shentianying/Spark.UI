{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\message.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\xtgl\\jcsj\\message.vue","mtime":1635216068846},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getRemindPaging, putIsRead } from '@/api/xtgl/message'\r\nimport store from '@/store'\r\nexport default {\r\n  name: 'Message',\r\n  components: {\r\n  },\r\n  data() {\r\n    return {\r\n      list: null,\r\n      listLoading: true,\r\n      dialogTableVisible: false,\r\n      dialogTitle: '保存',\r\n\r\n      total: 0,\r\n      currentPage: 1,\r\n      pageSize: this.utils.getPersonalSettings().pageSize,\r\n      searchStr: '',\r\n      type: null,\r\n      isRead: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      this.listLoading = true\r\n      var postData = {}\r\n      postData.currentPage = this.currentPage\r\n      postData.pageSize = this.pageSize\r\n      postData.title = this.searchStr\r\n      postData.type = this.type\r\n      postData.isRead = this.isRead\r\n      getRemindPaging(postData).then(response => {\r\n        const { data, count, noReadCount } = response\r\n        this.list = data\r\n        this.total = count\r\n        this.listLoading = false\r\n        this.$store.commit('user/SET_NOREADCOUNT', noReadCount)\r\n      }).catch(() => { this.listLoading = false })\r\n    },\r\n    sizeChange(val) {\r\n      this.pageSize = val\r\n      this.fetchData()\r\n    },\r\n    setBeRead(id) {\r\n      this.buttonLoading = true\r\n      const postData = { msgId: id }\r\n      putIsRead(postData).then(response => {\r\n        const { message } = response\r\n        this.$message(message)\r\n        this.buttonLoading = false\r\n        this.fetchData()\r\n      }).catch(() => { this.buttonLoading = false })\r\n    },\r\n    radioChang(value) {\r\n      this.isRead = value\r\n      this.fetchData()\r\n    },\r\n    goDeal(row) {\r\n      if (!row.pageId) return\r\n      const { routerName } = this.getRoute(row)\r\n      this.$router.replace({ name: routerName, query: { id: row.billId, refreshRouterName: this.$route.name }, params: { id: row.billId, type: 1 }})\r\n    },\r\n    getRoute(row) {\r\n      // 获取菜单列表\r\n      const getIsMenu = store.getters.menus\r\n      return getIsMenu.find(f => f.id === row.pageId)\r\n    }\r\n  }\r\n}\r\n",null]}
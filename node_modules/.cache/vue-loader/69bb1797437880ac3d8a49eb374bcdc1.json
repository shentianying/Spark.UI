{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\Flow\\flowSelect.vue","mtime":1635840233763},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// 制单选择流程\r\nimport { getPersonList } from '@/api/rsgl/person'\r\nimport SelectPerson from '@/components/Other/selectPerson'\r\nexport default {\r\n  name: 'FlowSelect',\r\n  components: {\r\n    SelectPerson\r\n  },\r\n  props: {\r\n    billFlow: { type: Object, default: null }\r\n  },\r\n  data() {\r\n    return {\r\n      stateList: [],\r\n      loading: false,\r\n      orgList: null,\r\n      billFlowData: null,\r\n      // tempItem1: [], // 添加人员, 选中的临时对象\r\n      tempItem2: [], // 添加人员，当前对象\r\n      temp: [ // 添加节点的模板\r\n        {\r\n          billFlowId: 0,\r\n          checkupDate: null,\r\n          checkupPersonId: null,\r\n          //   createDate: null,\r\n          //   createUserId: null,\r\n          //   createUserName: null,\r\n          group: 100,\r\n          id: 0,\r\n          grade: 0, // 普通等级\r\n          isAutoChecked: false,\r\n          isChecked: false,\r\n          isCurrentState: false,\r\n          isFixedNode: true,\r\n          maxDays: 0,\r\n          mode: 1,\r\n          nodeType: 1, // 1 新增节点\r\n          option: 0,\r\n          orgId: 0, // ?\r\n          // person: null,\r\n          personId: null,\r\n          personList: null,\r\n          receiveDate: null,\r\n          remark: null,\r\n          //   role: null,\r\n          roleId: 0,\r\n          roleType: 3,\r\n          state: 1\r\n        //  userList: []\r\n        }]\r\n    }\r\n  },\r\n  computed: {\r\n    getOrgList() {\r\n      return this.$store.state.user.info.orgList\r\n    }\r\n  },\r\n  watch: {\r\n    billFlow() {\r\n      this.fetchData()\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    checkBillFlow() {\r\n      let isSuccess = true\r\n      this.stateList.forEach(e => {\r\n        if (e.isCheckup && e.isFlowNode && e.stateNode.length) {\r\n          e.stateNode.forEach(e1 => {\r\n            e1.forEach(g => {\r\n              if (!g.personId) {\r\n                isSuccess = false\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n      return isSuccess\r\n    },\r\n    getBillFlow() {\r\n      // 1.验证 流程 中 是否选择\r\n      // 2.stateList 数据转换城 list 并 返回\r\n      const billFlow = {}\r\n      const billFlowNodes = []\r\n      this.stateList.forEach(e => {\r\n        if (e.isCheckup && e.isFlowNode && e.stateNode.length) {\r\n          e.stateNode.forEach(e1 => {\r\n            e1.forEach(g => {\r\n              billFlowNodes.push({\r\n                id: g.id,\r\n                billFlowId: this.billFlow.id,\r\n                group: g.group,\r\n                grade: g.grade,\r\n                mode: g.mode,\r\n                roleType: g.roleType,\r\n                roleId: g.roleId,\r\n                state: g.state,\r\n                option: g.option,\r\n                maxDays: g.maxDays,\r\n                orgId: g.orgId,\r\n                personId: g.personId || 0,\r\n                receiveDate: g.receiveDate,\r\n                isCurrentState: g.isCurrentState,\r\n                isChecked: g.isChecked,\r\n                isAutoChecked: g.isAutoChecked,\r\n                checkupPersonId: g.checkupPersonId,\r\n                checkupDate: g.checkupDate,\r\n                remark: g.remark,\r\n                nodeType: g.nodeType\r\n              })\r\n              // if (!g.personId) {\r\n              //   isError = true\r\n              // }\r\n            })\r\n          })\r\n        }\r\n      })\r\n\r\n      // if (isError) {\r\n      //   this.$alert('请选择流程中的下拉选项')\r\n      //   return false\r\n      // } else {\r\n      billFlow.flowId = this.billFlow.flowId\r\n      billFlow.formId = this.billFlow.formId\r\n      billFlow.billId = this.billFlow.billId\r\n      billFlow.billNumber = this.billFlow.billNumber\r\n      billFlow.summary = this.billFlow.summary\r\n      billFlow.amount = this.billFlow.amount\r\n      billFlow.state = this.billFlow.state\r\n      billFlow.id = this.billFlow.id\r\n      billFlow.companyId = this.billFlow.companyId\r\n      billFlow.billFlowNode = billFlowNodes\r\n      return billFlow\r\n      // }\r\n    },\r\n    /**\r\n     * 把格式化函数放在这里,在初始化还有流程对象改变时都需要调用一次,以刷新内容\r\n     */\r\n    fetchData() {\r\n      // 虽然不是很清楚这个this.billFlowData是干什么用的,不过我看原来写着,就也写了一遍,但它好像没有用处....\r\n      const { form: { formState }, billFlowNode } = this.billFlowData = this.utils.easyDeepClone(this.billFlow)\r\n      const newList = []\r\n      formState.sort((a, b) => a.value - b.value)\r\n      billFlowNode.forEach(fe => {\r\n        fe.personId = fe.personId || null\r\n      })\r\n      formState.forEach((e, i) => {\r\n        if (e.isFlowNode) {\r\n          if (e.isCheckup) {\r\n            const gs = this.groupBy(billFlowNode.filter(f => f.state === e.value), item => [item.group])\r\n            e.stateNode = gs\r\n          }\r\n          // 问题出在这里,这里需要解构一下才行,目的是把被绑定的get和set都去掉\r\n          newList.push({ ...e })\r\n        }\r\n      })\r\n      this.stateList = newList\r\n    },\r\n    groupBy(array, f) {\r\n      const groups = {}\r\n      array.forEach(function(o) {\r\n        const group = JSON.stringify(f(o))\r\n        groups[group] = groups[group] || []\r\n        groups[group].push(o)\r\n      })\r\n      return Object.keys(groups).map(function(group) { return groups[group] })\r\n    },\r\n    getRemotePerson(query, item2) {\r\n      query = query.trim()\r\n      if (query !== '') {\r\n        this.loading = true\r\n        setTimeout(() => {\r\n          getPersonList({ name: query }).then(response => {\r\n            item2.personList = response.data\r\n            this.loading = false\r\n          })\r\n        }, 200)\r\n      } else {\r\n        item2.personList = []\r\n      }\r\n    },\r\n    addNode(item, index) {\r\n      // console.log('item:', item, 'index:', index)\r\n      // console.log('addNode:', index)\r\n      // 获取是审核表单状态的 formState\r\n      const filterFormState = this.stateList.filter(f => f.inUse && f.isCheckup && f.isFlowNode)\r\n      const temp = JSON.parse(JSON.stringify(this.temp))\r\n      // 第一个箭头节点,审核节点的左边\r\n      let newGroup = 100\r\n      if (index === 0) {\r\n        // 找出第一个元素的group的值\r\n        if (this.stateList[1].stateNode.length > 0) {\r\n          newGroup = this.stateList[1].stateNode[0][0].group - 10\r\n        }\r\n        temp[0].group = newGroup\r\n        // console.log('第一个箭头节点,审核节点的左边newGroup:', newGroup)\r\n        this.stateList[1].stateNode.splice(0, 0, temp)\r\n      } else if (index < filterFormState.length) {\r\n        // 点击2个审核节点之间的箭头\r\n        const preGroups0 = filterFormState[index - 1].stateNode // 获取前一个状态节点对象\r\n        const smallGroup = preGroups0[preGroups0.length - 1][0].group // 前一个状态节点的 最后一个 group的值\r\n        const largeGroup = filterFormState[index].stateNode[0][0].group // 当前节点 第一个group 的值\r\n        var calGroup = (largeGroup + smallGroup) / 2\r\n        temp[0].group = calGroup\r\n        // console.log('点击2个审核节点之间的箭头calGroup:', calGroup)\r\n        // this.stateList[index].stateNode.push(temp)\r\n        item.stateNode.push(temp)\r\n        // console.log('添加后的节点对象：', item.stateNode)\r\n      } else if (index === filterFormState.length) {\r\n        // 点击的是最后一个箭头\r\n        if (item.stateNode.length > 0) {\r\n          const preGroups1 = filterFormState[index - 1].stateNode // 获取前一个状态节点对象\r\n          newGroup = preGroups1[preGroups1.length - 1][0].group + 10\r\n        }\r\n        temp[0].group = newGroup\r\n        // console.log('点击的是最后一个箭头calGroup:', newGroup)\r\n        item.stateNode.push(temp)\r\n      }\r\n    },\r\n    addFlowNode(item1) {\r\n      item1.push({\r\n        id: 0,\r\n        billFlowId: 0,\r\n        checkupDate: null,\r\n        checkupPersonId: null,\r\n        //   createDate: null,\r\n        //   createUserId: null,\r\n        //   createUserName: null,\r\n        group: item1[0].group,\r\n        grade: 0, // 普通等级\r\n        isAutoChecked: false,\r\n        isChecked: false,\r\n        isCurrentState: false,\r\n        isFixedNode: true,\r\n        maxDays: 0,\r\n        mode: 1,\r\n        nodeType: 1, // 1 新增节点\r\n        option: 0,\r\n        orgId: 0, // ?\r\n        // person: null,\r\n        personId: null,\r\n        personList: null,\r\n        receiveDate: null,\r\n        remark: null,\r\n        //   role: null,\r\n        roleId: 0,\r\n        roleType: 3,\r\n        state: 1\r\n        //  userList: []\r\n      })\r\n    },\r\n    delFlowNode(stateNode, index1, item1, index2) {\r\n      if (item1.length > 1) {\r\n        item1.splice(index2, 1)\r\n      } else {\r\n        stateNode.splice(index1, 1)\r\n      }\r\n    },\r\n    addNode2(item, index1) {\r\n      // 点击中间箭头的添加节点操作\r\n      this.$message('addNode2')\r\n      const group1 = item[index1 - 1][0].group // 小 例如：group:200\r\n      const group2 = item[index1][0].group // 大 例如：group:210\r\n      const temp = JSON.parse(JSON.stringify(this.temp))\r\n      // 设置group\r\n      temp[0].group = group1 + (group2 - group1) / 2 // 中间值：205\r\n      // console.log('addNode2.group点击中间箭头的添加节点操作:', temp[0].group)\r\n      item.splice(index1, 0, temp)\r\n    },\r\n    getPersons(personList) {\r\n      if ((personList || []).length > 0) {\r\n        this.tempItem2.personList = personList.map(m => { return { id: m.id, name: m.name } })\r\n        this.$nextTick(() => {\r\n          this.tempItem2.personId = personList[0].id\r\n        })\r\n      }\r\n    },\r\n    selectPerson(item2) {\r\n      this.tempItem2 = item2\r\n      this.$refs.personRef.openDialog()\r\n    }\r\n  }\r\n}\r\n",null]}
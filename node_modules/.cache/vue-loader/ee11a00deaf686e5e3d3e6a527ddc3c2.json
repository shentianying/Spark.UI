{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowCenter\\formFlowFieldAdd.vue?vue&type=template&id=14c4e50c&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\views\\lcgl\\flowCenter\\formFlowFieldAdd.vue","mtime":1624071363333},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"el-form\",\n    {\n      ref: \"ruleForm\",\n      attrs: {\n        \"status-icon\": \"\",\n        model: _vm.ruleForm,\n        rules: _vm.rules,\n        \"label-width\": \"120px\",\n        size: \"mini\"\n      }\n    },\n    [\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"选择或输入字段\", prop: \"field\" } },\n        [\n          _c(\n            \"el-select\",\n            {\n              attrs: { clearable: \"\", filterable: \"\", \"allow-create\": \"\" },\n              on: { change: _vm.selectFieldChange },\n              model: {\n                value: _vm.ruleForm.field,\n                callback: function($$v) {\n                  _vm.$set(_vm.ruleForm, \"field\", $$v)\n                },\n                expression: \"ruleForm.field\"\n              }\n            },\n            _vm._l(_vm.property, function(pItem, pIndex) {\n              return _c(\"el-option\", {\n                key: pIndex,\n                attrs: {\n                  label: pItem.item1 + \" \" + pItem.item2,\n                  value: pItem.item2\n                }\n              })\n            }),\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"表字段中文名\", prop: \"fieldName\" } },\n        [\n          _c(\"el-input\", {\n            attrs: { size: \"mini\", maxlength: \"50\" },\n            model: {\n              value: _vm.ruleForm.fieldName,\n              callback: function($$v) {\n                _vm.$set(_vm.ruleForm, \"fieldName\", $$v)\n              },\n              expression: \"ruleForm.fieldName\"\n            }\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"表字段类型\", prop: \"fieldType\" } },\n        [\n          _c(\n            \"el-select\",\n            {\n              on: { change: _vm.changeFieldType },\n              model: {\n                value: _vm.ruleForm.fieldType,\n                callback: function($$v) {\n                  _vm.$set(_vm.ruleForm, \"fieldType\", $$v)\n                },\n                expression: \"ruleForm.fieldType\"\n              }\n            },\n            _vm._l(_vm.fieldTypeList, function(item1, index1) {\n              return _c(\"el-option\", {\n                key: index1,\n                attrs: { label: item1.type, value: item1.type }\n              })\n            }),\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.showDicType\n        ? _c(\n            \"el-form-item\",\n            { attrs: { label: \"字典类型\", prop: \"dicType\" } },\n            [\n              _c(\n                \"el-select\",\n                {\n                  attrs: { clearable: \"\", filterable: \"\" },\n                  model: {\n                    value: _vm.ruleForm.dicType,\n                    callback: function($$v) {\n                      _vm.$set(_vm.ruleForm, \"dicType\", $$v)\n                    },\n                    expression: \"ruleForm.dicType\"\n                  }\n                },\n                _vm._l(_vm.typeList, function(item, index) {\n                  return _c(\"el-option\", {\n                    key: index,\n                    attrs: { label: item, value: item }\n                  })\n                }),\n                1\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\n        \"el-form-item\",\n        { attrs: { label: \"是否使用\", prop: \"inUse\" } },\n        [\n          _c(\"el-switch\", {\n            attrs: { \"active-color\": \"#13ce66\", \"inactive-color\": \"#ff4949\" },\n            model: {\n              value: _vm.ruleForm.inUse,\n              callback: function($$v) {\n                _vm.$set(_vm.ruleForm, \"inUse\", $$v)\n              },\n              expression: \"ruleForm.inUse\"\n            }\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"el-form-item\",\n        { staticStyle: { \"text-align\": \"right\" } },\n        [\n          _c(\n            \"el-button\",\n            {\n              attrs: {\n                type: \"primary\",\n                size: \"mini\",\n                loading: _vm.buttonLoading\n              },\n              on: {\n                click: function($event) {\n                  return _vm.submitForm(\"ruleForm\")\n                }\n              }\n            },\n            [_vm._v(\"保存\")]\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\MyForm\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\MyForm\\index.vue","mtime":1635749455599},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport JSXCompiler from './JSXCompiler'\r\nimport UpFile from '@/components/UpLoad/UpFile'\r\n// import MyInput from '@/components/SearchBar/MyInput'\r\nconst components = {}\r\nconst context = require.context(\r\n  '@/components/SearchBar/form/', // 组件所在目录的相对路径\r\n  false, // 是否查询其子目录\r\n  /[A-Z]\\w+\\.(vue|js)$/ // 匹配基础组件文件名的正则表达式\r\n)\r\ncontext.keys().forEach(fileName => {\r\n  // 获取文件名\r\n  var fname = fileName.split('/').pop().replace(/\\.\\w+$/, '')\r\n  // 获取组件配置\r\n  const componentConfig = context(fileName)\r\n  // 若该组件是通过\"export default\"导出的，优先使用\".default\"，否则退回到使用模块的根\r\n  components[fname] = componentConfig.default || componentConfig\r\n})\r\nexport default {\r\n  name: 'MyForm',\r\n  components: {\r\n    // MyInput\r\n    ...components,\r\n    JSXCompiler,\r\n    UpFile\r\n  },\r\n  props: {\r\n    type: {// 类型,可选值: Edit:表单,details: 详情\r\n      type: String,\r\n      default: 'Edit'\r\n    },\r\n    labelWidth: {\r\n      type: String,\r\n      default: '120px'\r\n    },\r\n    inputWidth: {\r\n      type: String,\r\n      default: '272px'\r\n    },\r\n    rules: {// 表单校验规则\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    formData: {// 表单数据\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    formNode: {// 表单结构\r\n      type: Array,\r\n      default() {\r\n        return []\r\n      }\r\n    },\r\n    size: {// 表单组件的尺寸\r\n      type: String,\r\n      default: 'mini'\r\n    }\r\n  },\r\n  computed: {\r\n    /**\r\n     * 计算表单结构\r\n     */\r\n    formList() {\r\n      const { formNode } = this\r\n      const myList = []\r\n      for (const value of formNode) {\r\n        // 增加对 if的支持,如果if为false就直接不显示\r\n        // 这里必须这么写,不能写!value.if 这样的,因为这样的话 不传也会不渲染,我们需要默认渲染\r\n        if (value.if === false) continue\r\n        const length = myList.length\r\n        const me = {\r\n          ...value,\r\n          component: value.component || 'elInput'\r\n        }\r\n        if (length > 0 && myList[ length - 1].length < 2 && !myList[ length - 1][0].monopolize && !value.monopolize) {\r\n          // 往上一行添加一个\r\n          myList[ length - 1].push(me)\r\n        } else {\r\n          myList.push([me])\r\n        }\r\n      }\r\n      return myList\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 处理子组件的change事件(如果有的话)\r\n     * @param {*} data 子组件事件传出来的数据\r\n     * @param {String} key 此项的key,可以作为触发的标识\r\n     */\r\n    handelChange(data, key) {\r\n      this.$emit(`${key}Change`, data)\r\n    },\r\n    /**\r\n     * 处理子组件的select事件(如果有的话)\r\n     * @param {*} data 子组件事件传出来的数据\r\n     * @param {String} key 此项的key,可以作为触发的标识\r\n     */\r\n    handelSelect(data, key) {\r\n      this.$emit(`${key}Select`, data)\r\n    },\r\n    /**\r\n     * el-form validate的封装\r\n     * 提前判断是否校验通过,这样就不用在外面每次都写一遍if了\r\n     * 为了更方便的兼容以前的代码还是会把表单校验状态传出去,但已不建议使用\r\n     */\r\n    validate(cb) {\r\n      this.$refs['myForm'].validate((valid, obj) => {\r\n        if (valid) cb(valid, obj)\r\n      })\r\n    },\r\n    resetFields() {\r\n      this.$refs['myForm'].resetFields()\r\n    },\r\n    clearValidate(...params) {\r\n      this.$refs['myForm'].clearValidate(...params)\r\n    }\r\n  }\r\n}\r\n",null]}
{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\TreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\SearchBar\\TreeSelect.vue","mtime":1631261807258},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/**\r\n * !!!!!!请注意el-cascader存在bug，options中的value不能为number类型的0!!!!!!否则点击清空标签时会报错并且不能清空\r\n * 如下:\r\n * options: [{\r\n          value: 0,     //这个不能是number类型的0，可以替换成'0'！！！！！！\r\n          label: '指南',\r\n          children: [{\r\n            value: '1',\r\n            label: '设计原则',\r\n            children: [{\r\n              value: 1,\r\n              label: '一致'\r\n            }]\r\n          }]\r\n *\r\n *\r\n * 由于上述bug，在本组件中会将所有value转换成string类型（通过value.toString()），并且在返回时自动转换其对应类型。\r\n * 基于@components/OrgSelect/index2.vue的修改\r\n * 由于原组件双向绑定方式的问题，导致在其父组件修改prop时不能更新到组件内，故在这里再做修改\r\n */\r\n\r\nexport default {\r\n  name: 'TreeSelect',\r\n  components: {\r\n  },\r\n  model: {\r\n    prop: 'selectValue', // 指向props的参数名\r\n    event: 'change'// 事件名称\r\n  },\r\n  props: {\r\n    selectValue: { type: [String, Number, Array], default: null }, // 获取你选中的值，传出去的v-model的值\r\n    options: { type: Array, default: null }, // 可选项数据源，键名可通过 Props 属性配置\r\n    // 组件参数\r\n    disabled: { type: Boolean, default: false },\r\n    clearable: { type: Boolean, default: true },\r\n    collapseTags: { type: Boolean, default: false }, // 已选中的选项的Tag，是否折叠显示\r\n    multiple: { type: Boolean, default: false },\r\n    checkStrictly: { type: Boolean, default: false }, // 是否严格的遵守父子节点不互相关联\r\n    expandTrigger: { type: String, default: 'click' }, // click / hover\r\n    propsValue: { type: String, default: 'value' }, // 绑定的字段值\r\n    propsLabel: { type: String, default: 'name' }, // 绑定的文本\r\n    size: { type: String, default: 'mini' }, // 可选值：medium / small / mini\r\n    filterable: { type: Boolean, default: false }, // 搜索功能\r\n    placeholder: { type: String, default: '请选择' }, // 输入框占位文本\r\n    separator: { type: String, default: '/' }, // 选项分隔符\r\n    showAllLevels: { type: Boolean, default: true }, // 输入框中是否显示选中值的完整路径\r\n    selectStyle: { type: String, default: 'width:100%' }, // 样式\r\n    // showRootNode: { type: Boolean, default: false }, // 是否显示根节点\r\n    dataMode: { type: Number, default: 0 } // 数据默认显示方式 0：全部显示，1：根据自己的权限显示\r\n  },\r\n  data() {\r\n    return {\r\n      valueType: 'number',\r\n      props: {\r\n        expandTrigge: 'click', // 触发方式 click hover\r\n        multiple: false, // 是否多选\r\n        checkStrictly: false, // 是否严格的遵守父子节点不互相关联\r\n        emitPath: true, // 在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置false，则只返回该节点的值\r\n        lazy: false, //\t是否动态加载子节点，需与 lazyLoad 方法结合使用\r\n        lazyLoad: (node, resolve) => { resolve }, // 加载动态数据的方法，仅在 lazy 为 true 时有效 ---- function(node, resolve)，node为当前点击的节点，resolve为数据加载完成的回调(必须调用)\r\n        value: 'value', // 指定选项标签为选项对象的某个属性值\r\n        label: 'name', // 指定选项标签为选项对象的某个属性值\r\n        children: 'childs', // 指定选项的子选项为选项对象的某个属性值\r\n        disabled: 'disabled', // 指定选项标签为选项对象的某个属性值\r\n        leaf: 'leaf' // 指定选项的叶子节点的标志位为选项对象的某个属性值\r\n      }\r\n\r\n    }\r\n  },\r\n  computed: {\r\n    myOptions() {\r\n      const options = JSON.parse(JSON.stringify(this.options))\r\n      this.transfOptions(options)\r\n      // console.log(options)\r\n      return options\r\n    },\r\n    modelValue: {\r\n      get() {\r\n        return this.findAllNodeParents(this.selectValue, this.myOptions)\r\n      },\r\n      set(val) {\r\n        let value = val\r\n        if (this.multiple) {\r\n          // 多选\r\n          value = value.map(m => {\r\n            return this.valueType === 'number' ? Number(m[m.length - 1]) : m[m.length - 1]\r\n          })\r\n          this.$emit('change', value)\r\n        } else {\r\n          // 单选\r\n          value = this.valueType === 'number' ? Number(value[value.length - 1]) : value[value.length - 1]\r\n          this.$emit('change', value)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.props.multiple = this.multiple\r\n    this.props.checkStrictly = this.checkStrictly\r\n    this.props.expandTrigger = this.expandTrigger\r\n    this.props.value = this.propsValue\r\n    this.props.label = this.propsLabel\r\n  },\r\n  methods: {\r\n    /**\r\n     * @description: 将optons所有value值转换成string类型\r\n     */\r\n    transfOptions(options) {\r\n      const { value, children } = this.props\r\n      if (Array.isArray(options)) {\r\n        options.forEach(e => {\r\n          this.valueType = typeof e[value]\r\n          this.$set(e, value, e[value].toString())\r\n          if (e[children]) {\r\n            this.transfOptions(e[children])\r\n          }\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * @description: 找到子节点数组的所有父节点\r\n     */\r\n    findAllNodeParents(nodes, options) {\r\n      if (Array.isArray(nodes)) {\r\n        return nodes.map(node => {\r\n          return this.findNodeParents(node, options)\r\n        })\r\n      } else {\r\n        return this.findNodeParents(nodes, options)\r\n      }\r\n    },\r\n    /**\r\n     * @description: 根据子节点找其所有父节点\r\n     * @param {*} arr\r\n     */\r\n    findNodeParents(node, options) {\r\n      const { value, children } = this.props\r\n      if (Array.isArray(options)) {\r\n        const len = options.length\r\n        for (let i = 0; i < len; i++) {\r\n          const e = options[i]\r\n          if (e[value].toString() === node.toString()) {\r\n            return [node.toString()]\r\n          } else if (e[children]) {\r\n            const data = this.findNodeParents(node, e[children])\r\n            if (data.length) {\r\n              data.unshift(e.value)\r\n              return data\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n  }\r\n}\r\n",null]}
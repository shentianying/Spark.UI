{"remainingRequest":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\spark\\Spark.UI\\src\\components\\OrgSelect\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\spark\\Spark.UI\\src\\components\\OrgSelect\\index.vue","mtime":1633937905701},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\spark\\Spark.UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getOrganizationList } from '@/api/xtgl/organization'\r\n\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport { getTree } from '@/utils/index'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nexport default {\r\n  name: 'TreeselectComponent',\r\n  components: {\r\n    Treeselect\r\n  },\r\n  model: {\r\n    prop: 'selectValue', // 指向props的参数名\r\n    event: 'change'// 事件名称\r\n  },\r\n  props: {\r\n    // 插件官网： https://www.vue-treeselect.cn/\r\n    searchable: { type: Boolean, default: true },\r\n    multiple: { type: Boolean, default: false },\r\n    disabled: { type: Boolean, default: false },\r\n    clearable: { type: Boolean, default: true },\r\n    maxHeight: { type: Number, default: 200 },\r\n    flat: { type: Boolean, default: false },\r\n    valueConsistsOf: { type: String, default: 'BRANCH_PRIORITY' }, // 1.BRANCH_PRIORITY 默认分支节点 2.LEAF_PRIORITY 值是 叶子节点 数组 3.All 所有节点 4.ALL_WITH_INDETERMINATE\r\n    selectValue: { type: [String, Number, Array], default: null }, // 获取你选中的值，传出去的v-model的值\r\n    treeData: { type: Array, default: null }, // 传进来的初始化数据\r\n    selectData: { type: [String, Number, Array], default: null }, // 初始化选中的数据\r\n    selectStyle: { type: String, default: 'width:100%' }, // 选择css样式\r\n    showRootNode: { type: Boolean, default: false }, // 是否显示根节点\r\n    dataMode: { type: Number, default: 0 } // treeData传进来的数据就无效 0：全部显示，1：根据自己的权限显示\r\n  },\r\n  data() {\r\n    return {\r\n      modelValue: null,\r\n      list: [],\r\n      listTemp: [], //  临时变量\r\n      allOrgList: [],\r\n      rootNode: [{ id: 0, pid: 0, label: '根节点' }] // 根节点\r\n    }\r\n  },\r\n  watch: {\r\n    modelValue(value) {\r\n      this.$emit('change', value)\r\n    }\r\n  },\r\n  mounted() {\r\n    // console.log('树形数据1 treeData:', this.treeData)\r\n    // console.log('下拉组件 selectData:', this.selectData)\r\n    if (this.selectData) {\r\n      // console.log('下拉组件 selectData:', this.selectData)\r\n      this.modelValue = this.selectData\r\n    }\r\n    if (this.treeData) {\r\n      this.list = getTree(0, this.treeData)\r\n      console.log('this.list:', this.list)\r\n      this.addRootNode()\r\n    } else {\r\n      this.fetchData()\r\n    }\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      getOrganizationList().then(response => {\r\n        const { data } = response\r\n        this.allOrgList = data\r\n        data.forEach(ele => {\r\n          ele.label = ele.name\r\n        })\r\n\r\n        if (this.dataMode === 0) { // *******************0**********************\r\n          // 绑定全部的组织机构数据\r\n          this.list = getTree(0, data).filter(f => f.id === this.$store.state.user.selectOrgId)\r\n        } else if (this.dataMode === 1) { // *******************1**********************\r\n          // 根据自己的权限来显示数据\r\n          const userOrgList = this.$store.state.user.info.userOrgList\r\n          const selectOrgId = this.$store.state.user.selectOrgId\r\n          var orgIds = userOrgList.filter(f => f.companyId === selectOrgId).map(m => { return m.organizationId })\r\n          // console.log('orgIds:', orgIds)\r\n          let arr1 = []\r\n          orgIds.forEach(orgId => {\r\n            var temp2 = getTree(orgId, data) // 根据orgid 获取组织机构树形\r\n            // console.log('temp2:', temp2)\r\n            // 有叶子节点,说明当前节点是父级\r\n            if (temp2.length) {\r\n              var leafNodes = this.getChildrenNodes({ children: temp2 }, [])\r\n              // 添加 子节点\r\n              arr1 = [...arr1, ...this.allOrgList.filter(f => leafNodes.includes(f.id))]\r\n            }\r\n            // 添加 父节点\r\n            arr1.push(this.allOrgList.find(f => f.id === orgId))\r\n          })\r\n          // console.log('当前arr1:', arr1)\r\n          this.list = this.toTree(arr1)\r\n        }\r\n        this.addRootNode()\r\n      })\r\n    },\r\n    toTree(data) {\r\n      const result = []\r\n      if (!Array.isArray(data)) {\r\n        return result\r\n      }\r\n      data.forEach(item => {\r\n        delete item.children\r\n      })\r\n      const map = {}\r\n      data.forEach(item => {\r\n        map[item.id] = item\r\n      })\r\n      data.forEach(item => {\r\n        const parent = map[item.pid]\r\n        if (parent) {\r\n          (parent.children || (parent.children = [])).push(item)\r\n        } else {\r\n          result.push(item)\r\n        }\r\n      })\r\n      return result\r\n    },\r\n    getChildrenNodes(data, arr) {\r\n      if (data.children) {\r\n        data.children.forEach(element => {\r\n          arr.push(element.id)\r\n          if (element.children) {\r\n            this.getChildrenNodes(element, arr)\r\n          }\r\n        })\r\n      }\r\n      return arr\r\n    },\r\n    addRootNode() {\r\n      // 添加根节点\r\n      if (this.showRootNode) {\r\n        // 根节点下面有数据，就添加children\r\n        // if (this.listTemp.length) { this.rootNode[0].children = this.listTemp }\r\n        this.rootNode[0].children = this.list\r\n        // 没数据，就只显示一个根节点\r\n        this.list = this.rootNode\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",null]}